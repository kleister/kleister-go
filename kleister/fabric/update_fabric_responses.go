// Code generated by go-swagger; DO NOT EDIT.

package fabric

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// UpdateFabricReader is a Reader for the UpdateFabric structure.
type UpdateFabricReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateFabricReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateFabricOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateFabricForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateFabricServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateFabricDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateFabricOK creates a UpdateFabricOK with default headers values
func NewUpdateFabricOK() *UpdateFabricOK {
	return &UpdateFabricOK{}
}

/*
UpdateFabricOK describes a response with status code 200, with default header values.

Plain success message
*/
type UpdateFabricOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this update fabric o k response has a 2xx status code
func (o *UpdateFabricOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update fabric o k response has a 3xx status code
func (o *UpdateFabricOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update fabric o k response has a 4xx status code
func (o *UpdateFabricOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update fabric o k response has a 5xx status code
func (o *UpdateFabricOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update fabric o k response a status code equal to that given
func (o *UpdateFabricOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update fabric o k response
func (o *UpdateFabricOK) Code() int {
	return 200
}

func (o *UpdateFabricOK) Error() string {
	return fmt.Sprintf("[PUT /fabric][%d] updateFabricOK  %+v", 200, o.Payload)
}

func (o *UpdateFabricOK) String() string {
	return fmt.Sprintf("[PUT /fabric][%d] updateFabricOK  %+v", 200, o.Payload)
}

func (o *UpdateFabricOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateFabricOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFabricForbidden creates a UpdateFabricForbidden with default headers values
func NewUpdateFabricForbidden() *UpdateFabricForbidden {
	return &UpdateFabricForbidden{}
}

/*
UpdateFabricForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type UpdateFabricForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this update fabric forbidden response has a 2xx status code
func (o *UpdateFabricForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update fabric forbidden response has a 3xx status code
func (o *UpdateFabricForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update fabric forbidden response has a 4xx status code
func (o *UpdateFabricForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update fabric forbidden response has a 5xx status code
func (o *UpdateFabricForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update fabric forbidden response a status code equal to that given
func (o *UpdateFabricForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update fabric forbidden response
func (o *UpdateFabricForbidden) Code() int {
	return 403
}

func (o *UpdateFabricForbidden) Error() string {
	return fmt.Sprintf("[PUT /fabric][%d] updateFabricForbidden  %+v", 403, o.Payload)
}

func (o *UpdateFabricForbidden) String() string {
	return fmt.Sprintf("[PUT /fabric][%d] updateFabricForbidden  %+v", 403, o.Payload)
}

func (o *UpdateFabricForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateFabricForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFabricServiceUnavailable creates a UpdateFabricServiceUnavailable with default headers values
func NewUpdateFabricServiceUnavailable() *UpdateFabricServiceUnavailable {
	return &UpdateFabricServiceUnavailable{}
}

/*
UpdateFabricServiceUnavailable describes a response with status code 503, with default header values.

If remote source is not available
*/
type UpdateFabricServiceUnavailable struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this update fabric service unavailable response has a 2xx status code
func (o *UpdateFabricServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update fabric service unavailable response has a 3xx status code
func (o *UpdateFabricServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update fabric service unavailable response has a 4xx status code
func (o *UpdateFabricServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update fabric service unavailable response has a 5xx status code
func (o *UpdateFabricServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update fabric service unavailable response a status code equal to that given
func (o *UpdateFabricServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the update fabric service unavailable response
func (o *UpdateFabricServiceUnavailable) Code() int {
	return 503
}

func (o *UpdateFabricServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /fabric][%d] updateFabricServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateFabricServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /fabric][%d] updateFabricServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateFabricServiceUnavailable) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateFabricServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFabricDefault creates a UpdateFabricDefault with default headers values
func NewUpdateFabricDefault(code int) *UpdateFabricDefault {
	return &UpdateFabricDefault{
		_statusCode: code,
	}
}

/*
UpdateFabricDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type UpdateFabricDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this update fabric default response has a 2xx status code
func (o *UpdateFabricDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update fabric default response has a 3xx status code
func (o *UpdateFabricDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update fabric default response has a 4xx status code
func (o *UpdateFabricDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update fabric default response has a 5xx status code
func (o *UpdateFabricDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update fabric default response a status code equal to that given
func (o *UpdateFabricDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update fabric default response
func (o *UpdateFabricDefault) Code() int {
	return o._statusCode
}

func (o *UpdateFabricDefault) Error() string {
	return fmt.Sprintf("[PUT /fabric][%d] UpdateFabric default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateFabricDefault) String() string {
	return fmt.Sprintf("[PUT /fabric][%d] UpdateFabric default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateFabricDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateFabricDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
