// Code generated by go-swagger; DO NOT EDIT.

package fabric

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new fabric API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fabric API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AppendFabricToBuild(params *AppendFabricToBuildParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppendFabricToBuildOK, error)

	DeleteFabricFromBuild(params *DeleteFabricFromBuildParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFabricFromBuildOK, error)

	ListFabricBuilds(params *ListFabricBuildsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFabricBuildsOK, error)

	ListFabrics(params *ListFabricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFabricsOK, error)

	SearchFabrics(params *SearchFabricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchFabricsOK, error)

	UpdateFabric(params *UpdateFabricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFabricOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AppendFabricToBuild assigns a build to a fabric version
*/
func (a *Client) AppendFabricToBuild(params *AppendFabricToBuildParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppendFabricToBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendFabricToBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppendFabricToBuild",
		Method:             "POST",
		PathPattern:        "/fabric/{fabric_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppendFabricToBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppendFabricToBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppendFabricToBuildDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteFabricFromBuild unlinks a build from a fabric version
*/
func (a *Client) DeleteFabricFromBuild(params *DeleteFabricFromBuildParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFabricFromBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFabricFromBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteFabricFromBuild",
		Method:             "DELETE",
		PathPattern:        "/fabric/{fabric_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFabricFromBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFabricFromBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFabricFromBuildDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListFabricBuilds fetches the builds assigned to a fabric version
*/
func (a *Client) ListFabricBuilds(params *ListFabricBuildsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFabricBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFabricBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListFabricBuilds",
		Method:             "GET",
		PathPattern:        "/fabric/{fabric_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListFabricBuildsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFabricBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListFabricBuildsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListFabrics fetches the available fabric versions
*/
func (a *Client) ListFabrics(params *ListFabricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFabricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFabricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListFabrics",
		Method:             "GET",
		PathPattern:        "/fabric",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListFabricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFabricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListFabricsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchFabrics searches for available fabric versions
*/
func (a *Client) SearchFabrics(params *SearchFabricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchFabricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchFabricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchFabrics",
		Method:             "GET",
		PathPattern:        "/fabric/{fabric_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchFabricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchFabricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchFabricsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateFabric updates the available fabric versions
*/
func (a *Client) UpdateFabric(params *UpdateFabricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFabricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFabricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateFabric",
		Method:             "PUT",
		PathPattern:        "/fabric",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateFabricReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFabricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateFabricDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
