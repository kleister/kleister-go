// Code generated by go-swagger; DO NOT EDIT.

package neoforge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// DeleteNeoforgeFromBuildReader is a Reader for the DeleteNeoforgeFromBuild structure.
type DeleteNeoforgeFromBuildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNeoforgeFromBuildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteNeoforgeFromBuildOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteNeoforgeFromBuildForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteNeoforgeFromBuildNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewDeleteNeoforgeFromBuildNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteNeoforgeFromBuildPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteNeoforgeFromBuildDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteNeoforgeFromBuildOK creates a DeleteNeoforgeFromBuildOK with default headers values
func NewDeleteNeoforgeFromBuildOK() *DeleteNeoforgeFromBuildOK {
	return &DeleteNeoforgeFromBuildOK{}
}

/*
DeleteNeoforgeFromBuildOK describes a response with status code 200, with default header values.

Plain success message
*/
type DeleteNeoforgeFromBuildOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete neoforge from build o k response has a 2xx status code
func (o *DeleteNeoforgeFromBuildOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete neoforge from build o k response has a 3xx status code
func (o *DeleteNeoforgeFromBuildOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete neoforge from build o k response has a 4xx status code
func (o *DeleteNeoforgeFromBuildOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete neoforge from build o k response has a 5xx status code
func (o *DeleteNeoforgeFromBuildOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete neoforge from build o k response a status code equal to that given
func (o *DeleteNeoforgeFromBuildOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete neoforge from build o k response
func (o *DeleteNeoforgeFromBuildOK) Code() int {
	return 200
}

func (o *DeleteNeoforgeFromBuildOK) Error() string {
	return fmt.Sprintf("[DELETE /neoforge/{neoforge_id}/builds][%d] deleteNeoforgeFromBuildOK  %+v", 200, o.Payload)
}

func (o *DeleteNeoforgeFromBuildOK) String() string {
	return fmt.Sprintf("[DELETE /neoforge/{neoforge_id}/builds][%d] deleteNeoforgeFromBuildOK  %+v", 200, o.Payload)
}

func (o *DeleteNeoforgeFromBuildOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteNeoforgeFromBuildOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNeoforgeFromBuildForbidden creates a DeleteNeoforgeFromBuildForbidden with default headers values
func NewDeleteNeoforgeFromBuildForbidden() *DeleteNeoforgeFromBuildForbidden {
	return &DeleteNeoforgeFromBuildForbidden{}
}

/*
DeleteNeoforgeFromBuildForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type DeleteNeoforgeFromBuildForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete neoforge from build forbidden response has a 2xx status code
func (o *DeleteNeoforgeFromBuildForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete neoforge from build forbidden response has a 3xx status code
func (o *DeleteNeoforgeFromBuildForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete neoforge from build forbidden response has a 4xx status code
func (o *DeleteNeoforgeFromBuildForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete neoforge from build forbidden response has a 5xx status code
func (o *DeleteNeoforgeFromBuildForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete neoforge from build forbidden response a status code equal to that given
func (o *DeleteNeoforgeFromBuildForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete neoforge from build forbidden response
func (o *DeleteNeoforgeFromBuildForbidden) Code() int {
	return 403
}

func (o *DeleteNeoforgeFromBuildForbidden) Error() string {
	return fmt.Sprintf("[DELETE /neoforge/{neoforge_id}/builds][%d] deleteNeoforgeFromBuildForbidden  %+v", 403, o.Payload)
}

func (o *DeleteNeoforgeFromBuildForbidden) String() string {
	return fmt.Sprintf("[DELETE /neoforge/{neoforge_id}/builds][%d] deleteNeoforgeFromBuildForbidden  %+v", 403, o.Payload)
}

func (o *DeleteNeoforgeFromBuildForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteNeoforgeFromBuildForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNeoforgeFromBuildNotFound creates a DeleteNeoforgeFromBuildNotFound with default headers values
func NewDeleteNeoforgeFromBuildNotFound() *DeleteNeoforgeFromBuildNotFound {
	return &DeleteNeoforgeFromBuildNotFound{}
}

/*
DeleteNeoforgeFromBuildNotFound describes a response with status code 404, with default header values.

Neoforge or build not found
*/
type DeleteNeoforgeFromBuildNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete neoforge from build not found response has a 2xx status code
func (o *DeleteNeoforgeFromBuildNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete neoforge from build not found response has a 3xx status code
func (o *DeleteNeoforgeFromBuildNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete neoforge from build not found response has a 4xx status code
func (o *DeleteNeoforgeFromBuildNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete neoforge from build not found response has a 5xx status code
func (o *DeleteNeoforgeFromBuildNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete neoforge from build not found response a status code equal to that given
func (o *DeleteNeoforgeFromBuildNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete neoforge from build not found response
func (o *DeleteNeoforgeFromBuildNotFound) Code() int {
	return 404
}

func (o *DeleteNeoforgeFromBuildNotFound) Error() string {
	return fmt.Sprintf("[DELETE /neoforge/{neoforge_id}/builds][%d] deleteNeoforgeFromBuildNotFound  %+v", 404, o.Payload)
}

func (o *DeleteNeoforgeFromBuildNotFound) String() string {
	return fmt.Sprintf("[DELETE /neoforge/{neoforge_id}/builds][%d] deleteNeoforgeFromBuildNotFound  %+v", 404, o.Payload)
}

func (o *DeleteNeoforgeFromBuildNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteNeoforgeFromBuildNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNeoforgeFromBuildNotAcceptable creates a DeleteNeoforgeFromBuildNotAcceptable with default headers values
func NewDeleteNeoforgeFromBuildNotAcceptable() *DeleteNeoforgeFromBuildNotAcceptable {
	return &DeleteNeoforgeFromBuildNotAcceptable{}
}

/*
DeleteNeoforgeFromBuildNotAcceptable describes a response with status code 406, with default header values.

Failed to update build
*/
type DeleteNeoforgeFromBuildNotAcceptable struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete neoforge from build not acceptable response has a 2xx status code
func (o *DeleteNeoforgeFromBuildNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete neoforge from build not acceptable response has a 3xx status code
func (o *DeleteNeoforgeFromBuildNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete neoforge from build not acceptable response has a 4xx status code
func (o *DeleteNeoforgeFromBuildNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete neoforge from build not acceptable response has a 5xx status code
func (o *DeleteNeoforgeFromBuildNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this delete neoforge from build not acceptable response a status code equal to that given
func (o *DeleteNeoforgeFromBuildNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the delete neoforge from build not acceptable response
func (o *DeleteNeoforgeFromBuildNotAcceptable) Code() int {
	return 406
}

func (o *DeleteNeoforgeFromBuildNotAcceptable) Error() string {
	return fmt.Sprintf("[DELETE /neoforge/{neoforge_id}/builds][%d] deleteNeoforgeFromBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *DeleteNeoforgeFromBuildNotAcceptable) String() string {
	return fmt.Sprintf("[DELETE /neoforge/{neoforge_id}/builds][%d] deleteNeoforgeFromBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *DeleteNeoforgeFromBuildNotAcceptable) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteNeoforgeFromBuildNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNeoforgeFromBuildPreconditionFailed creates a DeleteNeoforgeFromBuildPreconditionFailed with default headers values
func NewDeleteNeoforgeFromBuildPreconditionFailed() *DeleteNeoforgeFromBuildPreconditionFailed {
	return &DeleteNeoforgeFromBuildPreconditionFailed{}
}

/*
DeleteNeoforgeFromBuildPreconditionFailed describes a response with status code 412, with default header values.

Build is not assigned
*/
type DeleteNeoforgeFromBuildPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete neoforge from build precondition failed response has a 2xx status code
func (o *DeleteNeoforgeFromBuildPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete neoforge from build precondition failed response has a 3xx status code
func (o *DeleteNeoforgeFromBuildPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete neoforge from build precondition failed response has a 4xx status code
func (o *DeleteNeoforgeFromBuildPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete neoforge from build precondition failed response has a 5xx status code
func (o *DeleteNeoforgeFromBuildPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete neoforge from build precondition failed response a status code equal to that given
func (o *DeleteNeoforgeFromBuildPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete neoforge from build precondition failed response
func (o *DeleteNeoforgeFromBuildPreconditionFailed) Code() int {
	return 412
}

func (o *DeleteNeoforgeFromBuildPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /neoforge/{neoforge_id}/builds][%d] deleteNeoforgeFromBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteNeoforgeFromBuildPreconditionFailed) String() string {
	return fmt.Sprintf("[DELETE /neoforge/{neoforge_id}/builds][%d] deleteNeoforgeFromBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteNeoforgeFromBuildPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteNeoforgeFromBuildPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNeoforgeFromBuildDefault creates a DeleteNeoforgeFromBuildDefault with default headers values
func NewDeleteNeoforgeFromBuildDefault(code int) *DeleteNeoforgeFromBuildDefault {
	return &DeleteNeoforgeFromBuildDefault{
		_statusCode: code,
	}
}

/*
DeleteNeoforgeFromBuildDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type DeleteNeoforgeFromBuildDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this delete neoforge from build default response has a 2xx status code
func (o *DeleteNeoforgeFromBuildDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete neoforge from build default response has a 3xx status code
func (o *DeleteNeoforgeFromBuildDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete neoforge from build default response has a 4xx status code
func (o *DeleteNeoforgeFromBuildDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete neoforge from build default response has a 5xx status code
func (o *DeleteNeoforgeFromBuildDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete neoforge from build default response a status code equal to that given
func (o *DeleteNeoforgeFromBuildDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete neoforge from build default response
func (o *DeleteNeoforgeFromBuildDefault) Code() int {
	return o._statusCode
}

func (o *DeleteNeoforgeFromBuildDefault) Error() string {
	return fmt.Sprintf("[DELETE /neoforge/{neoforge_id}/builds][%d] DeleteNeoforgeFromBuild default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteNeoforgeFromBuildDefault) String() string {
	return fmt.Sprintf("[DELETE /neoforge/{neoforge_id}/builds][%d] DeleteNeoforgeFromBuild default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteNeoforgeFromBuildDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteNeoforgeFromBuildDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
