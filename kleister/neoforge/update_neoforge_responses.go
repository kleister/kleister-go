// Code generated by go-swagger; DO NOT EDIT.

package neoforge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// UpdateNeoforgeReader is a Reader for the UpdateNeoforge structure.
type UpdateNeoforgeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNeoforgeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNeoforgeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateNeoforgeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateNeoforgeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateNeoforgeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateNeoforgeOK creates a UpdateNeoforgeOK with default headers values
func NewUpdateNeoforgeOK() *UpdateNeoforgeOK {
	return &UpdateNeoforgeOK{}
}

/*
UpdateNeoforgeOK describes a response with status code 200, with default header values.

Plain success message
*/
type UpdateNeoforgeOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this update neoforge o k response has a 2xx status code
func (o *UpdateNeoforgeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update neoforge o k response has a 3xx status code
func (o *UpdateNeoforgeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update neoforge o k response has a 4xx status code
func (o *UpdateNeoforgeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update neoforge o k response has a 5xx status code
func (o *UpdateNeoforgeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update neoforge o k response a status code equal to that given
func (o *UpdateNeoforgeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update neoforge o k response
func (o *UpdateNeoforgeOK) Code() int {
	return 200
}

func (o *UpdateNeoforgeOK) Error() string {
	return fmt.Sprintf("[PUT /neoforge][%d] updateNeoforgeOK  %+v", 200, o.Payload)
}

func (o *UpdateNeoforgeOK) String() string {
	return fmt.Sprintf("[PUT /neoforge][%d] updateNeoforgeOK  %+v", 200, o.Payload)
}

func (o *UpdateNeoforgeOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateNeoforgeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNeoforgeForbidden creates a UpdateNeoforgeForbidden with default headers values
func NewUpdateNeoforgeForbidden() *UpdateNeoforgeForbidden {
	return &UpdateNeoforgeForbidden{}
}

/*
UpdateNeoforgeForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type UpdateNeoforgeForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this update neoforge forbidden response has a 2xx status code
func (o *UpdateNeoforgeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update neoforge forbidden response has a 3xx status code
func (o *UpdateNeoforgeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update neoforge forbidden response has a 4xx status code
func (o *UpdateNeoforgeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update neoforge forbidden response has a 5xx status code
func (o *UpdateNeoforgeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update neoforge forbidden response a status code equal to that given
func (o *UpdateNeoforgeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update neoforge forbidden response
func (o *UpdateNeoforgeForbidden) Code() int {
	return 403
}

func (o *UpdateNeoforgeForbidden) Error() string {
	return fmt.Sprintf("[PUT /neoforge][%d] updateNeoforgeForbidden  %+v", 403, o.Payload)
}

func (o *UpdateNeoforgeForbidden) String() string {
	return fmt.Sprintf("[PUT /neoforge][%d] updateNeoforgeForbidden  %+v", 403, o.Payload)
}

func (o *UpdateNeoforgeForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateNeoforgeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNeoforgeServiceUnavailable creates a UpdateNeoforgeServiceUnavailable with default headers values
func NewUpdateNeoforgeServiceUnavailable() *UpdateNeoforgeServiceUnavailable {
	return &UpdateNeoforgeServiceUnavailable{}
}

/*
UpdateNeoforgeServiceUnavailable describes a response with status code 503, with default header values.

If remote source is not available
*/
type UpdateNeoforgeServiceUnavailable struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this update neoforge service unavailable response has a 2xx status code
func (o *UpdateNeoforgeServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update neoforge service unavailable response has a 3xx status code
func (o *UpdateNeoforgeServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update neoforge service unavailable response has a 4xx status code
func (o *UpdateNeoforgeServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update neoforge service unavailable response has a 5xx status code
func (o *UpdateNeoforgeServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update neoforge service unavailable response a status code equal to that given
func (o *UpdateNeoforgeServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the update neoforge service unavailable response
func (o *UpdateNeoforgeServiceUnavailable) Code() int {
	return 503
}

func (o *UpdateNeoforgeServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /neoforge][%d] updateNeoforgeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateNeoforgeServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /neoforge][%d] updateNeoforgeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateNeoforgeServiceUnavailable) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateNeoforgeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNeoforgeDefault creates a UpdateNeoforgeDefault with default headers values
func NewUpdateNeoforgeDefault(code int) *UpdateNeoforgeDefault {
	return &UpdateNeoforgeDefault{
		_statusCode: code,
	}
}

/*
UpdateNeoforgeDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type UpdateNeoforgeDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this update neoforge default response has a 2xx status code
func (o *UpdateNeoforgeDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update neoforge default response has a 3xx status code
func (o *UpdateNeoforgeDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update neoforge default response has a 4xx status code
func (o *UpdateNeoforgeDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update neoforge default response has a 5xx status code
func (o *UpdateNeoforgeDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update neoforge default response a status code equal to that given
func (o *UpdateNeoforgeDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update neoforge default response
func (o *UpdateNeoforgeDefault) Code() int {
	return o._statusCode
}

func (o *UpdateNeoforgeDefault) Error() string {
	return fmt.Sprintf("[PUT /neoforge][%d] UpdateNeoforge default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateNeoforgeDefault) String() string {
	return fmt.Sprintf("[PUT /neoforge][%d] UpdateNeoforge default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateNeoforgeDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateNeoforgeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
