// Code generated by go-swagger; DO NOT EDIT.

package neoforge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// ListNeoforgeBuildsReader is a Reader for the ListNeoforgeBuilds structure.
type ListNeoforgeBuildsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListNeoforgeBuildsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListNeoforgeBuildsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewListNeoforgeBuildsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListNeoforgeBuildsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListNeoforgeBuildsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListNeoforgeBuildsOK creates a ListNeoforgeBuildsOK with default headers values
func NewListNeoforgeBuildsOK() *ListNeoforgeBuildsOK {
	return &ListNeoforgeBuildsOK{}
}

/*
ListNeoforgeBuildsOK describes a response with status code 200, with default header values.

A collection of assigned builds
*/
type ListNeoforgeBuildsOK struct {
	Payload *models.NeoforgeBuilds
}

// IsSuccess returns true when this list neoforge builds o k response has a 2xx status code
func (o *ListNeoforgeBuildsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list neoforge builds o k response has a 3xx status code
func (o *ListNeoforgeBuildsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list neoforge builds o k response has a 4xx status code
func (o *ListNeoforgeBuildsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list neoforge builds o k response has a 5xx status code
func (o *ListNeoforgeBuildsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list neoforge builds o k response a status code equal to that given
func (o *ListNeoforgeBuildsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list neoforge builds o k response
func (o *ListNeoforgeBuildsOK) Code() int {
	return 200
}

func (o *ListNeoforgeBuildsOK) Error() string {
	return fmt.Sprintf("[GET /neoforge/{neoforge_id}/builds][%d] listNeoforgeBuildsOK  %+v", 200, o.Payload)
}

func (o *ListNeoforgeBuildsOK) String() string {
	return fmt.Sprintf("[GET /neoforge/{neoforge_id}/builds][%d] listNeoforgeBuildsOK  %+v", 200, o.Payload)
}

func (o *ListNeoforgeBuildsOK) GetPayload() *models.NeoforgeBuilds {
	return o.Payload
}

func (o *ListNeoforgeBuildsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NeoforgeBuilds)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNeoforgeBuildsForbidden creates a ListNeoforgeBuildsForbidden with default headers values
func NewListNeoforgeBuildsForbidden() *ListNeoforgeBuildsForbidden {
	return &ListNeoforgeBuildsForbidden{}
}

/*
ListNeoforgeBuildsForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type ListNeoforgeBuildsForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this list neoforge builds forbidden response has a 2xx status code
func (o *ListNeoforgeBuildsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list neoforge builds forbidden response has a 3xx status code
func (o *ListNeoforgeBuildsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list neoforge builds forbidden response has a 4xx status code
func (o *ListNeoforgeBuildsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list neoforge builds forbidden response has a 5xx status code
func (o *ListNeoforgeBuildsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list neoforge builds forbidden response a status code equal to that given
func (o *ListNeoforgeBuildsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list neoforge builds forbidden response
func (o *ListNeoforgeBuildsForbidden) Code() int {
	return 403
}

func (o *ListNeoforgeBuildsForbidden) Error() string {
	return fmt.Sprintf("[GET /neoforge/{neoforge_id}/builds][%d] listNeoforgeBuildsForbidden  %+v", 403, o.Payload)
}

func (o *ListNeoforgeBuildsForbidden) String() string {
	return fmt.Sprintf("[GET /neoforge/{neoforge_id}/builds][%d] listNeoforgeBuildsForbidden  %+v", 403, o.Payload)
}

func (o *ListNeoforgeBuildsForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ListNeoforgeBuildsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNeoforgeBuildsNotFound creates a ListNeoforgeBuildsNotFound with default headers values
func NewListNeoforgeBuildsNotFound() *ListNeoforgeBuildsNotFound {
	return &ListNeoforgeBuildsNotFound{}
}

/*
ListNeoforgeBuildsNotFound describes a response with status code 404, with default header values.

Neoforge or build not found
*/
type ListNeoforgeBuildsNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this list neoforge builds not found response has a 2xx status code
func (o *ListNeoforgeBuildsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list neoforge builds not found response has a 3xx status code
func (o *ListNeoforgeBuildsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list neoforge builds not found response has a 4xx status code
func (o *ListNeoforgeBuildsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list neoforge builds not found response has a 5xx status code
func (o *ListNeoforgeBuildsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list neoforge builds not found response a status code equal to that given
func (o *ListNeoforgeBuildsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list neoforge builds not found response
func (o *ListNeoforgeBuildsNotFound) Code() int {
	return 404
}

func (o *ListNeoforgeBuildsNotFound) Error() string {
	return fmt.Sprintf("[GET /neoforge/{neoforge_id}/builds][%d] listNeoforgeBuildsNotFound  %+v", 404, o.Payload)
}

func (o *ListNeoforgeBuildsNotFound) String() string {
	return fmt.Sprintf("[GET /neoforge/{neoforge_id}/builds][%d] listNeoforgeBuildsNotFound  %+v", 404, o.Payload)
}

func (o *ListNeoforgeBuildsNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ListNeoforgeBuildsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNeoforgeBuildsDefault creates a ListNeoforgeBuildsDefault with default headers values
func NewListNeoforgeBuildsDefault(code int) *ListNeoforgeBuildsDefault {
	return &ListNeoforgeBuildsDefault{
		_statusCode: code,
	}
}

/*
ListNeoforgeBuildsDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type ListNeoforgeBuildsDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this list neoforge builds default response has a 2xx status code
func (o *ListNeoforgeBuildsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list neoforge builds default response has a 3xx status code
func (o *ListNeoforgeBuildsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list neoforge builds default response has a 4xx status code
func (o *ListNeoforgeBuildsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list neoforge builds default response has a 5xx status code
func (o *ListNeoforgeBuildsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list neoforge builds default response a status code equal to that given
func (o *ListNeoforgeBuildsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list neoforge builds default response
func (o *ListNeoforgeBuildsDefault) Code() int {
	return o._statusCode
}

func (o *ListNeoforgeBuildsDefault) Error() string {
	return fmt.Sprintf("[GET /neoforge/{neoforge_id}/builds][%d] ListNeoforgeBuilds default  %+v", o._statusCode, o.Payload)
}

func (o *ListNeoforgeBuildsDefault) String() string {
	return fmt.Sprintf("[GET /neoforge/{neoforge_id}/builds][%d] ListNeoforgeBuilds default  %+v", o._statusCode, o.Payload)
}

func (o *ListNeoforgeBuildsDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ListNeoforgeBuildsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
