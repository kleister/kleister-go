// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// AppendMinecraftToBuildReader is a Reader for the AppendMinecraftToBuild structure.
type AppendMinecraftToBuildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendMinecraftToBuildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAppendMinecraftToBuildOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAppendMinecraftToBuildForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAppendMinecraftToBuildNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewAppendMinecraftToBuildNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewAppendMinecraftToBuildPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAppendMinecraftToBuildDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppendMinecraftToBuildOK creates a AppendMinecraftToBuildOK with default headers values
func NewAppendMinecraftToBuildOK() *AppendMinecraftToBuildOK {
	return &AppendMinecraftToBuildOK{}
}

/*
AppendMinecraftToBuildOK describes a response with status code 200, with default header values.

Plain success message
*/
type AppendMinecraftToBuildOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append minecraft to build o k response has a 2xx status code
func (o *AppendMinecraftToBuildOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this append minecraft to build o k response has a 3xx status code
func (o *AppendMinecraftToBuildOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append minecraft to build o k response has a 4xx status code
func (o *AppendMinecraftToBuildOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this append minecraft to build o k response has a 5xx status code
func (o *AppendMinecraftToBuildOK) IsServerError() bool {
	return false
}

// IsCode returns true when this append minecraft to build o k response a status code equal to that given
func (o *AppendMinecraftToBuildOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the append minecraft to build o k response
func (o *AppendMinecraftToBuildOK) Code() int {
	return 200
}

func (o *AppendMinecraftToBuildOK) Error() string {
	return fmt.Sprintf("[POST /minecraft/{minecraft_id}/builds][%d] appendMinecraftToBuildOK  %+v", 200, o.Payload)
}

func (o *AppendMinecraftToBuildOK) String() string {
	return fmt.Sprintf("[POST /minecraft/{minecraft_id}/builds][%d] appendMinecraftToBuildOK  %+v", 200, o.Payload)
}

func (o *AppendMinecraftToBuildOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendMinecraftToBuildOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendMinecraftToBuildForbidden creates a AppendMinecraftToBuildForbidden with default headers values
func NewAppendMinecraftToBuildForbidden() *AppendMinecraftToBuildForbidden {
	return &AppendMinecraftToBuildForbidden{}
}

/*
AppendMinecraftToBuildForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type AppendMinecraftToBuildForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append minecraft to build forbidden response has a 2xx status code
func (o *AppendMinecraftToBuildForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append minecraft to build forbidden response has a 3xx status code
func (o *AppendMinecraftToBuildForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append minecraft to build forbidden response has a 4xx status code
func (o *AppendMinecraftToBuildForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this append minecraft to build forbidden response has a 5xx status code
func (o *AppendMinecraftToBuildForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this append minecraft to build forbidden response a status code equal to that given
func (o *AppendMinecraftToBuildForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the append minecraft to build forbidden response
func (o *AppendMinecraftToBuildForbidden) Code() int {
	return 403
}

func (o *AppendMinecraftToBuildForbidden) Error() string {
	return fmt.Sprintf("[POST /minecraft/{minecraft_id}/builds][%d] appendMinecraftToBuildForbidden  %+v", 403, o.Payload)
}

func (o *AppendMinecraftToBuildForbidden) String() string {
	return fmt.Sprintf("[POST /minecraft/{minecraft_id}/builds][%d] appendMinecraftToBuildForbidden  %+v", 403, o.Payload)
}

func (o *AppendMinecraftToBuildForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendMinecraftToBuildForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendMinecraftToBuildNotFound creates a AppendMinecraftToBuildNotFound with default headers values
func NewAppendMinecraftToBuildNotFound() *AppendMinecraftToBuildNotFound {
	return &AppendMinecraftToBuildNotFound{}
}

/*
AppendMinecraftToBuildNotFound describes a response with status code 404, with default header values.

Minecraft or build not found
*/
type AppendMinecraftToBuildNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append minecraft to build not found response has a 2xx status code
func (o *AppendMinecraftToBuildNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append minecraft to build not found response has a 3xx status code
func (o *AppendMinecraftToBuildNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append minecraft to build not found response has a 4xx status code
func (o *AppendMinecraftToBuildNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this append minecraft to build not found response has a 5xx status code
func (o *AppendMinecraftToBuildNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this append minecraft to build not found response a status code equal to that given
func (o *AppendMinecraftToBuildNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the append minecraft to build not found response
func (o *AppendMinecraftToBuildNotFound) Code() int {
	return 404
}

func (o *AppendMinecraftToBuildNotFound) Error() string {
	return fmt.Sprintf("[POST /minecraft/{minecraft_id}/builds][%d] appendMinecraftToBuildNotFound  %+v", 404, o.Payload)
}

func (o *AppendMinecraftToBuildNotFound) String() string {
	return fmt.Sprintf("[POST /minecraft/{minecraft_id}/builds][%d] appendMinecraftToBuildNotFound  %+v", 404, o.Payload)
}

func (o *AppendMinecraftToBuildNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendMinecraftToBuildNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendMinecraftToBuildNotAcceptable creates a AppendMinecraftToBuildNotAcceptable with default headers values
func NewAppendMinecraftToBuildNotAcceptable() *AppendMinecraftToBuildNotAcceptable {
	return &AppendMinecraftToBuildNotAcceptable{}
}

/*
AppendMinecraftToBuildNotAcceptable describes a response with status code 406, with default header values.

Failed to update build
*/
type AppendMinecraftToBuildNotAcceptable struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append minecraft to build not acceptable response has a 2xx status code
func (o *AppendMinecraftToBuildNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append minecraft to build not acceptable response has a 3xx status code
func (o *AppendMinecraftToBuildNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append minecraft to build not acceptable response has a 4xx status code
func (o *AppendMinecraftToBuildNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this append minecraft to build not acceptable response has a 5xx status code
func (o *AppendMinecraftToBuildNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this append minecraft to build not acceptable response a status code equal to that given
func (o *AppendMinecraftToBuildNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the append minecraft to build not acceptable response
func (o *AppendMinecraftToBuildNotAcceptable) Code() int {
	return 406
}

func (o *AppendMinecraftToBuildNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /minecraft/{minecraft_id}/builds][%d] appendMinecraftToBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *AppendMinecraftToBuildNotAcceptable) String() string {
	return fmt.Sprintf("[POST /minecraft/{minecraft_id}/builds][%d] appendMinecraftToBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *AppendMinecraftToBuildNotAcceptable) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendMinecraftToBuildNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendMinecraftToBuildPreconditionFailed creates a AppendMinecraftToBuildPreconditionFailed with default headers values
func NewAppendMinecraftToBuildPreconditionFailed() *AppendMinecraftToBuildPreconditionFailed {
	return &AppendMinecraftToBuildPreconditionFailed{}
}

/*
AppendMinecraftToBuildPreconditionFailed describes a response with status code 412, with default header values.

Build is already assigned
*/
type AppendMinecraftToBuildPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append minecraft to build precondition failed response has a 2xx status code
func (o *AppendMinecraftToBuildPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append minecraft to build precondition failed response has a 3xx status code
func (o *AppendMinecraftToBuildPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append minecraft to build precondition failed response has a 4xx status code
func (o *AppendMinecraftToBuildPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this append minecraft to build precondition failed response has a 5xx status code
func (o *AppendMinecraftToBuildPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this append minecraft to build precondition failed response a status code equal to that given
func (o *AppendMinecraftToBuildPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the append minecraft to build precondition failed response
func (o *AppendMinecraftToBuildPreconditionFailed) Code() int {
	return 412
}

func (o *AppendMinecraftToBuildPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /minecraft/{minecraft_id}/builds][%d] appendMinecraftToBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AppendMinecraftToBuildPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /minecraft/{minecraft_id}/builds][%d] appendMinecraftToBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AppendMinecraftToBuildPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendMinecraftToBuildPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendMinecraftToBuildDefault creates a AppendMinecraftToBuildDefault with default headers values
func NewAppendMinecraftToBuildDefault(code int) *AppendMinecraftToBuildDefault {
	return &AppendMinecraftToBuildDefault{
		_statusCode: code,
	}
}

/*
AppendMinecraftToBuildDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type AppendMinecraftToBuildDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this append minecraft to build default response has a 2xx status code
func (o *AppendMinecraftToBuildDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this append minecraft to build default response has a 3xx status code
func (o *AppendMinecraftToBuildDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this append minecraft to build default response has a 4xx status code
func (o *AppendMinecraftToBuildDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this append minecraft to build default response has a 5xx status code
func (o *AppendMinecraftToBuildDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this append minecraft to build default response a status code equal to that given
func (o *AppendMinecraftToBuildDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the append minecraft to build default response
func (o *AppendMinecraftToBuildDefault) Code() int {
	return o._statusCode
}

func (o *AppendMinecraftToBuildDefault) Error() string {
	return fmt.Sprintf("[POST /minecraft/{minecraft_id}/builds][%d] AppendMinecraftToBuild default  %+v", o._statusCode, o.Payload)
}

func (o *AppendMinecraftToBuildDefault) String() string {
	return fmt.Sprintf("[POST /minecraft/{minecraft_id}/builds][%d] AppendMinecraftToBuild default  %+v", o._statusCode, o.Payload)
}

func (o *AppendMinecraftToBuildDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendMinecraftToBuildDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
