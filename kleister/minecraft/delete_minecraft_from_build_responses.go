// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// DeleteMinecraftFromBuildReader is a Reader for the DeleteMinecraftFromBuild structure.
type DeleteMinecraftFromBuildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteMinecraftFromBuildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteMinecraftFromBuildOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteMinecraftFromBuildForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteMinecraftFromBuildNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewDeleteMinecraftFromBuildNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteMinecraftFromBuildPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteMinecraftFromBuildDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteMinecraftFromBuildOK creates a DeleteMinecraftFromBuildOK with default headers values
func NewDeleteMinecraftFromBuildOK() *DeleteMinecraftFromBuildOK {
	return &DeleteMinecraftFromBuildOK{}
}

/*
DeleteMinecraftFromBuildOK describes a response with status code 200, with default header values.

Plain success message
*/
type DeleteMinecraftFromBuildOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete minecraft from build o k response has a 2xx status code
func (o *DeleteMinecraftFromBuildOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete minecraft from build o k response has a 3xx status code
func (o *DeleteMinecraftFromBuildOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete minecraft from build o k response has a 4xx status code
func (o *DeleteMinecraftFromBuildOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete minecraft from build o k response has a 5xx status code
func (o *DeleteMinecraftFromBuildOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete minecraft from build o k response a status code equal to that given
func (o *DeleteMinecraftFromBuildOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete minecraft from build o k response
func (o *DeleteMinecraftFromBuildOK) Code() int {
	return 200
}

func (o *DeleteMinecraftFromBuildOK) Error() string {
	return fmt.Sprintf("[DELETE /minecraft/{minecraft_id}/builds][%d] deleteMinecraftFromBuildOK  %+v", 200, o.Payload)
}

func (o *DeleteMinecraftFromBuildOK) String() string {
	return fmt.Sprintf("[DELETE /minecraft/{minecraft_id}/builds][%d] deleteMinecraftFromBuildOK  %+v", 200, o.Payload)
}

func (o *DeleteMinecraftFromBuildOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteMinecraftFromBuildOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMinecraftFromBuildForbidden creates a DeleteMinecraftFromBuildForbidden with default headers values
func NewDeleteMinecraftFromBuildForbidden() *DeleteMinecraftFromBuildForbidden {
	return &DeleteMinecraftFromBuildForbidden{}
}

/*
DeleteMinecraftFromBuildForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type DeleteMinecraftFromBuildForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete minecraft from build forbidden response has a 2xx status code
func (o *DeleteMinecraftFromBuildForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete minecraft from build forbidden response has a 3xx status code
func (o *DeleteMinecraftFromBuildForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete minecraft from build forbidden response has a 4xx status code
func (o *DeleteMinecraftFromBuildForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete minecraft from build forbidden response has a 5xx status code
func (o *DeleteMinecraftFromBuildForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete minecraft from build forbidden response a status code equal to that given
func (o *DeleteMinecraftFromBuildForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete minecraft from build forbidden response
func (o *DeleteMinecraftFromBuildForbidden) Code() int {
	return 403
}

func (o *DeleteMinecraftFromBuildForbidden) Error() string {
	return fmt.Sprintf("[DELETE /minecraft/{minecraft_id}/builds][%d] deleteMinecraftFromBuildForbidden  %+v", 403, o.Payload)
}

func (o *DeleteMinecraftFromBuildForbidden) String() string {
	return fmt.Sprintf("[DELETE /minecraft/{minecraft_id}/builds][%d] deleteMinecraftFromBuildForbidden  %+v", 403, o.Payload)
}

func (o *DeleteMinecraftFromBuildForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteMinecraftFromBuildForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMinecraftFromBuildNotFound creates a DeleteMinecraftFromBuildNotFound with default headers values
func NewDeleteMinecraftFromBuildNotFound() *DeleteMinecraftFromBuildNotFound {
	return &DeleteMinecraftFromBuildNotFound{}
}

/*
DeleteMinecraftFromBuildNotFound describes a response with status code 404, with default header values.

Minecraft or build not found
*/
type DeleteMinecraftFromBuildNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete minecraft from build not found response has a 2xx status code
func (o *DeleteMinecraftFromBuildNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete minecraft from build not found response has a 3xx status code
func (o *DeleteMinecraftFromBuildNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete minecraft from build not found response has a 4xx status code
func (o *DeleteMinecraftFromBuildNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete minecraft from build not found response has a 5xx status code
func (o *DeleteMinecraftFromBuildNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete minecraft from build not found response a status code equal to that given
func (o *DeleteMinecraftFromBuildNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete minecraft from build not found response
func (o *DeleteMinecraftFromBuildNotFound) Code() int {
	return 404
}

func (o *DeleteMinecraftFromBuildNotFound) Error() string {
	return fmt.Sprintf("[DELETE /minecraft/{minecraft_id}/builds][%d] deleteMinecraftFromBuildNotFound  %+v", 404, o.Payload)
}

func (o *DeleteMinecraftFromBuildNotFound) String() string {
	return fmt.Sprintf("[DELETE /minecraft/{minecraft_id}/builds][%d] deleteMinecraftFromBuildNotFound  %+v", 404, o.Payload)
}

func (o *DeleteMinecraftFromBuildNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteMinecraftFromBuildNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMinecraftFromBuildNotAcceptable creates a DeleteMinecraftFromBuildNotAcceptable with default headers values
func NewDeleteMinecraftFromBuildNotAcceptable() *DeleteMinecraftFromBuildNotAcceptable {
	return &DeleteMinecraftFromBuildNotAcceptable{}
}

/*
DeleteMinecraftFromBuildNotAcceptable describes a response with status code 406, with default header values.

Failed to update build
*/
type DeleteMinecraftFromBuildNotAcceptable struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete minecraft from build not acceptable response has a 2xx status code
func (o *DeleteMinecraftFromBuildNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete minecraft from build not acceptable response has a 3xx status code
func (o *DeleteMinecraftFromBuildNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete minecraft from build not acceptable response has a 4xx status code
func (o *DeleteMinecraftFromBuildNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete minecraft from build not acceptable response has a 5xx status code
func (o *DeleteMinecraftFromBuildNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this delete minecraft from build not acceptable response a status code equal to that given
func (o *DeleteMinecraftFromBuildNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the delete minecraft from build not acceptable response
func (o *DeleteMinecraftFromBuildNotAcceptable) Code() int {
	return 406
}

func (o *DeleteMinecraftFromBuildNotAcceptable) Error() string {
	return fmt.Sprintf("[DELETE /minecraft/{minecraft_id}/builds][%d] deleteMinecraftFromBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *DeleteMinecraftFromBuildNotAcceptable) String() string {
	return fmt.Sprintf("[DELETE /minecraft/{minecraft_id}/builds][%d] deleteMinecraftFromBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *DeleteMinecraftFromBuildNotAcceptable) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteMinecraftFromBuildNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMinecraftFromBuildPreconditionFailed creates a DeleteMinecraftFromBuildPreconditionFailed with default headers values
func NewDeleteMinecraftFromBuildPreconditionFailed() *DeleteMinecraftFromBuildPreconditionFailed {
	return &DeleteMinecraftFromBuildPreconditionFailed{}
}

/*
DeleteMinecraftFromBuildPreconditionFailed describes a response with status code 412, with default header values.

Build is not assigned
*/
type DeleteMinecraftFromBuildPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete minecraft from build precondition failed response has a 2xx status code
func (o *DeleteMinecraftFromBuildPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete minecraft from build precondition failed response has a 3xx status code
func (o *DeleteMinecraftFromBuildPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete minecraft from build precondition failed response has a 4xx status code
func (o *DeleteMinecraftFromBuildPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete minecraft from build precondition failed response has a 5xx status code
func (o *DeleteMinecraftFromBuildPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete minecraft from build precondition failed response a status code equal to that given
func (o *DeleteMinecraftFromBuildPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete minecraft from build precondition failed response
func (o *DeleteMinecraftFromBuildPreconditionFailed) Code() int {
	return 412
}

func (o *DeleteMinecraftFromBuildPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /minecraft/{minecraft_id}/builds][%d] deleteMinecraftFromBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteMinecraftFromBuildPreconditionFailed) String() string {
	return fmt.Sprintf("[DELETE /minecraft/{minecraft_id}/builds][%d] deleteMinecraftFromBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteMinecraftFromBuildPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteMinecraftFromBuildPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMinecraftFromBuildDefault creates a DeleteMinecraftFromBuildDefault with default headers values
func NewDeleteMinecraftFromBuildDefault(code int) *DeleteMinecraftFromBuildDefault {
	return &DeleteMinecraftFromBuildDefault{
		_statusCode: code,
	}
}

/*
DeleteMinecraftFromBuildDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type DeleteMinecraftFromBuildDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this delete minecraft from build default response has a 2xx status code
func (o *DeleteMinecraftFromBuildDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete minecraft from build default response has a 3xx status code
func (o *DeleteMinecraftFromBuildDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete minecraft from build default response has a 4xx status code
func (o *DeleteMinecraftFromBuildDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete minecraft from build default response has a 5xx status code
func (o *DeleteMinecraftFromBuildDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete minecraft from build default response a status code equal to that given
func (o *DeleteMinecraftFromBuildDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete minecraft from build default response
func (o *DeleteMinecraftFromBuildDefault) Code() int {
	return o._statusCode
}

func (o *DeleteMinecraftFromBuildDefault) Error() string {
	return fmt.Sprintf("[DELETE /minecraft/{minecraft_id}/builds][%d] DeleteMinecraftFromBuild default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteMinecraftFromBuildDefault) String() string {
	return fmt.Sprintf("[DELETE /minecraft/{minecraft_id}/builds][%d] DeleteMinecraftFromBuild default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteMinecraftFromBuildDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteMinecraftFromBuildDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
