// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// SearchMinecraftsReader is a Reader for the SearchMinecrafts structure.
type SearchMinecraftsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchMinecraftsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchMinecraftsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewSearchMinecraftsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewSearchMinecraftsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSearchMinecraftsOK creates a SearchMinecraftsOK with default headers values
func NewSearchMinecraftsOK() *SearchMinecraftsOK {
	return &SearchMinecraftsOK{}
}

/* SearchMinecraftsOK describes a response with status code 200, with default header values.

A collection of Minecraft versions
*/
type SearchMinecraftsOK struct {
	Payload []*models.Minecraft
}

func (o *SearchMinecraftsOK) Error() string {
	return fmt.Sprintf("[GET /minecraft/{minecraft_id}][%d] searchMinecraftsOK  %+v", 200, o.Payload)
}
func (o *SearchMinecraftsOK) GetPayload() []*models.Minecraft {
	return o.Payload
}

func (o *SearchMinecraftsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchMinecraftsForbidden creates a SearchMinecraftsForbidden with default headers values
func NewSearchMinecraftsForbidden() *SearchMinecraftsForbidden {
	return &SearchMinecraftsForbidden{}
}

/* SearchMinecraftsForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type SearchMinecraftsForbidden struct {
	Payload *models.GeneralError
}

func (o *SearchMinecraftsForbidden) Error() string {
	return fmt.Sprintf("[GET /minecraft/{minecraft_id}][%d] searchMinecraftsForbidden  %+v", 403, o.Payload)
}
func (o *SearchMinecraftsForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *SearchMinecraftsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchMinecraftsDefault creates a SearchMinecraftsDefault with default headers values
func NewSearchMinecraftsDefault(code int) *SearchMinecraftsDefault {
	return &SearchMinecraftsDefault{
		_statusCode: code,
	}
}

/* SearchMinecraftsDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type SearchMinecraftsDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the search minecrafts default response
func (o *SearchMinecraftsDefault) Code() int {
	return o._statusCode
}

func (o *SearchMinecraftsDefault) Error() string {
	return fmt.Sprintf("[GET /minecraft/{minecraft_id}][%d] SearchMinecrafts default  %+v", o._statusCode, o.Payload)
}
func (o *SearchMinecraftsDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *SearchMinecraftsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
