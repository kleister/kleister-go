// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new minecraft API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for minecraft API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AppendMinecraftToBuild assigns a build to a minecraft version
*/
func (a *Client) AppendMinecraftToBuild(params *AppendMinecraftToBuildParams) (*AppendMinecraftToBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendMinecraftToBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AppendMinecraftToBuild",
		Method:             "POST",
		PathPattern:        "/minecraft/{minecraft_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppendMinecraftToBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AppendMinecraftToBuildOK), nil

}

/*
DeleteMinecraftFromBuild unlinks a build from a minecraft version
*/
func (a *Client) DeleteMinecraftFromBuild(params *DeleteMinecraftFromBuildParams) (*DeleteMinecraftFromBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMinecraftFromBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMinecraftFromBuild",
		Method:             "DELETE",
		PathPattern:        "/minecraft/{minecraft_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMinecraftFromBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMinecraftFromBuildOK), nil

}

/*
ListMinecraftBuilds fetches the builds assigned to a minecraft version
*/
func (a *Client) ListMinecraftBuilds(params *ListMinecraftBuildsParams) (*ListMinecraftBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMinecraftBuildsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListMinecraftBuilds",
		Method:             "GET",
		PathPattern:        "/minecraft/{minecraft_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListMinecraftBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListMinecraftBuildsOK), nil

}

/*
ListMinecrafts fetches the available minecraft versions
*/
func (a *Client) ListMinecrafts(params *ListMinecraftsParams) (*ListMinecraftsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMinecraftsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListMinecrafts",
		Method:             "GET",
		PathPattern:        "/minecraft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListMinecraftsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListMinecraftsOK), nil

}

/*
SearchMinecrafts searches for available minecraft versions
*/
func (a *Client) SearchMinecrafts(params *SearchMinecraftsParams) (*SearchMinecraftsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMinecraftsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchMinecrafts",
		Method:             "GET",
		PathPattern:        "/minecraft/{minecraft_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchMinecraftsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchMinecraftsOK), nil

}

/*
UpdateMinecraft updates the available minecraft versions
*/
func (a *Client) UpdateMinecraft(params *UpdateMinecraftParams) (*UpdateMinecraftOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMinecraftParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateMinecraft",
		Method:             "PUT",
		PathPattern:        "/minecraft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMinecraftReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMinecraftOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
