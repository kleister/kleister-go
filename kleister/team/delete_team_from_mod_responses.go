// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kleister/kleister-go/models"
)

// DeleteTeamFromModReader is a Reader for the DeleteTeamFromMod structure.
type DeleteTeamFromModReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTeamFromModReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteTeamFromModOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewDeleteTeamFromModForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteTeamFromModPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewDeleteTeamFromModUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteTeamFromModDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteTeamFromModOK creates a DeleteTeamFromModOK with default headers values
func NewDeleteTeamFromModOK() *DeleteTeamFromModOK {
	return &DeleteTeamFromModOK{}
}

/*DeleteTeamFromModOK handles this case with default header values.

Plain success message
*/
type DeleteTeamFromModOK struct {
	Payload *models.GeneralError
}

func (o *DeleteTeamFromModOK) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] deleteTeamFromModOK  %+v", 200, o.Payload)
}

func (o *DeleteTeamFromModOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamFromModForbidden creates a DeleteTeamFromModForbidden with default headers values
func NewDeleteTeamFromModForbidden() *DeleteTeamFromModForbidden {
	return &DeleteTeamFromModForbidden{}
}

/*DeleteTeamFromModForbidden handles this case with default header values.

User is not authorized
*/
type DeleteTeamFromModForbidden struct {
	Payload *models.GeneralError
}

func (o *DeleteTeamFromModForbidden) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] deleteTeamFromModForbidden  %+v", 403, o.Payload)
}

func (o *DeleteTeamFromModForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamFromModPreconditionFailed creates a DeleteTeamFromModPreconditionFailed with default headers values
func NewDeleteTeamFromModPreconditionFailed() *DeleteTeamFromModPreconditionFailed {
	return &DeleteTeamFromModPreconditionFailed{}
}

/*DeleteTeamFromModPreconditionFailed handles this case with default header values.

Failed to parse request body
*/
type DeleteTeamFromModPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *DeleteTeamFromModPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] deleteTeamFromModPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteTeamFromModPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamFromModUnprocessableEntity creates a DeleteTeamFromModUnprocessableEntity with default headers values
func NewDeleteTeamFromModUnprocessableEntity() *DeleteTeamFromModUnprocessableEntity {
	return &DeleteTeamFromModUnprocessableEntity{}
}

/*DeleteTeamFromModUnprocessableEntity handles this case with default header values.

Mod is not assigned
*/
type DeleteTeamFromModUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *DeleteTeamFromModUnprocessableEntity) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] deleteTeamFromModUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *DeleteTeamFromModUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamFromModDefault creates a DeleteTeamFromModDefault with default headers values
func NewDeleteTeamFromModDefault(code int) *DeleteTeamFromModDefault {
	return &DeleteTeamFromModDefault{
		_statusCode: code,
	}
}

/*DeleteTeamFromModDefault handles this case with default header values.

Some error unrelated to the handler
*/
type DeleteTeamFromModDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the delete team from mod default response
func (o *DeleteTeamFromModDefault) Code() int {
	return o._statusCode
}

func (o *DeleteTeamFromModDefault) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] DeleteTeamFromMod default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteTeamFromModDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
