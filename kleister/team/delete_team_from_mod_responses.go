// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// DeleteTeamFromModReader is a Reader for the DeleteTeamFromMod structure.
type DeleteTeamFromModReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTeamFromModReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteTeamFromModOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteTeamFromModForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteTeamFromModNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteTeamFromModPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteTeamFromModDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteTeamFromModOK creates a DeleteTeamFromModOK with default headers values
func NewDeleteTeamFromModOK() *DeleteTeamFromModOK {
	return &DeleteTeamFromModOK{}
}

/*
DeleteTeamFromModOK describes a response with status code 200, with default header values.

Plain success message
*/
type DeleteTeamFromModOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete team from mod o k response has a 2xx status code
func (o *DeleteTeamFromModOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete team from mod o k response has a 3xx status code
func (o *DeleteTeamFromModOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete team from mod o k response has a 4xx status code
func (o *DeleteTeamFromModOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete team from mod o k response has a 5xx status code
func (o *DeleteTeamFromModOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete team from mod o k response a status code equal to that given
func (o *DeleteTeamFromModOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete team from mod o k response
func (o *DeleteTeamFromModOK) Code() int {
	return 200
}

func (o *DeleteTeamFromModOK) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] deleteTeamFromModOK  %+v", 200, o.Payload)
}

func (o *DeleteTeamFromModOK) String() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] deleteTeamFromModOK  %+v", 200, o.Payload)
}

func (o *DeleteTeamFromModOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteTeamFromModOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamFromModForbidden creates a DeleteTeamFromModForbidden with default headers values
func NewDeleteTeamFromModForbidden() *DeleteTeamFromModForbidden {
	return &DeleteTeamFromModForbidden{}
}

/*
DeleteTeamFromModForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type DeleteTeamFromModForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete team from mod forbidden response has a 2xx status code
func (o *DeleteTeamFromModForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete team from mod forbidden response has a 3xx status code
func (o *DeleteTeamFromModForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete team from mod forbidden response has a 4xx status code
func (o *DeleteTeamFromModForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete team from mod forbidden response has a 5xx status code
func (o *DeleteTeamFromModForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete team from mod forbidden response a status code equal to that given
func (o *DeleteTeamFromModForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete team from mod forbidden response
func (o *DeleteTeamFromModForbidden) Code() int {
	return 403
}

func (o *DeleteTeamFromModForbidden) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] deleteTeamFromModForbidden  %+v", 403, o.Payload)
}

func (o *DeleteTeamFromModForbidden) String() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] deleteTeamFromModForbidden  %+v", 403, o.Payload)
}

func (o *DeleteTeamFromModForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteTeamFromModForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamFromModNotFound creates a DeleteTeamFromModNotFound with default headers values
func NewDeleteTeamFromModNotFound() *DeleteTeamFromModNotFound {
	return &DeleteTeamFromModNotFound{}
}

/*
DeleteTeamFromModNotFound describes a response with status code 404, with default header values.

Team or mod not found
*/
type DeleteTeamFromModNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete team from mod not found response has a 2xx status code
func (o *DeleteTeamFromModNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete team from mod not found response has a 3xx status code
func (o *DeleteTeamFromModNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete team from mod not found response has a 4xx status code
func (o *DeleteTeamFromModNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete team from mod not found response has a 5xx status code
func (o *DeleteTeamFromModNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete team from mod not found response a status code equal to that given
func (o *DeleteTeamFromModNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete team from mod not found response
func (o *DeleteTeamFromModNotFound) Code() int {
	return 404
}

func (o *DeleteTeamFromModNotFound) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] deleteTeamFromModNotFound  %+v", 404, o.Payload)
}

func (o *DeleteTeamFromModNotFound) String() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] deleteTeamFromModNotFound  %+v", 404, o.Payload)
}

func (o *DeleteTeamFromModNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteTeamFromModNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamFromModPreconditionFailed creates a DeleteTeamFromModPreconditionFailed with default headers values
func NewDeleteTeamFromModPreconditionFailed() *DeleteTeamFromModPreconditionFailed {
	return &DeleteTeamFromModPreconditionFailed{}
}

/*
DeleteTeamFromModPreconditionFailed describes a response with status code 412, with default header values.

Mod is not attached
*/
type DeleteTeamFromModPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete team from mod precondition failed response has a 2xx status code
func (o *DeleteTeamFromModPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete team from mod precondition failed response has a 3xx status code
func (o *DeleteTeamFromModPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete team from mod precondition failed response has a 4xx status code
func (o *DeleteTeamFromModPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete team from mod precondition failed response has a 5xx status code
func (o *DeleteTeamFromModPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete team from mod precondition failed response a status code equal to that given
func (o *DeleteTeamFromModPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete team from mod precondition failed response
func (o *DeleteTeamFromModPreconditionFailed) Code() int {
	return 412
}

func (o *DeleteTeamFromModPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] deleteTeamFromModPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteTeamFromModPreconditionFailed) String() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] deleteTeamFromModPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteTeamFromModPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteTeamFromModPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamFromModDefault creates a DeleteTeamFromModDefault with default headers values
func NewDeleteTeamFromModDefault(code int) *DeleteTeamFromModDefault {
	return &DeleteTeamFromModDefault{
		_statusCode: code,
	}
}

/*
DeleteTeamFromModDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type DeleteTeamFromModDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this delete team from mod default response has a 2xx status code
func (o *DeleteTeamFromModDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete team from mod default response has a 3xx status code
func (o *DeleteTeamFromModDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete team from mod default response has a 4xx status code
func (o *DeleteTeamFromModDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete team from mod default response has a 5xx status code
func (o *DeleteTeamFromModDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete team from mod default response a status code equal to that given
func (o *DeleteTeamFromModDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete team from mod default response
func (o *DeleteTeamFromModDefault) Code() int {
	return o._statusCode
}

func (o *DeleteTeamFromModDefault) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] DeleteTeamFromMod default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteTeamFromModDefault) String() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/mods][%d] DeleteTeamFromMod default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteTeamFromModDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteTeamFromModDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
