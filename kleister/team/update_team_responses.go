// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// UpdateTeamReader is a Reader for the UpdateTeam structure.
type UpdateTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateTeamUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateTeamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateTeamOK creates a UpdateTeamOK with default headers values
func NewUpdateTeamOK() *UpdateTeamOK {
	return &UpdateTeamOK{}
}

/*
UpdateTeamOK describes a response with status code 200, with default header values.

The updated team details
*/
type UpdateTeamOK struct {
	Payload *models.Team
}

// IsSuccess returns true when this update team o k response has a 2xx status code
func (o *UpdateTeamOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update team o k response has a 3xx status code
func (o *UpdateTeamOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team o k response has a 4xx status code
func (o *UpdateTeamOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update team o k response has a 5xx status code
func (o *UpdateTeamOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update team o k response a status code equal to that given
func (o *UpdateTeamOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update team o k response
func (o *UpdateTeamOK) Code() int {
	return 200
}

func (o *UpdateTeamOK) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}][%d] updateTeamOK  %+v", 200, o.Payload)
}

func (o *UpdateTeamOK) String() string {
	return fmt.Sprintf("[PUT /teams/{team_id}][%d] updateTeamOK  %+v", 200, o.Payload)
}

func (o *UpdateTeamOK) GetPayload() *models.Team {
	return o.Payload
}

func (o *UpdateTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Team)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamForbidden creates a UpdateTeamForbidden with default headers values
func NewUpdateTeamForbidden() *UpdateTeamForbidden {
	return &UpdateTeamForbidden{}
}

/*
UpdateTeamForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type UpdateTeamForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this update team forbidden response has a 2xx status code
func (o *UpdateTeamForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update team forbidden response has a 3xx status code
func (o *UpdateTeamForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team forbidden response has a 4xx status code
func (o *UpdateTeamForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update team forbidden response has a 5xx status code
func (o *UpdateTeamForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update team forbidden response a status code equal to that given
func (o *UpdateTeamForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update team forbidden response
func (o *UpdateTeamForbidden) Code() int {
	return 403
}

func (o *UpdateTeamForbidden) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}][%d] updateTeamForbidden  %+v", 403, o.Payload)
}

func (o *UpdateTeamForbidden) String() string {
	return fmt.Sprintf("[PUT /teams/{team_id}][%d] updateTeamForbidden  %+v", 403, o.Payload)
}

func (o *UpdateTeamForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamNotFound creates a UpdateTeamNotFound with default headers values
func NewUpdateTeamNotFound() *UpdateTeamNotFound {
	return &UpdateTeamNotFound{}
}

/*
UpdateTeamNotFound describes a response with status code 404, with default header values.

Team not found
*/
type UpdateTeamNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this update team not found response has a 2xx status code
func (o *UpdateTeamNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update team not found response has a 3xx status code
func (o *UpdateTeamNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team not found response has a 4xx status code
func (o *UpdateTeamNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update team not found response has a 5xx status code
func (o *UpdateTeamNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update team not found response a status code equal to that given
func (o *UpdateTeamNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update team not found response
func (o *UpdateTeamNotFound) Code() int {
	return 404
}

func (o *UpdateTeamNotFound) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}][%d] updateTeamNotFound  %+v", 404, o.Payload)
}

func (o *UpdateTeamNotFound) String() string {
	return fmt.Sprintf("[PUT /teams/{team_id}][%d] updateTeamNotFound  %+v", 404, o.Payload)
}

func (o *UpdateTeamNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamUnprocessableEntity creates a UpdateTeamUnprocessableEntity with default headers values
func NewUpdateTeamUnprocessableEntity() *UpdateTeamUnprocessableEntity {
	return &UpdateTeamUnprocessableEntity{}
}

/*
UpdateTeamUnprocessableEntity describes a response with status code 422, with default header values.

Failed to validate request
*/
type UpdateTeamUnprocessableEntity struct {
	Payload *models.ValidationError
}

// IsSuccess returns true when this update team unprocessable entity response has a 2xx status code
func (o *UpdateTeamUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update team unprocessable entity response has a 3xx status code
func (o *UpdateTeamUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team unprocessable entity response has a 4xx status code
func (o *UpdateTeamUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update team unprocessable entity response has a 5xx status code
func (o *UpdateTeamUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update team unprocessable entity response a status code equal to that given
func (o *UpdateTeamUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update team unprocessable entity response
func (o *UpdateTeamUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateTeamUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}][%d] updateTeamUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateTeamUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /teams/{team_id}][%d] updateTeamUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateTeamUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *UpdateTeamUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamDefault creates a UpdateTeamDefault with default headers values
func NewUpdateTeamDefault(code int) *UpdateTeamDefault {
	return &UpdateTeamDefault{
		_statusCode: code,
	}
}

/*
UpdateTeamDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type UpdateTeamDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this update team default response has a 2xx status code
func (o *UpdateTeamDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update team default response has a 3xx status code
func (o *UpdateTeamDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update team default response has a 4xx status code
func (o *UpdateTeamDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update team default response has a 5xx status code
func (o *UpdateTeamDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update team default response a status code equal to that given
func (o *UpdateTeamDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update team default response
func (o *UpdateTeamDefault) Code() int {
	return o._statusCode
}

func (o *UpdateTeamDefault) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}][%d] UpdateTeam default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateTeamDefault) String() string {
	return fmt.Sprintf("[PUT /teams/{team_id}][%d] UpdateTeam default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateTeamDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateTeamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
