// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// AttachTeamToUserReader is a Reader for the AttachTeamToUser structure.
type AttachTeamToUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AttachTeamToUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAttachTeamToUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAttachTeamToUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAttachTeamToUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewAttachTeamToUserPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAttachTeamToUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAttachTeamToUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAttachTeamToUserOK creates a AttachTeamToUserOK with default headers values
func NewAttachTeamToUserOK() *AttachTeamToUserOK {
	return &AttachTeamToUserOK{}
}

/*
AttachTeamToUserOK describes a response with status code 200, with default header values.

Plain success message
*/
type AttachTeamToUserOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach team to user o k response has a 2xx status code
func (o *AttachTeamToUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this attach team to user o k response has a 3xx status code
func (o *AttachTeamToUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach team to user o k response has a 4xx status code
func (o *AttachTeamToUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this attach team to user o k response has a 5xx status code
func (o *AttachTeamToUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this attach team to user o k response a status code equal to that given
func (o *AttachTeamToUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the attach team to user o k response
func (o *AttachTeamToUserOK) Code() int {
	return 200
}

func (o *AttachTeamToUserOK) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] attachTeamToUserOK  %+v", 200, o.Payload)
}

func (o *AttachTeamToUserOK) String() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] attachTeamToUserOK  %+v", 200, o.Payload)
}

func (o *AttachTeamToUserOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachTeamToUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachTeamToUserForbidden creates a AttachTeamToUserForbidden with default headers values
func NewAttachTeamToUserForbidden() *AttachTeamToUserForbidden {
	return &AttachTeamToUserForbidden{}
}

/*
AttachTeamToUserForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type AttachTeamToUserForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach team to user forbidden response has a 2xx status code
func (o *AttachTeamToUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach team to user forbidden response has a 3xx status code
func (o *AttachTeamToUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach team to user forbidden response has a 4xx status code
func (o *AttachTeamToUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach team to user forbidden response has a 5xx status code
func (o *AttachTeamToUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this attach team to user forbidden response a status code equal to that given
func (o *AttachTeamToUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the attach team to user forbidden response
func (o *AttachTeamToUserForbidden) Code() int {
	return 403
}

func (o *AttachTeamToUserForbidden) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] attachTeamToUserForbidden  %+v", 403, o.Payload)
}

func (o *AttachTeamToUserForbidden) String() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] attachTeamToUserForbidden  %+v", 403, o.Payload)
}

func (o *AttachTeamToUserForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachTeamToUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachTeamToUserNotFound creates a AttachTeamToUserNotFound with default headers values
func NewAttachTeamToUserNotFound() *AttachTeamToUserNotFound {
	return &AttachTeamToUserNotFound{}
}

/*
AttachTeamToUserNotFound describes a response with status code 404, with default header values.

Team or user not found
*/
type AttachTeamToUserNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach team to user not found response has a 2xx status code
func (o *AttachTeamToUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach team to user not found response has a 3xx status code
func (o *AttachTeamToUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach team to user not found response has a 4xx status code
func (o *AttachTeamToUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach team to user not found response has a 5xx status code
func (o *AttachTeamToUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this attach team to user not found response a status code equal to that given
func (o *AttachTeamToUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the attach team to user not found response
func (o *AttachTeamToUserNotFound) Code() int {
	return 404
}

func (o *AttachTeamToUserNotFound) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] attachTeamToUserNotFound  %+v", 404, o.Payload)
}

func (o *AttachTeamToUserNotFound) String() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] attachTeamToUserNotFound  %+v", 404, o.Payload)
}

func (o *AttachTeamToUserNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachTeamToUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachTeamToUserPreconditionFailed creates a AttachTeamToUserPreconditionFailed with default headers values
func NewAttachTeamToUserPreconditionFailed() *AttachTeamToUserPreconditionFailed {
	return &AttachTeamToUserPreconditionFailed{}
}

/*
AttachTeamToUserPreconditionFailed describes a response with status code 412, with default header values.

User is already attached
*/
type AttachTeamToUserPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach team to user precondition failed response has a 2xx status code
func (o *AttachTeamToUserPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach team to user precondition failed response has a 3xx status code
func (o *AttachTeamToUserPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach team to user precondition failed response has a 4xx status code
func (o *AttachTeamToUserPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach team to user precondition failed response has a 5xx status code
func (o *AttachTeamToUserPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this attach team to user precondition failed response a status code equal to that given
func (o *AttachTeamToUserPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the attach team to user precondition failed response
func (o *AttachTeamToUserPreconditionFailed) Code() int {
	return 412
}

func (o *AttachTeamToUserPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] attachTeamToUserPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AttachTeamToUserPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] attachTeamToUserPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AttachTeamToUserPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachTeamToUserPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachTeamToUserUnprocessableEntity creates a AttachTeamToUserUnprocessableEntity with default headers values
func NewAttachTeamToUserUnprocessableEntity() *AttachTeamToUserUnprocessableEntity {
	return &AttachTeamToUserUnprocessableEntity{}
}

/*
AttachTeamToUserUnprocessableEntity describes a response with status code 422, with default header values.

Failed to validate request
*/
type AttachTeamToUserUnprocessableEntity struct {
	Payload *models.ValidationError
}

// IsSuccess returns true when this attach team to user unprocessable entity response has a 2xx status code
func (o *AttachTeamToUserUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach team to user unprocessable entity response has a 3xx status code
func (o *AttachTeamToUserUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach team to user unprocessable entity response has a 4xx status code
func (o *AttachTeamToUserUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach team to user unprocessable entity response has a 5xx status code
func (o *AttachTeamToUserUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this attach team to user unprocessable entity response a status code equal to that given
func (o *AttachTeamToUserUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the attach team to user unprocessable entity response
func (o *AttachTeamToUserUnprocessableEntity) Code() int {
	return 422
}

func (o *AttachTeamToUserUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] attachTeamToUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AttachTeamToUserUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] attachTeamToUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AttachTeamToUserUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *AttachTeamToUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachTeamToUserDefault creates a AttachTeamToUserDefault with default headers values
func NewAttachTeamToUserDefault(code int) *AttachTeamToUserDefault {
	return &AttachTeamToUserDefault{
		_statusCode: code,
	}
}

/*
AttachTeamToUserDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type AttachTeamToUserDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this attach team to user default response has a 2xx status code
func (o *AttachTeamToUserDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this attach team to user default response has a 3xx status code
func (o *AttachTeamToUserDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this attach team to user default response has a 4xx status code
func (o *AttachTeamToUserDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this attach team to user default response has a 5xx status code
func (o *AttachTeamToUserDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this attach team to user default response a status code equal to that given
func (o *AttachTeamToUserDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the attach team to user default response
func (o *AttachTeamToUserDefault) Code() int {
	return o._statusCode
}

func (o *AttachTeamToUserDefault) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] AttachTeamToUser default  %+v", o._statusCode, o.Payload)
}

func (o *AttachTeamToUserDefault) String() string {
	return fmt.Sprintf("[POST /teams/{team_id}/users][%d] AttachTeamToUser default  %+v", o._statusCode, o.Payload)
}

func (o *AttachTeamToUserDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachTeamToUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
