// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kleister/kleister-go/models"
)

// AppendTeamToModReader is a Reader for the AppendTeamToMod structure.
type AppendTeamToModReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendTeamToModReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAppendTeamToModOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewAppendTeamToModForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewAppendTeamToModPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewAppendTeamToModUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAppendTeamToModDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppendTeamToModOK creates a AppendTeamToModOK with default headers values
func NewAppendTeamToModOK() *AppendTeamToModOK {
	return &AppendTeamToModOK{}
}

/*AppendTeamToModOK handles this case with default header values.

Plain success message
*/
type AppendTeamToModOK struct {
	Payload *models.GeneralError
}

func (o *AppendTeamToModOK) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/mods][%d] appendTeamToModOK  %+v", 200, o.Payload)
}

func (o *AppendTeamToModOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTeamToModForbidden creates a AppendTeamToModForbidden with default headers values
func NewAppendTeamToModForbidden() *AppendTeamToModForbidden {
	return &AppendTeamToModForbidden{}
}

/*AppendTeamToModForbidden handles this case with default header values.

User is not authorized
*/
type AppendTeamToModForbidden struct {
	Payload *models.GeneralError
}

func (o *AppendTeamToModForbidden) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/mods][%d] appendTeamToModForbidden  %+v", 403, o.Payload)
}

func (o *AppendTeamToModForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTeamToModPreconditionFailed creates a AppendTeamToModPreconditionFailed with default headers values
func NewAppendTeamToModPreconditionFailed() *AppendTeamToModPreconditionFailed {
	return &AppendTeamToModPreconditionFailed{}
}

/*AppendTeamToModPreconditionFailed handles this case with default header values.

Failed to parse request body
*/
type AppendTeamToModPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *AppendTeamToModPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/mods][%d] appendTeamToModPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AppendTeamToModPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTeamToModUnprocessableEntity creates a AppendTeamToModUnprocessableEntity with default headers values
func NewAppendTeamToModUnprocessableEntity() *AppendTeamToModUnprocessableEntity {
	return &AppendTeamToModUnprocessableEntity{}
}

/*AppendTeamToModUnprocessableEntity handles this case with default header values.

Mod is already assigned
*/
type AppendTeamToModUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *AppendTeamToModUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/mods][%d] appendTeamToModUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AppendTeamToModUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTeamToModDefault creates a AppendTeamToModDefault with default headers values
func NewAppendTeamToModDefault(code int) *AppendTeamToModDefault {
	return &AppendTeamToModDefault{
		_statusCode: code,
	}
}

/*AppendTeamToModDefault handles this case with default header values.

Some error unrelated to the handler
*/
type AppendTeamToModDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the append team to mod default response
func (o *AppendTeamToModDefault) Code() int {
	return o._statusCode
}

func (o *AppendTeamToModDefault) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/mods][%d] AppendTeamToMod default  %+v", o._statusCode, o.Payload)
}

func (o *AppendTeamToModDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
