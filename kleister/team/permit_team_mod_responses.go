// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// PermitTeamModReader is a Reader for the PermitTeamMod structure.
type PermitTeamModReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PermitTeamModReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPermitTeamModOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPermitTeamModForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPermitTeamModNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPermitTeamModPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPermitTeamModUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPermitTeamModDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPermitTeamModOK creates a PermitTeamModOK with default headers values
func NewPermitTeamModOK() *PermitTeamModOK {
	return &PermitTeamModOK{}
}

/*
PermitTeamModOK describes a response with status code 200, with default header values.

Plain success message
*/
type PermitTeamModOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit team mod o k response has a 2xx status code
func (o *PermitTeamModOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this permit team mod o k response has a 3xx status code
func (o *PermitTeamModOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit team mod o k response has a 4xx status code
func (o *PermitTeamModOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this permit team mod o k response has a 5xx status code
func (o *PermitTeamModOK) IsServerError() bool {
	return false
}

// IsCode returns true when this permit team mod o k response a status code equal to that given
func (o *PermitTeamModOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the permit team mod o k response
func (o *PermitTeamModOK) Code() int {
	return 200
}

func (o *PermitTeamModOK) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/mods][%d] permitTeamModOK  %+v", 200, o.Payload)
}

func (o *PermitTeamModOK) String() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/mods][%d] permitTeamModOK  %+v", 200, o.Payload)
}

func (o *PermitTeamModOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitTeamModOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitTeamModForbidden creates a PermitTeamModForbidden with default headers values
func NewPermitTeamModForbidden() *PermitTeamModForbidden {
	return &PermitTeamModForbidden{}
}

/*
PermitTeamModForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type PermitTeamModForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit team mod forbidden response has a 2xx status code
func (o *PermitTeamModForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit team mod forbidden response has a 3xx status code
func (o *PermitTeamModForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit team mod forbidden response has a 4xx status code
func (o *PermitTeamModForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit team mod forbidden response has a 5xx status code
func (o *PermitTeamModForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this permit team mod forbidden response a status code equal to that given
func (o *PermitTeamModForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the permit team mod forbidden response
func (o *PermitTeamModForbidden) Code() int {
	return 403
}

func (o *PermitTeamModForbidden) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/mods][%d] permitTeamModForbidden  %+v", 403, o.Payload)
}

func (o *PermitTeamModForbidden) String() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/mods][%d] permitTeamModForbidden  %+v", 403, o.Payload)
}

func (o *PermitTeamModForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitTeamModForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitTeamModNotFound creates a PermitTeamModNotFound with default headers values
func NewPermitTeamModNotFound() *PermitTeamModNotFound {
	return &PermitTeamModNotFound{}
}

/*
PermitTeamModNotFound describes a response with status code 404, with default header values.

Team or user not found
*/
type PermitTeamModNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit team mod not found response has a 2xx status code
func (o *PermitTeamModNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit team mod not found response has a 3xx status code
func (o *PermitTeamModNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit team mod not found response has a 4xx status code
func (o *PermitTeamModNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit team mod not found response has a 5xx status code
func (o *PermitTeamModNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this permit team mod not found response a status code equal to that given
func (o *PermitTeamModNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the permit team mod not found response
func (o *PermitTeamModNotFound) Code() int {
	return 404
}

func (o *PermitTeamModNotFound) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/mods][%d] permitTeamModNotFound  %+v", 404, o.Payload)
}

func (o *PermitTeamModNotFound) String() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/mods][%d] permitTeamModNotFound  %+v", 404, o.Payload)
}

func (o *PermitTeamModNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitTeamModNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitTeamModPreconditionFailed creates a PermitTeamModPreconditionFailed with default headers values
func NewPermitTeamModPreconditionFailed() *PermitTeamModPreconditionFailed {
	return &PermitTeamModPreconditionFailed{}
}

/*
PermitTeamModPreconditionFailed describes a response with status code 412, with default header values.

Mod is not attached
*/
type PermitTeamModPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit team mod precondition failed response has a 2xx status code
func (o *PermitTeamModPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit team mod precondition failed response has a 3xx status code
func (o *PermitTeamModPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit team mod precondition failed response has a 4xx status code
func (o *PermitTeamModPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit team mod precondition failed response has a 5xx status code
func (o *PermitTeamModPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this permit team mod precondition failed response a status code equal to that given
func (o *PermitTeamModPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the permit team mod precondition failed response
func (o *PermitTeamModPreconditionFailed) Code() int {
	return 412
}

func (o *PermitTeamModPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/mods][%d] permitTeamModPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitTeamModPreconditionFailed) String() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/mods][%d] permitTeamModPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitTeamModPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitTeamModPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitTeamModUnprocessableEntity creates a PermitTeamModUnprocessableEntity with default headers values
func NewPermitTeamModUnprocessableEntity() *PermitTeamModUnprocessableEntity {
	return &PermitTeamModUnprocessableEntity{}
}

/*
PermitTeamModUnprocessableEntity describes a response with status code 422, with default header values.

Failed to validate request
*/
type PermitTeamModUnprocessableEntity struct {
	Payload *models.ValidationError
}

// IsSuccess returns true when this permit team mod unprocessable entity response has a 2xx status code
func (o *PermitTeamModUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit team mod unprocessable entity response has a 3xx status code
func (o *PermitTeamModUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit team mod unprocessable entity response has a 4xx status code
func (o *PermitTeamModUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit team mod unprocessable entity response has a 5xx status code
func (o *PermitTeamModUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this permit team mod unprocessable entity response a status code equal to that given
func (o *PermitTeamModUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the permit team mod unprocessable entity response
func (o *PermitTeamModUnprocessableEntity) Code() int {
	return 422
}

func (o *PermitTeamModUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/mods][%d] permitTeamModUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitTeamModUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/mods][%d] permitTeamModUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitTeamModUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *PermitTeamModUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitTeamModDefault creates a PermitTeamModDefault with default headers values
func NewPermitTeamModDefault(code int) *PermitTeamModDefault {
	return &PermitTeamModDefault{
		_statusCode: code,
	}
}

/*
PermitTeamModDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type PermitTeamModDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this permit team mod default response has a 2xx status code
func (o *PermitTeamModDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this permit team mod default response has a 3xx status code
func (o *PermitTeamModDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this permit team mod default response has a 4xx status code
func (o *PermitTeamModDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this permit team mod default response has a 5xx status code
func (o *PermitTeamModDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this permit team mod default response a status code equal to that given
func (o *PermitTeamModDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the permit team mod default response
func (o *PermitTeamModDefault) Code() int {
	return o._statusCode
}

func (o *PermitTeamModDefault) Error() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/mods][%d] PermitTeamMod default  %+v", o._statusCode, o.Payload)
}

func (o *PermitTeamModDefault) String() string {
	return fmt.Sprintf("[PUT /teams/{team_id}/mods][%d] PermitTeamMod default  %+v", o._statusCode, o.Payload)
}

func (o *PermitTeamModDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitTeamModDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
