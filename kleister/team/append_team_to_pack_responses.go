// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// AppendTeamToPackReader is a Reader for the AppendTeamToPack structure.
type AppendTeamToPackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendTeamToPackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAppendTeamToPackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAppendTeamToPackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewAppendTeamToPackPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAppendTeamToPackUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAppendTeamToPackDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppendTeamToPackOK creates a AppendTeamToPackOK with default headers values
func NewAppendTeamToPackOK() *AppendTeamToPackOK {
	return &AppendTeamToPackOK{}
}

/* AppendTeamToPackOK describes a response with status code 200, with default header values.

Plain success message
*/
type AppendTeamToPackOK struct {
	Payload *models.GeneralError
}

func (o *AppendTeamToPackOK) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] appendTeamToPackOK  %+v", 200, o.Payload)
}
func (o *AppendTeamToPackOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendTeamToPackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTeamToPackForbidden creates a AppendTeamToPackForbidden with default headers values
func NewAppendTeamToPackForbidden() *AppendTeamToPackForbidden {
	return &AppendTeamToPackForbidden{}
}

/* AppendTeamToPackForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type AppendTeamToPackForbidden struct {
	Payload *models.GeneralError
}

func (o *AppendTeamToPackForbidden) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] appendTeamToPackForbidden  %+v", 403, o.Payload)
}
func (o *AppendTeamToPackForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendTeamToPackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTeamToPackPreconditionFailed creates a AppendTeamToPackPreconditionFailed with default headers values
func NewAppendTeamToPackPreconditionFailed() *AppendTeamToPackPreconditionFailed {
	return &AppendTeamToPackPreconditionFailed{}
}

/* AppendTeamToPackPreconditionFailed describes a response with status code 412, with default header values.

Failed to parse request body
*/
type AppendTeamToPackPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *AppendTeamToPackPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] appendTeamToPackPreconditionFailed  %+v", 412, o.Payload)
}
func (o *AppendTeamToPackPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendTeamToPackPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTeamToPackUnprocessableEntity creates a AppendTeamToPackUnprocessableEntity with default headers values
func NewAppendTeamToPackUnprocessableEntity() *AppendTeamToPackUnprocessableEntity {
	return &AppendTeamToPackUnprocessableEntity{}
}

/* AppendTeamToPackUnprocessableEntity describes a response with status code 422, with default header values.

Pack is already assigned
*/
type AppendTeamToPackUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *AppendTeamToPackUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] appendTeamToPackUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *AppendTeamToPackUnprocessableEntity) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendTeamToPackUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTeamToPackDefault creates a AppendTeamToPackDefault with default headers values
func NewAppendTeamToPackDefault(code int) *AppendTeamToPackDefault {
	return &AppendTeamToPackDefault{
		_statusCode: code,
	}
}

/* AppendTeamToPackDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type AppendTeamToPackDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the append team to pack default response
func (o *AppendTeamToPackDefault) Code() int {
	return o._statusCode
}

func (o *AppendTeamToPackDefault) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] AppendTeamToPack default  %+v", o._statusCode, o.Payload)
}
func (o *AppendTeamToPackDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendTeamToPackDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
