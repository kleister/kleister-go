// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kleister/kleister-go/models"
)

// DeleteTeamFromPackReader is a Reader for the DeleteTeamFromPack structure.
type DeleteTeamFromPackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTeamFromPackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteTeamFromPackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewDeleteTeamFromPackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteTeamFromPackPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewDeleteTeamFromPackUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteTeamFromPackDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteTeamFromPackOK creates a DeleteTeamFromPackOK with default headers values
func NewDeleteTeamFromPackOK() *DeleteTeamFromPackOK {
	return &DeleteTeamFromPackOK{}
}

/*DeleteTeamFromPackOK handles this case with default header values.

Plain success message
*/
type DeleteTeamFromPackOK struct {
	Payload *models.GeneralError
}

func (o *DeleteTeamFromPackOK) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/packs][%d] deleteTeamFromPackOK  %+v", 200, o.Payload)
}

func (o *DeleteTeamFromPackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamFromPackForbidden creates a DeleteTeamFromPackForbidden with default headers values
func NewDeleteTeamFromPackForbidden() *DeleteTeamFromPackForbidden {
	return &DeleteTeamFromPackForbidden{}
}

/*DeleteTeamFromPackForbidden handles this case with default header values.

User is not authorized
*/
type DeleteTeamFromPackForbidden struct {
	Payload *models.GeneralError
}

func (o *DeleteTeamFromPackForbidden) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/packs][%d] deleteTeamFromPackForbidden  %+v", 403, o.Payload)
}

func (o *DeleteTeamFromPackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamFromPackPreconditionFailed creates a DeleteTeamFromPackPreconditionFailed with default headers values
func NewDeleteTeamFromPackPreconditionFailed() *DeleteTeamFromPackPreconditionFailed {
	return &DeleteTeamFromPackPreconditionFailed{}
}

/*DeleteTeamFromPackPreconditionFailed handles this case with default header values.

Failed to parse request body
*/
type DeleteTeamFromPackPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *DeleteTeamFromPackPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/packs][%d] deleteTeamFromPackPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteTeamFromPackPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamFromPackUnprocessableEntity creates a DeleteTeamFromPackUnprocessableEntity with default headers values
func NewDeleteTeamFromPackUnprocessableEntity() *DeleteTeamFromPackUnprocessableEntity {
	return &DeleteTeamFromPackUnprocessableEntity{}
}

/*DeleteTeamFromPackUnprocessableEntity handles this case with default header values.

Pack is not assigned
*/
type DeleteTeamFromPackUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *DeleteTeamFromPackUnprocessableEntity) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/packs][%d] deleteTeamFromPackUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *DeleteTeamFromPackUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamFromPackDefault creates a DeleteTeamFromPackDefault with default headers values
func NewDeleteTeamFromPackDefault(code int) *DeleteTeamFromPackDefault {
	return &DeleteTeamFromPackDefault{
		_statusCode: code,
	}
}

/*DeleteTeamFromPackDefault handles this case with default header values.

Some error unrelated to the handler
*/
type DeleteTeamFromPackDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the delete team from pack default response
func (o *DeleteTeamFromPackDefault) Code() int {
	return o._statusCode
}

func (o *DeleteTeamFromPackDefault) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}/packs][%d] DeleteTeamFromPack default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteTeamFromPackDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
