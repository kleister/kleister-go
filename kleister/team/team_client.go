// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new team API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for team API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AppendTeamToMod assigns a mod to team
*/
func (a *Client) AppendTeamToMod(params *AppendTeamToModParams) (*AppendTeamToModOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendTeamToModParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AppendTeamToMod",
		Method:             "POST",
		PathPattern:        "/teams/{team_id}/mods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppendTeamToModReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AppendTeamToModOK), nil

}

/*
AppendTeamToPack assigns a pack to team
*/
func (a *Client) AppendTeamToPack(params *AppendTeamToPackParams) (*AppendTeamToPackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendTeamToPackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AppendTeamToPack",
		Method:             "POST",
		PathPattern:        "/teams/{team_id}/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppendTeamToPackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AppendTeamToPackOK), nil

}

/*
AppendTeamToUser assigns a user to team
*/
func (a *Client) AppendTeamToUser(params *AppendTeamToUserParams) (*AppendTeamToUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendTeamToUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AppendTeamToUser",
		Method:             "POST",
		PathPattern:        "/teams/{team_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppendTeamToUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AppendTeamToUserOK), nil

}

/*
CreateTeam creates a new team
*/
func (a *Client) CreateTeam(params *CreateTeamParams) (*CreateTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateTeam",
		Method:             "POST",
		PathPattern:        "/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateTeamOK), nil

}

/*
DeleteTeam deletes a specific team
*/
func (a *Client) DeleteTeam(params *DeleteTeamParams) (*DeleteTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTeam",
		Method:             "DELETE",
		PathPattern:        "/teams/{team_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTeamOK), nil

}

/*
DeleteTeamFromMod removes a mod from team
*/
func (a *Client) DeleteTeamFromMod(params *DeleteTeamFromModParams) (*DeleteTeamFromModOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamFromModParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTeamFromMod",
		Method:             "DELETE",
		PathPattern:        "/teams/{team_id}/mods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTeamFromModReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTeamFromModOK), nil

}

/*
DeleteTeamFromPack removes a pack from team
*/
func (a *Client) DeleteTeamFromPack(params *DeleteTeamFromPackParams) (*DeleteTeamFromPackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamFromPackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTeamFromPack",
		Method:             "DELETE",
		PathPattern:        "/teams/{team_id}/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTeamFromPackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTeamFromPackOK), nil

}

/*
DeleteTeamFromUser removes a user from team
*/
func (a *Client) DeleteTeamFromUser(params *DeleteTeamFromUserParams) (*DeleteTeamFromUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamFromUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTeamFromUser",
		Method:             "DELETE",
		PathPattern:        "/teams/{team_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTeamFromUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTeamFromUserOK), nil

}

/*
ListTeamMods fetches all mods assigned to team
*/
func (a *Client) ListTeamMods(params *ListTeamModsParams) (*ListTeamModsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamModsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListTeamMods",
		Method:             "GET",
		PathPattern:        "/teams/{team_id}/mods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTeamModsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListTeamModsOK), nil

}

/*
ListTeamPacks fetches all packs assigned to team
*/
func (a *Client) ListTeamPacks(params *ListTeamPacksParams) (*ListTeamPacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamPacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListTeamPacks",
		Method:             "GET",
		PathPattern:        "/teams/{team_id}/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTeamPacksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListTeamPacksOK), nil

}

/*
ListTeamUsers fetches all users assigned to team
*/
func (a *Client) ListTeamUsers(params *ListTeamUsersParams) (*ListTeamUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListTeamUsers",
		Method:             "GET",
		PathPattern:        "/teams/{team_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTeamUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListTeamUsersOK), nil

}

/*
ListTeams fetches all available teams
*/
func (a *Client) ListTeams(params *ListTeamsParams) (*ListTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListTeams",
		Method:             "GET",
		PathPattern:        "/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTeamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListTeamsOK), nil

}

/*
PermitTeamMod updates mod perms for team
*/
func (a *Client) PermitTeamMod(params *PermitTeamModParams) (*PermitTeamModOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPermitTeamModParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PermitTeamMod",
		Method:             "PUT",
		PathPattern:        "/teams/{team_id}/mods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PermitTeamModReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PermitTeamModOK), nil

}

/*
PermitTeamPack updates pack perms for team
*/
func (a *Client) PermitTeamPack(params *PermitTeamPackParams) (*PermitTeamPackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPermitTeamPackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PermitTeamPack",
		Method:             "PUT",
		PathPattern:        "/teams/{team_id}/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PermitTeamPackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PermitTeamPackOK), nil

}

/*
PermitTeamUser updates user perms for team
*/
func (a *Client) PermitTeamUser(params *PermitTeamUserParams) (*PermitTeamUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPermitTeamUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PermitTeamUser",
		Method:             "PUT",
		PathPattern:        "/teams/{team_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PermitTeamUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PermitTeamUserOK), nil

}

/*
ShowTeam fetches a specific team
*/
func (a *Client) ShowTeam(params *ShowTeamParams) (*ShowTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShowTeam",
		Method:             "GET",
		PathPattern:        "/teams/{team_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowTeamOK), nil

}

/*
UpdateTeam updates a specific team
*/
func (a *Client) UpdateTeam(params *UpdateTeamParams) (*UpdateTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateTeam",
		Method:             "PUT",
		PathPattern:        "/teams/{team_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateTeamOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
