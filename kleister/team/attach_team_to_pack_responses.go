// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// AttachTeamToPackReader is a Reader for the AttachTeamToPack structure.
type AttachTeamToPackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AttachTeamToPackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAttachTeamToPackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAttachTeamToPackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAttachTeamToPackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewAttachTeamToPackPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAttachTeamToPackUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAttachTeamToPackDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAttachTeamToPackOK creates a AttachTeamToPackOK with default headers values
func NewAttachTeamToPackOK() *AttachTeamToPackOK {
	return &AttachTeamToPackOK{}
}

/*
AttachTeamToPackOK describes a response with status code 200, with default header values.

Plain success message
*/
type AttachTeamToPackOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach team to pack o k response has a 2xx status code
func (o *AttachTeamToPackOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this attach team to pack o k response has a 3xx status code
func (o *AttachTeamToPackOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach team to pack o k response has a 4xx status code
func (o *AttachTeamToPackOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this attach team to pack o k response has a 5xx status code
func (o *AttachTeamToPackOK) IsServerError() bool {
	return false
}

// IsCode returns true when this attach team to pack o k response a status code equal to that given
func (o *AttachTeamToPackOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the attach team to pack o k response
func (o *AttachTeamToPackOK) Code() int {
	return 200
}

func (o *AttachTeamToPackOK) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] attachTeamToPackOK  %+v", 200, o.Payload)
}

func (o *AttachTeamToPackOK) String() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] attachTeamToPackOK  %+v", 200, o.Payload)
}

func (o *AttachTeamToPackOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachTeamToPackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachTeamToPackForbidden creates a AttachTeamToPackForbidden with default headers values
func NewAttachTeamToPackForbidden() *AttachTeamToPackForbidden {
	return &AttachTeamToPackForbidden{}
}

/*
AttachTeamToPackForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type AttachTeamToPackForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach team to pack forbidden response has a 2xx status code
func (o *AttachTeamToPackForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach team to pack forbidden response has a 3xx status code
func (o *AttachTeamToPackForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach team to pack forbidden response has a 4xx status code
func (o *AttachTeamToPackForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach team to pack forbidden response has a 5xx status code
func (o *AttachTeamToPackForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this attach team to pack forbidden response a status code equal to that given
func (o *AttachTeamToPackForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the attach team to pack forbidden response
func (o *AttachTeamToPackForbidden) Code() int {
	return 403
}

func (o *AttachTeamToPackForbidden) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] attachTeamToPackForbidden  %+v", 403, o.Payload)
}

func (o *AttachTeamToPackForbidden) String() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] attachTeamToPackForbidden  %+v", 403, o.Payload)
}

func (o *AttachTeamToPackForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachTeamToPackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachTeamToPackNotFound creates a AttachTeamToPackNotFound with default headers values
func NewAttachTeamToPackNotFound() *AttachTeamToPackNotFound {
	return &AttachTeamToPackNotFound{}
}

/*
AttachTeamToPackNotFound describes a response with status code 404, with default header values.

Team or pack not found
*/
type AttachTeamToPackNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach team to pack not found response has a 2xx status code
func (o *AttachTeamToPackNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach team to pack not found response has a 3xx status code
func (o *AttachTeamToPackNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach team to pack not found response has a 4xx status code
func (o *AttachTeamToPackNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach team to pack not found response has a 5xx status code
func (o *AttachTeamToPackNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this attach team to pack not found response a status code equal to that given
func (o *AttachTeamToPackNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the attach team to pack not found response
func (o *AttachTeamToPackNotFound) Code() int {
	return 404
}

func (o *AttachTeamToPackNotFound) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] attachTeamToPackNotFound  %+v", 404, o.Payload)
}

func (o *AttachTeamToPackNotFound) String() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] attachTeamToPackNotFound  %+v", 404, o.Payload)
}

func (o *AttachTeamToPackNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachTeamToPackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachTeamToPackPreconditionFailed creates a AttachTeamToPackPreconditionFailed with default headers values
func NewAttachTeamToPackPreconditionFailed() *AttachTeamToPackPreconditionFailed {
	return &AttachTeamToPackPreconditionFailed{}
}

/*
AttachTeamToPackPreconditionFailed describes a response with status code 412, with default header values.

Pack is already attached
*/
type AttachTeamToPackPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach team to pack precondition failed response has a 2xx status code
func (o *AttachTeamToPackPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach team to pack precondition failed response has a 3xx status code
func (o *AttachTeamToPackPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach team to pack precondition failed response has a 4xx status code
func (o *AttachTeamToPackPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach team to pack precondition failed response has a 5xx status code
func (o *AttachTeamToPackPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this attach team to pack precondition failed response a status code equal to that given
func (o *AttachTeamToPackPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the attach team to pack precondition failed response
func (o *AttachTeamToPackPreconditionFailed) Code() int {
	return 412
}

func (o *AttachTeamToPackPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] attachTeamToPackPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AttachTeamToPackPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] attachTeamToPackPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AttachTeamToPackPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachTeamToPackPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachTeamToPackUnprocessableEntity creates a AttachTeamToPackUnprocessableEntity with default headers values
func NewAttachTeamToPackUnprocessableEntity() *AttachTeamToPackUnprocessableEntity {
	return &AttachTeamToPackUnprocessableEntity{}
}

/*
AttachTeamToPackUnprocessableEntity describes a response with status code 422, with default header values.

Failed to validate request
*/
type AttachTeamToPackUnprocessableEntity struct {
	Payload *models.ValidationError
}

// IsSuccess returns true when this attach team to pack unprocessable entity response has a 2xx status code
func (o *AttachTeamToPackUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach team to pack unprocessable entity response has a 3xx status code
func (o *AttachTeamToPackUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach team to pack unprocessable entity response has a 4xx status code
func (o *AttachTeamToPackUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach team to pack unprocessable entity response has a 5xx status code
func (o *AttachTeamToPackUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this attach team to pack unprocessable entity response a status code equal to that given
func (o *AttachTeamToPackUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the attach team to pack unprocessable entity response
func (o *AttachTeamToPackUnprocessableEntity) Code() int {
	return 422
}

func (o *AttachTeamToPackUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] attachTeamToPackUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AttachTeamToPackUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] attachTeamToPackUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AttachTeamToPackUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *AttachTeamToPackUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachTeamToPackDefault creates a AttachTeamToPackDefault with default headers values
func NewAttachTeamToPackDefault(code int) *AttachTeamToPackDefault {
	return &AttachTeamToPackDefault{
		_statusCode: code,
	}
}

/*
AttachTeamToPackDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type AttachTeamToPackDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this attach team to pack default response has a 2xx status code
func (o *AttachTeamToPackDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this attach team to pack default response has a 3xx status code
func (o *AttachTeamToPackDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this attach team to pack default response has a 4xx status code
func (o *AttachTeamToPackDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this attach team to pack default response has a 5xx status code
func (o *AttachTeamToPackDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this attach team to pack default response a status code equal to that given
func (o *AttachTeamToPackDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the attach team to pack default response
func (o *AttachTeamToPackDefault) Code() int {
	return o._statusCode
}

func (o *AttachTeamToPackDefault) Error() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] AttachTeamToPack default  %+v", o._statusCode, o.Payload)
}

func (o *AttachTeamToPackDefault) String() string {
	return fmt.Sprintf("[POST /teams/{team_id}/packs][%d] AttachTeamToPack default  %+v", o._statusCode, o.Payload)
}

func (o *AttachTeamToPackDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachTeamToPackDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
