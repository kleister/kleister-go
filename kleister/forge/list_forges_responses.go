// Code generated by go-swagger; DO NOT EDIT.

package forge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// ListForgesReader is a Reader for the ListForges structure.
type ListForgesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListForgesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListForgesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewListForgesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListForgesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListForgesOK creates a ListForgesOK with default headers values
func NewListForgesOK() *ListForgesOK {
	return &ListForgesOK{}
}

/*
ListForgesOK describes a response with status code 200, with default header values.

A collection of Forge versions
*/
type ListForgesOK struct {
	Payload *models.Forges
}

// IsSuccess returns true when this list forges o k response has a 2xx status code
func (o *ListForgesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list forges o k response has a 3xx status code
func (o *ListForgesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list forges o k response has a 4xx status code
func (o *ListForgesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list forges o k response has a 5xx status code
func (o *ListForgesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list forges o k response a status code equal to that given
func (o *ListForgesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list forges o k response
func (o *ListForgesOK) Code() int {
	return 200
}

func (o *ListForgesOK) Error() string {
	return fmt.Sprintf("[GET /forge][%d] listForgesOK  %+v", 200, o.Payload)
}

func (o *ListForgesOK) String() string {
	return fmt.Sprintf("[GET /forge][%d] listForgesOK  %+v", 200, o.Payload)
}

func (o *ListForgesOK) GetPayload() *models.Forges {
	return o.Payload
}

func (o *ListForgesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forges)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListForgesForbidden creates a ListForgesForbidden with default headers values
func NewListForgesForbidden() *ListForgesForbidden {
	return &ListForgesForbidden{}
}

/*
ListForgesForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type ListForgesForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this list forges forbidden response has a 2xx status code
func (o *ListForgesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list forges forbidden response has a 3xx status code
func (o *ListForgesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list forges forbidden response has a 4xx status code
func (o *ListForgesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list forges forbidden response has a 5xx status code
func (o *ListForgesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list forges forbidden response a status code equal to that given
func (o *ListForgesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list forges forbidden response
func (o *ListForgesForbidden) Code() int {
	return 403
}

func (o *ListForgesForbidden) Error() string {
	return fmt.Sprintf("[GET /forge][%d] listForgesForbidden  %+v", 403, o.Payload)
}

func (o *ListForgesForbidden) String() string {
	return fmt.Sprintf("[GET /forge][%d] listForgesForbidden  %+v", 403, o.Payload)
}

func (o *ListForgesForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ListForgesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListForgesDefault creates a ListForgesDefault with default headers values
func NewListForgesDefault(code int) *ListForgesDefault {
	return &ListForgesDefault{
		_statusCode: code,
	}
}

/*
ListForgesDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type ListForgesDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this list forges default response has a 2xx status code
func (o *ListForgesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list forges default response has a 3xx status code
func (o *ListForgesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list forges default response has a 4xx status code
func (o *ListForgesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list forges default response has a 5xx status code
func (o *ListForgesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list forges default response a status code equal to that given
func (o *ListForgesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list forges default response
func (o *ListForgesDefault) Code() int {
	return o._statusCode
}

func (o *ListForgesDefault) Error() string {
	return fmt.Sprintf("[GET /forge][%d] ListForges default  %+v", o._statusCode, o.Payload)
}

func (o *ListForgesDefault) String() string {
	return fmt.Sprintf("[GET /forge][%d] ListForges default  %+v", o._statusCode, o.Payload)
}

func (o *ListForgesDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ListForgesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
