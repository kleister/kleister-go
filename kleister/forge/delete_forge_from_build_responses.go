// Code generated by go-swagger; DO NOT EDIT.

package forge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// DeleteForgeFromBuildReader is a Reader for the DeleteForgeFromBuild structure.
type DeleteForgeFromBuildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteForgeFromBuildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteForgeFromBuildOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteForgeFromBuildForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteForgeFromBuildNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewDeleteForgeFromBuildNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteForgeFromBuildPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteForgeFromBuildDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteForgeFromBuildOK creates a DeleteForgeFromBuildOK with default headers values
func NewDeleteForgeFromBuildOK() *DeleteForgeFromBuildOK {
	return &DeleteForgeFromBuildOK{}
}

/*
DeleteForgeFromBuildOK describes a response with status code 200, with default header values.

Plain success message
*/
type DeleteForgeFromBuildOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete forge from build o k response has a 2xx status code
func (o *DeleteForgeFromBuildOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete forge from build o k response has a 3xx status code
func (o *DeleteForgeFromBuildOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete forge from build o k response has a 4xx status code
func (o *DeleteForgeFromBuildOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete forge from build o k response has a 5xx status code
func (o *DeleteForgeFromBuildOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete forge from build o k response a status code equal to that given
func (o *DeleteForgeFromBuildOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete forge from build o k response
func (o *DeleteForgeFromBuildOK) Code() int {
	return 200
}

func (o *DeleteForgeFromBuildOK) Error() string {
	return fmt.Sprintf("[DELETE /forge/{forge_id}/builds][%d] deleteForgeFromBuildOK  %+v", 200, o.Payload)
}

func (o *DeleteForgeFromBuildOK) String() string {
	return fmt.Sprintf("[DELETE /forge/{forge_id}/builds][%d] deleteForgeFromBuildOK  %+v", 200, o.Payload)
}

func (o *DeleteForgeFromBuildOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteForgeFromBuildOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteForgeFromBuildForbidden creates a DeleteForgeFromBuildForbidden with default headers values
func NewDeleteForgeFromBuildForbidden() *DeleteForgeFromBuildForbidden {
	return &DeleteForgeFromBuildForbidden{}
}

/*
DeleteForgeFromBuildForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type DeleteForgeFromBuildForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete forge from build forbidden response has a 2xx status code
func (o *DeleteForgeFromBuildForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete forge from build forbidden response has a 3xx status code
func (o *DeleteForgeFromBuildForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete forge from build forbidden response has a 4xx status code
func (o *DeleteForgeFromBuildForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete forge from build forbidden response has a 5xx status code
func (o *DeleteForgeFromBuildForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete forge from build forbidden response a status code equal to that given
func (o *DeleteForgeFromBuildForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete forge from build forbidden response
func (o *DeleteForgeFromBuildForbidden) Code() int {
	return 403
}

func (o *DeleteForgeFromBuildForbidden) Error() string {
	return fmt.Sprintf("[DELETE /forge/{forge_id}/builds][%d] deleteForgeFromBuildForbidden  %+v", 403, o.Payload)
}

func (o *DeleteForgeFromBuildForbidden) String() string {
	return fmt.Sprintf("[DELETE /forge/{forge_id}/builds][%d] deleteForgeFromBuildForbidden  %+v", 403, o.Payload)
}

func (o *DeleteForgeFromBuildForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteForgeFromBuildForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteForgeFromBuildNotFound creates a DeleteForgeFromBuildNotFound with default headers values
func NewDeleteForgeFromBuildNotFound() *DeleteForgeFromBuildNotFound {
	return &DeleteForgeFromBuildNotFound{}
}

/*
DeleteForgeFromBuildNotFound describes a response with status code 404, with default header values.

Forge or build not found
*/
type DeleteForgeFromBuildNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete forge from build not found response has a 2xx status code
func (o *DeleteForgeFromBuildNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete forge from build not found response has a 3xx status code
func (o *DeleteForgeFromBuildNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete forge from build not found response has a 4xx status code
func (o *DeleteForgeFromBuildNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete forge from build not found response has a 5xx status code
func (o *DeleteForgeFromBuildNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete forge from build not found response a status code equal to that given
func (o *DeleteForgeFromBuildNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete forge from build not found response
func (o *DeleteForgeFromBuildNotFound) Code() int {
	return 404
}

func (o *DeleteForgeFromBuildNotFound) Error() string {
	return fmt.Sprintf("[DELETE /forge/{forge_id}/builds][%d] deleteForgeFromBuildNotFound  %+v", 404, o.Payload)
}

func (o *DeleteForgeFromBuildNotFound) String() string {
	return fmt.Sprintf("[DELETE /forge/{forge_id}/builds][%d] deleteForgeFromBuildNotFound  %+v", 404, o.Payload)
}

func (o *DeleteForgeFromBuildNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteForgeFromBuildNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteForgeFromBuildNotAcceptable creates a DeleteForgeFromBuildNotAcceptable with default headers values
func NewDeleteForgeFromBuildNotAcceptable() *DeleteForgeFromBuildNotAcceptable {
	return &DeleteForgeFromBuildNotAcceptable{}
}

/*
DeleteForgeFromBuildNotAcceptable describes a response with status code 406, with default header values.

Failed to update build
*/
type DeleteForgeFromBuildNotAcceptable struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete forge from build not acceptable response has a 2xx status code
func (o *DeleteForgeFromBuildNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete forge from build not acceptable response has a 3xx status code
func (o *DeleteForgeFromBuildNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete forge from build not acceptable response has a 4xx status code
func (o *DeleteForgeFromBuildNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete forge from build not acceptable response has a 5xx status code
func (o *DeleteForgeFromBuildNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this delete forge from build not acceptable response a status code equal to that given
func (o *DeleteForgeFromBuildNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the delete forge from build not acceptable response
func (o *DeleteForgeFromBuildNotAcceptable) Code() int {
	return 406
}

func (o *DeleteForgeFromBuildNotAcceptable) Error() string {
	return fmt.Sprintf("[DELETE /forge/{forge_id}/builds][%d] deleteForgeFromBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *DeleteForgeFromBuildNotAcceptable) String() string {
	return fmt.Sprintf("[DELETE /forge/{forge_id}/builds][%d] deleteForgeFromBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *DeleteForgeFromBuildNotAcceptable) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteForgeFromBuildNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteForgeFromBuildPreconditionFailed creates a DeleteForgeFromBuildPreconditionFailed with default headers values
func NewDeleteForgeFromBuildPreconditionFailed() *DeleteForgeFromBuildPreconditionFailed {
	return &DeleteForgeFromBuildPreconditionFailed{}
}

/*
DeleteForgeFromBuildPreconditionFailed describes a response with status code 412, with default header values.

Build is not assigned
*/
type DeleteForgeFromBuildPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete forge from build precondition failed response has a 2xx status code
func (o *DeleteForgeFromBuildPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete forge from build precondition failed response has a 3xx status code
func (o *DeleteForgeFromBuildPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete forge from build precondition failed response has a 4xx status code
func (o *DeleteForgeFromBuildPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete forge from build precondition failed response has a 5xx status code
func (o *DeleteForgeFromBuildPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete forge from build precondition failed response a status code equal to that given
func (o *DeleteForgeFromBuildPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete forge from build precondition failed response
func (o *DeleteForgeFromBuildPreconditionFailed) Code() int {
	return 412
}

func (o *DeleteForgeFromBuildPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /forge/{forge_id}/builds][%d] deleteForgeFromBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteForgeFromBuildPreconditionFailed) String() string {
	return fmt.Sprintf("[DELETE /forge/{forge_id}/builds][%d] deleteForgeFromBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteForgeFromBuildPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteForgeFromBuildPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteForgeFromBuildDefault creates a DeleteForgeFromBuildDefault with default headers values
func NewDeleteForgeFromBuildDefault(code int) *DeleteForgeFromBuildDefault {
	return &DeleteForgeFromBuildDefault{
		_statusCode: code,
	}
}

/*
DeleteForgeFromBuildDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type DeleteForgeFromBuildDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this delete forge from build default response has a 2xx status code
func (o *DeleteForgeFromBuildDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete forge from build default response has a 3xx status code
func (o *DeleteForgeFromBuildDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete forge from build default response has a 4xx status code
func (o *DeleteForgeFromBuildDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete forge from build default response has a 5xx status code
func (o *DeleteForgeFromBuildDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete forge from build default response a status code equal to that given
func (o *DeleteForgeFromBuildDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete forge from build default response
func (o *DeleteForgeFromBuildDefault) Code() int {
	return o._statusCode
}

func (o *DeleteForgeFromBuildDefault) Error() string {
	return fmt.Sprintf("[DELETE /forge/{forge_id}/builds][%d] DeleteForgeFromBuild default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteForgeFromBuildDefault) String() string {
	return fmt.Sprintf("[DELETE /forge/{forge_id}/builds][%d] DeleteForgeFromBuild default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteForgeFromBuildDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteForgeFromBuildDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
