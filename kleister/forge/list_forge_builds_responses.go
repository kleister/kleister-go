// Code generated by go-swagger; DO NOT EDIT.

package forge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// ListForgeBuildsReader is a Reader for the ListForgeBuilds structure.
type ListForgeBuildsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListForgeBuildsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListForgeBuildsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewListForgeBuildsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListForgeBuildsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListForgeBuildsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListForgeBuildsOK creates a ListForgeBuildsOK with default headers values
func NewListForgeBuildsOK() *ListForgeBuildsOK {
	return &ListForgeBuildsOK{}
}

/*
ListForgeBuildsOK describes a response with status code 200, with default header values.

A collection of assigned builds
*/
type ListForgeBuildsOK struct {
	Payload *models.ForgeBuilds
}

// IsSuccess returns true when this list forge builds o k response has a 2xx status code
func (o *ListForgeBuildsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list forge builds o k response has a 3xx status code
func (o *ListForgeBuildsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list forge builds o k response has a 4xx status code
func (o *ListForgeBuildsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list forge builds o k response has a 5xx status code
func (o *ListForgeBuildsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list forge builds o k response a status code equal to that given
func (o *ListForgeBuildsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list forge builds o k response
func (o *ListForgeBuildsOK) Code() int {
	return 200
}

func (o *ListForgeBuildsOK) Error() string {
	return fmt.Sprintf("[GET /forge/{forge_id}/builds][%d] listForgeBuildsOK  %+v", 200, o.Payload)
}

func (o *ListForgeBuildsOK) String() string {
	return fmt.Sprintf("[GET /forge/{forge_id}/builds][%d] listForgeBuildsOK  %+v", 200, o.Payload)
}

func (o *ListForgeBuildsOK) GetPayload() *models.ForgeBuilds {
	return o.Payload
}

func (o *ListForgeBuildsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForgeBuilds)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListForgeBuildsForbidden creates a ListForgeBuildsForbidden with default headers values
func NewListForgeBuildsForbidden() *ListForgeBuildsForbidden {
	return &ListForgeBuildsForbidden{}
}

/*
ListForgeBuildsForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type ListForgeBuildsForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this list forge builds forbidden response has a 2xx status code
func (o *ListForgeBuildsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list forge builds forbidden response has a 3xx status code
func (o *ListForgeBuildsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list forge builds forbidden response has a 4xx status code
func (o *ListForgeBuildsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list forge builds forbidden response has a 5xx status code
func (o *ListForgeBuildsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list forge builds forbidden response a status code equal to that given
func (o *ListForgeBuildsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list forge builds forbidden response
func (o *ListForgeBuildsForbidden) Code() int {
	return 403
}

func (o *ListForgeBuildsForbidden) Error() string {
	return fmt.Sprintf("[GET /forge/{forge_id}/builds][%d] listForgeBuildsForbidden  %+v", 403, o.Payload)
}

func (o *ListForgeBuildsForbidden) String() string {
	return fmt.Sprintf("[GET /forge/{forge_id}/builds][%d] listForgeBuildsForbidden  %+v", 403, o.Payload)
}

func (o *ListForgeBuildsForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ListForgeBuildsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListForgeBuildsNotFound creates a ListForgeBuildsNotFound with default headers values
func NewListForgeBuildsNotFound() *ListForgeBuildsNotFound {
	return &ListForgeBuildsNotFound{}
}

/*
ListForgeBuildsNotFound describes a response with status code 404, with default header values.

Forge or build not found
*/
type ListForgeBuildsNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this list forge builds not found response has a 2xx status code
func (o *ListForgeBuildsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list forge builds not found response has a 3xx status code
func (o *ListForgeBuildsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list forge builds not found response has a 4xx status code
func (o *ListForgeBuildsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list forge builds not found response has a 5xx status code
func (o *ListForgeBuildsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list forge builds not found response a status code equal to that given
func (o *ListForgeBuildsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list forge builds not found response
func (o *ListForgeBuildsNotFound) Code() int {
	return 404
}

func (o *ListForgeBuildsNotFound) Error() string {
	return fmt.Sprintf("[GET /forge/{forge_id}/builds][%d] listForgeBuildsNotFound  %+v", 404, o.Payload)
}

func (o *ListForgeBuildsNotFound) String() string {
	return fmt.Sprintf("[GET /forge/{forge_id}/builds][%d] listForgeBuildsNotFound  %+v", 404, o.Payload)
}

func (o *ListForgeBuildsNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ListForgeBuildsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListForgeBuildsDefault creates a ListForgeBuildsDefault with default headers values
func NewListForgeBuildsDefault(code int) *ListForgeBuildsDefault {
	return &ListForgeBuildsDefault{
		_statusCode: code,
	}
}

/*
ListForgeBuildsDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type ListForgeBuildsDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this list forge builds default response has a 2xx status code
func (o *ListForgeBuildsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list forge builds default response has a 3xx status code
func (o *ListForgeBuildsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list forge builds default response has a 4xx status code
func (o *ListForgeBuildsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list forge builds default response has a 5xx status code
func (o *ListForgeBuildsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list forge builds default response a status code equal to that given
func (o *ListForgeBuildsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list forge builds default response
func (o *ListForgeBuildsDefault) Code() int {
	return o._statusCode
}

func (o *ListForgeBuildsDefault) Error() string {
	return fmt.Sprintf("[GET /forge/{forge_id}/builds][%d] ListForgeBuilds default  %+v", o._statusCode, o.Payload)
}

func (o *ListForgeBuildsDefault) String() string {
	return fmt.Sprintf("[GET /forge/{forge_id}/builds][%d] ListForgeBuilds default  %+v", o._statusCode, o.Payload)
}

func (o *ListForgeBuildsDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ListForgeBuildsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
