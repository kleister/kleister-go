// Code generated by go-swagger; DO NOT EDIT.

package forge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// UpdateForgeReader is a Reader for the UpdateForge structure.
type UpdateForgeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateForgeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateForgeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateForgeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateForgeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateForgeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateForgeOK creates a UpdateForgeOK with default headers values
func NewUpdateForgeOK() *UpdateForgeOK {
	return &UpdateForgeOK{}
}

/* UpdateForgeOK describes a response with status code 200, with default header values.

Plain success message
*/
type UpdateForgeOK struct {
	Payload *models.GeneralError
}

func (o *UpdateForgeOK) Error() string {
	return fmt.Sprintf("[PUT /forge][%d] updateForgeOK  %+v", 200, o.Payload)
}
func (o *UpdateForgeOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateForgeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateForgeForbidden creates a UpdateForgeForbidden with default headers values
func NewUpdateForgeForbidden() *UpdateForgeForbidden {
	return &UpdateForgeForbidden{}
}

/* UpdateForgeForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type UpdateForgeForbidden struct {
	Payload *models.GeneralError
}

func (o *UpdateForgeForbidden) Error() string {
	return fmt.Sprintf("[PUT /forge][%d] updateForgeForbidden  %+v", 403, o.Payload)
}
func (o *UpdateForgeForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateForgeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateForgeServiceUnavailable creates a UpdateForgeServiceUnavailable with default headers values
func NewUpdateForgeServiceUnavailable() *UpdateForgeServiceUnavailable {
	return &UpdateForgeServiceUnavailable{}
}

/* UpdateForgeServiceUnavailable describes a response with status code 503, with default header values.

If remote source is not available
*/
type UpdateForgeServiceUnavailable struct {
	Payload *models.GeneralError
}

func (o *UpdateForgeServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /forge][%d] updateForgeServiceUnavailable  %+v", 503, o.Payload)
}
func (o *UpdateForgeServiceUnavailable) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateForgeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateForgeDefault creates a UpdateForgeDefault with default headers values
func NewUpdateForgeDefault(code int) *UpdateForgeDefault {
	return &UpdateForgeDefault{
		_statusCode: code,
	}
}

/* UpdateForgeDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type UpdateForgeDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the update forge default response
func (o *UpdateForgeDefault) Code() int {
	return o._statusCode
}

func (o *UpdateForgeDefault) Error() string {
	return fmt.Sprintf("[PUT /forge][%d] UpdateForge default  %+v", o._statusCode, o.Payload)
}
func (o *UpdateForgeDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateForgeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
