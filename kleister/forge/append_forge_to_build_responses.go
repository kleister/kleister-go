// Code generated by go-swagger; DO NOT EDIT.

package forge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// AppendForgeToBuildReader is a Reader for the AppendForgeToBuild structure.
type AppendForgeToBuildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendForgeToBuildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAppendForgeToBuildOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAppendForgeToBuildForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAppendForgeToBuildNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewAppendForgeToBuildNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewAppendForgeToBuildPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAppendForgeToBuildDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppendForgeToBuildOK creates a AppendForgeToBuildOK with default headers values
func NewAppendForgeToBuildOK() *AppendForgeToBuildOK {
	return &AppendForgeToBuildOK{}
}

/*
AppendForgeToBuildOK describes a response with status code 200, with default header values.

Plain success message
*/
type AppendForgeToBuildOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append forge to build o k response has a 2xx status code
func (o *AppendForgeToBuildOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this append forge to build o k response has a 3xx status code
func (o *AppendForgeToBuildOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append forge to build o k response has a 4xx status code
func (o *AppendForgeToBuildOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this append forge to build o k response has a 5xx status code
func (o *AppendForgeToBuildOK) IsServerError() bool {
	return false
}

// IsCode returns true when this append forge to build o k response a status code equal to that given
func (o *AppendForgeToBuildOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the append forge to build o k response
func (o *AppendForgeToBuildOK) Code() int {
	return 200
}

func (o *AppendForgeToBuildOK) Error() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildOK  %+v", 200, o.Payload)
}

func (o *AppendForgeToBuildOK) String() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildOK  %+v", 200, o.Payload)
}

func (o *AppendForgeToBuildOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendForgeToBuildOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendForgeToBuildForbidden creates a AppendForgeToBuildForbidden with default headers values
func NewAppendForgeToBuildForbidden() *AppendForgeToBuildForbidden {
	return &AppendForgeToBuildForbidden{}
}

/*
AppendForgeToBuildForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type AppendForgeToBuildForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append forge to build forbidden response has a 2xx status code
func (o *AppendForgeToBuildForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append forge to build forbidden response has a 3xx status code
func (o *AppendForgeToBuildForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append forge to build forbidden response has a 4xx status code
func (o *AppendForgeToBuildForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this append forge to build forbidden response has a 5xx status code
func (o *AppendForgeToBuildForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this append forge to build forbidden response a status code equal to that given
func (o *AppendForgeToBuildForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the append forge to build forbidden response
func (o *AppendForgeToBuildForbidden) Code() int {
	return 403
}

func (o *AppendForgeToBuildForbidden) Error() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildForbidden  %+v", 403, o.Payload)
}

func (o *AppendForgeToBuildForbidden) String() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildForbidden  %+v", 403, o.Payload)
}

func (o *AppendForgeToBuildForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendForgeToBuildForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendForgeToBuildNotFound creates a AppendForgeToBuildNotFound with default headers values
func NewAppendForgeToBuildNotFound() *AppendForgeToBuildNotFound {
	return &AppendForgeToBuildNotFound{}
}

/*
AppendForgeToBuildNotFound describes a response with status code 404, with default header values.

Forge or build not found
*/
type AppendForgeToBuildNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append forge to build not found response has a 2xx status code
func (o *AppendForgeToBuildNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append forge to build not found response has a 3xx status code
func (o *AppendForgeToBuildNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append forge to build not found response has a 4xx status code
func (o *AppendForgeToBuildNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this append forge to build not found response has a 5xx status code
func (o *AppendForgeToBuildNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this append forge to build not found response a status code equal to that given
func (o *AppendForgeToBuildNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the append forge to build not found response
func (o *AppendForgeToBuildNotFound) Code() int {
	return 404
}

func (o *AppendForgeToBuildNotFound) Error() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildNotFound  %+v", 404, o.Payload)
}

func (o *AppendForgeToBuildNotFound) String() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildNotFound  %+v", 404, o.Payload)
}

func (o *AppendForgeToBuildNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendForgeToBuildNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendForgeToBuildNotAcceptable creates a AppendForgeToBuildNotAcceptable with default headers values
func NewAppendForgeToBuildNotAcceptable() *AppendForgeToBuildNotAcceptable {
	return &AppendForgeToBuildNotAcceptable{}
}

/*
AppendForgeToBuildNotAcceptable describes a response with status code 406, with default header values.

Failed to update build
*/
type AppendForgeToBuildNotAcceptable struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append forge to build not acceptable response has a 2xx status code
func (o *AppendForgeToBuildNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append forge to build not acceptable response has a 3xx status code
func (o *AppendForgeToBuildNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append forge to build not acceptable response has a 4xx status code
func (o *AppendForgeToBuildNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this append forge to build not acceptable response has a 5xx status code
func (o *AppendForgeToBuildNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this append forge to build not acceptable response a status code equal to that given
func (o *AppendForgeToBuildNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the append forge to build not acceptable response
func (o *AppendForgeToBuildNotAcceptable) Code() int {
	return 406
}

func (o *AppendForgeToBuildNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *AppendForgeToBuildNotAcceptable) String() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *AppendForgeToBuildNotAcceptable) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendForgeToBuildNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendForgeToBuildPreconditionFailed creates a AppendForgeToBuildPreconditionFailed with default headers values
func NewAppendForgeToBuildPreconditionFailed() *AppendForgeToBuildPreconditionFailed {
	return &AppendForgeToBuildPreconditionFailed{}
}

/*
AppendForgeToBuildPreconditionFailed describes a response with status code 412, with default header values.

Build is already assigned
*/
type AppendForgeToBuildPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append forge to build precondition failed response has a 2xx status code
func (o *AppendForgeToBuildPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append forge to build precondition failed response has a 3xx status code
func (o *AppendForgeToBuildPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append forge to build precondition failed response has a 4xx status code
func (o *AppendForgeToBuildPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this append forge to build precondition failed response has a 5xx status code
func (o *AppendForgeToBuildPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this append forge to build precondition failed response a status code equal to that given
func (o *AppendForgeToBuildPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the append forge to build precondition failed response
func (o *AppendForgeToBuildPreconditionFailed) Code() int {
	return 412
}

func (o *AppendForgeToBuildPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AppendForgeToBuildPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AppendForgeToBuildPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendForgeToBuildPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendForgeToBuildDefault creates a AppendForgeToBuildDefault with default headers values
func NewAppendForgeToBuildDefault(code int) *AppendForgeToBuildDefault {
	return &AppendForgeToBuildDefault{
		_statusCode: code,
	}
}

/*
AppendForgeToBuildDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type AppendForgeToBuildDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this append forge to build default response has a 2xx status code
func (o *AppendForgeToBuildDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this append forge to build default response has a 3xx status code
func (o *AppendForgeToBuildDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this append forge to build default response has a 4xx status code
func (o *AppendForgeToBuildDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this append forge to build default response has a 5xx status code
func (o *AppendForgeToBuildDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this append forge to build default response a status code equal to that given
func (o *AppendForgeToBuildDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the append forge to build default response
func (o *AppendForgeToBuildDefault) Code() int {
	return o._statusCode
}

func (o *AppendForgeToBuildDefault) Error() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] AppendForgeToBuild default  %+v", o._statusCode, o.Payload)
}

func (o *AppendForgeToBuildDefault) String() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] AppendForgeToBuild default  %+v", o._statusCode, o.Payload)
}

func (o *AppendForgeToBuildDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendForgeToBuildDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
