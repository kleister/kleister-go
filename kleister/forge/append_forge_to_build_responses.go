// Code generated by go-swagger; DO NOT EDIT.

package forge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kleister/kleister-go/models"
)

// AppendForgeToBuildReader is a Reader for the AppendForgeToBuild structure.
type AppendForgeToBuildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendForgeToBuildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAppendForgeToBuildOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewAppendForgeToBuildForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewAppendForgeToBuildPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewAppendForgeToBuildUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAppendForgeToBuildDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppendForgeToBuildOK creates a AppendForgeToBuildOK with default headers values
func NewAppendForgeToBuildOK() *AppendForgeToBuildOK {
	return &AppendForgeToBuildOK{}
}

/*AppendForgeToBuildOK handles this case with default header values.

A collection of assigned builds
*/
type AppendForgeToBuildOK struct {
	Payload []*models.Build
}

func (o *AppendForgeToBuildOK) Error() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildOK  %+v", 200, o.Payload)
}

func (o *AppendForgeToBuildOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendForgeToBuildForbidden creates a AppendForgeToBuildForbidden with default headers values
func NewAppendForgeToBuildForbidden() *AppendForgeToBuildForbidden {
	return &AppendForgeToBuildForbidden{}
}

/*AppendForgeToBuildForbidden handles this case with default header values.

User is not authorized
*/
type AppendForgeToBuildForbidden struct {
	Payload *models.GeneralError
}

func (o *AppendForgeToBuildForbidden) Error() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildForbidden  %+v", 403, o.Payload)
}

func (o *AppendForgeToBuildForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendForgeToBuildPreconditionFailed creates a AppendForgeToBuildPreconditionFailed with default headers values
func NewAppendForgeToBuildPreconditionFailed() *AppendForgeToBuildPreconditionFailed {
	return &AppendForgeToBuildPreconditionFailed{}
}

/*AppendForgeToBuildPreconditionFailed handles this case with default header values.

Failed to parse request body
*/
type AppendForgeToBuildPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *AppendForgeToBuildPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AppendForgeToBuildPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendForgeToBuildUnprocessableEntity creates a AppendForgeToBuildUnprocessableEntity with default headers values
func NewAppendForgeToBuildUnprocessableEntity() *AppendForgeToBuildUnprocessableEntity {
	return &AppendForgeToBuildUnprocessableEntity{}
}

/*AppendForgeToBuildUnprocessableEntity handles this case with default header values.

Build is already appended
*/
type AppendForgeToBuildUnprocessableEntity struct {
	Payload *models.ValidationError
}

func (o *AppendForgeToBuildUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] appendForgeToBuildUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AppendForgeToBuildUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendForgeToBuildDefault creates a AppendForgeToBuildDefault with default headers values
func NewAppendForgeToBuildDefault(code int) *AppendForgeToBuildDefault {
	return &AppendForgeToBuildDefault{
		_statusCode: code,
	}
}

/*AppendForgeToBuildDefault handles this case with default header values.

Some error unrelated to the handler
*/
type AppendForgeToBuildDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the append forge to build default response
func (o *AppendForgeToBuildDefault) Code() int {
	return o._statusCode
}

func (o *AppendForgeToBuildDefault) Error() string {
	return fmt.Sprintf("[POST /forge/{forge_id}/builds][%d] AppendForgeToBuild default  %+v", o._statusCode, o.Payload)
}

func (o *AppendForgeToBuildDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
