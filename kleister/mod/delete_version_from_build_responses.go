// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// DeleteVersionFromBuildReader is a Reader for the DeleteVersionFromBuild structure.
type DeleteVersionFromBuildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVersionFromBuildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteVersionFromBuildOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteVersionFromBuildBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteVersionFromBuildForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteVersionFromBuildNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteVersionFromBuildPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteVersionFromBuildDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteVersionFromBuildOK creates a DeleteVersionFromBuildOK with default headers values
func NewDeleteVersionFromBuildOK() *DeleteVersionFromBuildOK {
	return &DeleteVersionFromBuildOK{}
}

/*
DeleteVersionFromBuildOK describes a response with status code 200, with default header values.

Plain success message
*/
type DeleteVersionFromBuildOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete version from build o k response has a 2xx status code
func (o *DeleteVersionFromBuildOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete version from build o k response has a 3xx status code
func (o *DeleteVersionFromBuildOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete version from build o k response has a 4xx status code
func (o *DeleteVersionFromBuildOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete version from build o k response has a 5xx status code
func (o *DeleteVersionFromBuildOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete version from build o k response a status code equal to that given
func (o *DeleteVersionFromBuildOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete version from build o k response
func (o *DeleteVersionFromBuildOK) Code() int {
	return 200
}

func (o *DeleteVersionFromBuildOK) Error() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/versions/{version_id}/builds][%d] deleteVersionFromBuildOK  %+v", 200, o.Payload)
}

func (o *DeleteVersionFromBuildOK) String() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/versions/{version_id}/builds][%d] deleteVersionFromBuildOK  %+v", 200, o.Payload)
}

func (o *DeleteVersionFromBuildOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteVersionFromBuildOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVersionFromBuildBadRequest creates a DeleteVersionFromBuildBadRequest with default headers values
func NewDeleteVersionFromBuildBadRequest() *DeleteVersionFromBuildBadRequest {
	return &DeleteVersionFromBuildBadRequest{}
}

/*
DeleteVersionFromBuildBadRequest describes a response with status code 400, with default header values.

Failed to unlink build
*/
type DeleteVersionFromBuildBadRequest struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete version from build bad request response has a 2xx status code
func (o *DeleteVersionFromBuildBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete version from build bad request response has a 3xx status code
func (o *DeleteVersionFromBuildBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete version from build bad request response has a 4xx status code
func (o *DeleteVersionFromBuildBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete version from build bad request response has a 5xx status code
func (o *DeleteVersionFromBuildBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete version from build bad request response a status code equal to that given
func (o *DeleteVersionFromBuildBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete version from build bad request response
func (o *DeleteVersionFromBuildBadRequest) Code() int {
	return 400
}

func (o *DeleteVersionFromBuildBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/versions/{version_id}/builds][%d] deleteVersionFromBuildBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteVersionFromBuildBadRequest) String() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/versions/{version_id}/builds][%d] deleteVersionFromBuildBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteVersionFromBuildBadRequest) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteVersionFromBuildBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVersionFromBuildForbidden creates a DeleteVersionFromBuildForbidden with default headers values
func NewDeleteVersionFromBuildForbidden() *DeleteVersionFromBuildForbidden {
	return &DeleteVersionFromBuildForbidden{}
}

/*
DeleteVersionFromBuildForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type DeleteVersionFromBuildForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete version from build forbidden response has a 2xx status code
func (o *DeleteVersionFromBuildForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete version from build forbidden response has a 3xx status code
func (o *DeleteVersionFromBuildForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete version from build forbidden response has a 4xx status code
func (o *DeleteVersionFromBuildForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete version from build forbidden response has a 5xx status code
func (o *DeleteVersionFromBuildForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete version from build forbidden response a status code equal to that given
func (o *DeleteVersionFromBuildForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete version from build forbidden response
func (o *DeleteVersionFromBuildForbidden) Code() int {
	return 403
}

func (o *DeleteVersionFromBuildForbidden) Error() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/versions/{version_id}/builds][%d] deleteVersionFromBuildForbidden  %+v", 403, o.Payload)
}

func (o *DeleteVersionFromBuildForbidden) String() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/versions/{version_id}/builds][%d] deleteVersionFromBuildForbidden  %+v", 403, o.Payload)
}

func (o *DeleteVersionFromBuildForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteVersionFromBuildForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVersionFromBuildNotFound creates a DeleteVersionFromBuildNotFound with default headers values
func NewDeleteVersionFromBuildNotFound() *DeleteVersionFromBuildNotFound {
	return &DeleteVersionFromBuildNotFound{}
}

/*
DeleteVersionFromBuildNotFound describes a response with status code 404, with default header values.

Version or mod not found
*/
type DeleteVersionFromBuildNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete version from build not found response has a 2xx status code
func (o *DeleteVersionFromBuildNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete version from build not found response has a 3xx status code
func (o *DeleteVersionFromBuildNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete version from build not found response has a 4xx status code
func (o *DeleteVersionFromBuildNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete version from build not found response has a 5xx status code
func (o *DeleteVersionFromBuildNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete version from build not found response a status code equal to that given
func (o *DeleteVersionFromBuildNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete version from build not found response
func (o *DeleteVersionFromBuildNotFound) Code() int {
	return 404
}

func (o *DeleteVersionFromBuildNotFound) Error() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/versions/{version_id}/builds][%d] deleteVersionFromBuildNotFound  %+v", 404, o.Payload)
}

func (o *DeleteVersionFromBuildNotFound) String() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/versions/{version_id}/builds][%d] deleteVersionFromBuildNotFound  %+v", 404, o.Payload)
}

func (o *DeleteVersionFromBuildNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteVersionFromBuildNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVersionFromBuildPreconditionFailed creates a DeleteVersionFromBuildPreconditionFailed with default headers values
func NewDeleteVersionFromBuildPreconditionFailed() *DeleteVersionFromBuildPreconditionFailed {
	return &DeleteVersionFromBuildPreconditionFailed{}
}

/*
DeleteVersionFromBuildPreconditionFailed describes a response with status code 412, with default header values.

Build is not assigned
*/
type DeleteVersionFromBuildPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete version from build precondition failed response has a 2xx status code
func (o *DeleteVersionFromBuildPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete version from build precondition failed response has a 3xx status code
func (o *DeleteVersionFromBuildPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete version from build precondition failed response has a 4xx status code
func (o *DeleteVersionFromBuildPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete version from build precondition failed response has a 5xx status code
func (o *DeleteVersionFromBuildPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete version from build precondition failed response a status code equal to that given
func (o *DeleteVersionFromBuildPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete version from build precondition failed response
func (o *DeleteVersionFromBuildPreconditionFailed) Code() int {
	return 412
}

func (o *DeleteVersionFromBuildPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/versions/{version_id}/builds][%d] deleteVersionFromBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteVersionFromBuildPreconditionFailed) String() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/versions/{version_id}/builds][%d] deleteVersionFromBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteVersionFromBuildPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteVersionFromBuildPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVersionFromBuildDefault creates a DeleteVersionFromBuildDefault with default headers values
func NewDeleteVersionFromBuildDefault(code int) *DeleteVersionFromBuildDefault {
	return &DeleteVersionFromBuildDefault{
		_statusCode: code,
	}
}

/*
DeleteVersionFromBuildDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type DeleteVersionFromBuildDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this delete version from build default response has a 2xx status code
func (o *DeleteVersionFromBuildDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete version from build default response has a 3xx status code
func (o *DeleteVersionFromBuildDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete version from build default response has a 4xx status code
func (o *DeleteVersionFromBuildDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete version from build default response has a 5xx status code
func (o *DeleteVersionFromBuildDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete version from build default response a status code equal to that given
func (o *DeleteVersionFromBuildDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete version from build default response
func (o *DeleteVersionFromBuildDefault) Code() int {
	return o._statusCode
}

func (o *DeleteVersionFromBuildDefault) Error() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/versions/{version_id}/builds][%d] DeleteVersionFromBuild default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteVersionFromBuildDefault) String() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/versions/{version_id}/builds][%d] DeleteVersionFromBuild default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteVersionFromBuildDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteVersionFromBuildDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
