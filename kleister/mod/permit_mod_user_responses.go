// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// PermitModUserReader is a Reader for the PermitModUser structure.
type PermitModUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PermitModUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPermitModUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPermitModUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPermitModUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPermitModUserPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPermitModUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPermitModUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPermitModUserOK creates a PermitModUserOK with default headers values
func NewPermitModUserOK() *PermitModUserOK {
	return &PermitModUserOK{}
}

/*
PermitModUserOK describes a response with status code 200, with default header values.

Plain success message
*/
type PermitModUserOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit mod user o k response has a 2xx status code
func (o *PermitModUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this permit mod user o k response has a 3xx status code
func (o *PermitModUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit mod user o k response has a 4xx status code
func (o *PermitModUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this permit mod user o k response has a 5xx status code
func (o *PermitModUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this permit mod user o k response a status code equal to that given
func (o *PermitModUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the permit mod user o k response
func (o *PermitModUserOK) Code() int {
	return 200
}

func (o *PermitModUserOK) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/users][%d] permitModUserOK  %+v", 200, o.Payload)
}

func (o *PermitModUserOK) String() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/users][%d] permitModUserOK  %+v", 200, o.Payload)
}

func (o *PermitModUserOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitModUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitModUserForbidden creates a PermitModUserForbidden with default headers values
func NewPermitModUserForbidden() *PermitModUserForbidden {
	return &PermitModUserForbidden{}
}

/*
PermitModUserForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type PermitModUserForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit mod user forbidden response has a 2xx status code
func (o *PermitModUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit mod user forbidden response has a 3xx status code
func (o *PermitModUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit mod user forbidden response has a 4xx status code
func (o *PermitModUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit mod user forbidden response has a 5xx status code
func (o *PermitModUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this permit mod user forbidden response a status code equal to that given
func (o *PermitModUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the permit mod user forbidden response
func (o *PermitModUserForbidden) Code() int {
	return 403
}

func (o *PermitModUserForbidden) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/users][%d] permitModUserForbidden  %+v", 403, o.Payload)
}

func (o *PermitModUserForbidden) String() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/users][%d] permitModUserForbidden  %+v", 403, o.Payload)
}

func (o *PermitModUserForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitModUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitModUserNotFound creates a PermitModUserNotFound with default headers values
func NewPermitModUserNotFound() *PermitModUserNotFound {
	return &PermitModUserNotFound{}
}

/*
PermitModUserNotFound describes a response with status code 404, with default header values.

Mod or user not found
*/
type PermitModUserNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit mod user not found response has a 2xx status code
func (o *PermitModUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit mod user not found response has a 3xx status code
func (o *PermitModUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit mod user not found response has a 4xx status code
func (o *PermitModUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit mod user not found response has a 5xx status code
func (o *PermitModUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this permit mod user not found response a status code equal to that given
func (o *PermitModUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the permit mod user not found response
func (o *PermitModUserNotFound) Code() int {
	return 404
}

func (o *PermitModUserNotFound) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/users][%d] permitModUserNotFound  %+v", 404, o.Payload)
}

func (o *PermitModUserNotFound) String() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/users][%d] permitModUserNotFound  %+v", 404, o.Payload)
}

func (o *PermitModUserNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitModUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitModUserPreconditionFailed creates a PermitModUserPreconditionFailed with default headers values
func NewPermitModUserPreconditionFailed() *PermitModUserPreconditionFailed {
	return &PermitModUserPreconditionFailed{}
}

/*
PermitModUserPreconditionFailed describes a response with status code 412, with default header values.

User is not attached
*/
type PermitModUserPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit mod user precondition failed response has a 2xx status code
func (o *PermitModUserPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit mod user precondition failed response has a 3xx status code
func (o *PermitModUserPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit mod user precondition failed response has a 4xx status code
func (o *PermitModUserPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit mod user precondition failed response has a 5xx status code
func (o *PermitModUserPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this permit mod user precondition failed response a status code equal to that given
func (o *PermitModUserPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the permit mod user precondition failed response
func (o *PermitModUserPreconditionFailed) Code() int {
	return 412
}

func (o *PermitModUserPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/users][%d] permitModUserPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitModUserPreconditionFailed) String() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/users][%d] permitModUserPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitModUserPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitModUserPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitModUserUnprocessableEntity creates a PermitModUserUnprocessableEntity with default headers values
func NewPermitModUserUnprocessableEntity() *PermitModUserUnprocessableEntity {
	return &PermitModUserUnprocessableEntity{}
}

/*
PermitModUserUnprocessableEntity describes a response with status code 422, with default header values.

Failed to validate request
*/
type PermitModUserUnprocessableEntity struct {
	Payload *models.ValidationError
}

// IsSuccess returns true when this permit mod user unprocessable entity response has a 2xx status code
func (o *PermitModUserUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit mod user unprocessable entity response has a 3xx status code
func (o *PermitModUserUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit mod user unprocessable entity response has a 4xx status code
func (o *PermitModUserUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit mod user unprocessable entity response has a 5xx status code
func (o *PermitModUserUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this permit mod user unprocessable entity response a status code equal to that given
func (o *PermitModUserUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the permit mod user unprocessable entity response
func (o *PermitModUserUnprocessableEntity) Code() int {
	return 422
}

func (o *PermitModUserUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/users][%d] permitModUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitModUserUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/users][%d] permitModUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitModUserUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *PermitModUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitModUserDefault creates a PermitModUserDefault with default headers values
func NewPermitModUserDefault(code int) *PermitModUserDefault {
	return &PermitModUserDefault{
		_statusCode: code,
	}
}

/*
PermitModUserDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type PermitModUserDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this permit mod user default response has a 2xx status code
func (o *PermitModUserDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this permit mod user default response has a 3xx status code
func (o *PermitModUserDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this permit mod user default response has a 4xx status code
func (o *PermitModUserDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this permit mod user default response has a 5xx status code
func (o *PermitModUserDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this permit mod user default response a status code equal to that given
func (o *PermitModUserDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the permit mod user default response
func (o *PermitModUserDefault) Code() int {
	return o._statusCode
}

func (o *PermitModUserDefault) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/users][%d] PermitModUser default  %+v", o._statusCode, o.Payload)
}

func (o *PermitModUserDefault) String() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/users][%d] PermitModUser default  %+v", o._statusCode, o.Payload)
}

func (o *PermitModUserDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitModUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
