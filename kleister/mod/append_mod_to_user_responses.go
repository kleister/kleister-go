// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// AppendModToUserReader is a Reader for the AppendModToUser structure.
type AppendModToUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendModToUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAppendModToUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAppendModToUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewAppendModToUserPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAppendModToUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAppendModToUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppendModToUserOK creates a AppendModToUserOK with default headers values
func NewAppendModToUserOK() *AppendModToUserOK {
	return &AppendModToUserOK{}
}

/* AppendModToUserOK describes a response with status code 200, with default header values.

Plain success message
*/
type AppendModToUserOK struct {
	Payload *models.GeneralError
}

func (o *AppendModToUserOK) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] appendModToUserOK  %+v", 200, o.Payload)
}
func (o *AppendModToUserOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendModToUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendModToUserForbidden creates a AppendModToUserForbidden with default headers values
func NewAppendModToUserForbidden() *AppendModToUserForbidden {
	return &AppendModToUserForbidden{}
}

/* AppendModToUserForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type AppendModToUserForbidden struct {
	Payload *models.GeneralError
}

func (o *AppendModToUserForbidden) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] appendModToUserForbidden  %+v", 403, o.Payload)
}
func (o *AppendModToUserForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendModToUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendModToUserPreconditionFailed creates a AppendModToUserPreconditionFailed with default headers values
func NewAppendModToUserPreconditionFailed() *AppendModToUserPreconditionFailed {
	return &AppendModToUserPreconditionFailed{}
}

/* AppendModToUserPreconditionFailed describes a response with status code 412, with default header values.

Failed to parse request body
*/
type AppendModToUserPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *AppendModToUserPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] appendModToUserPreconditionFailed  %+v", 412, o.Payload)
}
func (o *AppendModToUserPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendModToUserPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendModToUserUnprocessableEntity creates a AppendModToUserUnprocessableEntity with default headers values
func NewAppendModToUserUnprocessableEntity() *AppendModToUserUnprocessableEntity {
	return &AppendModToUserUnprocessableEntity{}
}

/* AppendModToUserUnprocessableEntity describes a response with status code 422, with default header values.

User is already assigned
*/
type AppendModToUserUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *AppendModToUserUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] appendModToUserUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *AppendModToUserUnprocessableEntity) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendModToUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendModToUserDefault creates a AppendModToUserDefault with default headers values
func NewAppendModToUserDefault(code int) *AppendModToUserDefault {
	return &AppendModToUserDefault{
		_statusCode: code,
	}
}

/* AppendModToUserDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type AppendModToUserDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the append mod to user default response
func (o *AppendModToUserDefault) Code() int {
	return o._statusCode
}

func (o *AppendModToUserDefault) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] AppendModToUser default  %+v", o._statusCode, o.Payload)
}
func (o *AppendModToUserDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendModToUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
