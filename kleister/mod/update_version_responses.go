// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// UpdateVersionReader is a Reader for the UpdateVersion structure.
type UpdateVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdateVersionPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateVersionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateVersionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateVersionOK creates a UpdateVersionOK with default headers values
func NewUpdateVersionOK() *UpdateVersionOK {
	return &UpdateVersionOK{}
}

/* UpdateVersionOK describes a response with status code 200, with default header values.

The updated version details
*/
type UpdateVersionOK struct {
	Payload *models.Version
}

func (o *UpdateVersionOK) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/versions/{version_id}][%d] updateVersionOK  %+v", 200, o.Payload)
}
func (o *UpdateVersionOK) GetPayload() *models.Version {
	return o.Payload
}

func (o *UpdateVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Version)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVersionForbidden creates a UpdateVersionForbidden with default headers values
func NewUpdateVersionForbidden() *UpdateVersionForbidden {
	return &UpdateVersionForbidden{}
}

/* UpdateVersionForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type UpdateVersionForbidden struct {
	Payload *models.GeneralError
}

func (o *UpdateVersionForbidden) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/versions/{version_id}][%d] updateVersionForbidden  %+v", 403, o.Payload)
}
func (o *UpdateVersionForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVersionPreconditionFailed creates a UpdateVersionPreconditionFailed with default headers values
func NewUpdateVersionPreconditionFailed() *UpdateVersionPreconditionFailed {
	return &UpdateVersionPreconditionFailed{}
}

/* UpdateVersionPreconditionFailed describes a response with status code 412, with default header values.

Failed to parse request body
*/
type UpdateVersionPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *UpdateVersionPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/versions/{version_id}][%d] updateVersionPreconditionFailed  %+v", 412, o.Payload)
}
func (o *UpdateVersionPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateVersionPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVersionUnprocessableEntity creates a UpdateVersionUnprocessableEntity with default headers values
func NewUpdateVersionUnprocessableEntity() *UpdateVersionUnprocessableEntity {
	return &UpdateVersionUnprocessableEntity{}
}

/* UpdateVersionUnprocessableEntity describes a response with status code 422, with default header values.

Failed to validate request
*/
type UpdateVersionUnprocessableEntity struct {
	Payload *models.ValidationError
}

func (o *UpdateVersionUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/versions/{version_id}][%d] updateVersionUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *UpdateVersionUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *UpdateVersionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVersionDefault creates a UpdateVersionDefault with default headers values
func NewUpdateVersionDefault(code int) *UpdateVersionDefault {
	return &UpdateVersionDefault{
		_statusCode: code,
	}
}

/* UpdateVersionDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type UpdateVersionDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the update version default response
func (o *UpdateVersionDefault) Code() int {
	return o._statusCode
}

func (o *UpdateVersionDefault) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/versions/{version_id}][%d] UpdateVersion default  %+v", o._statusCode, o.Payload)
}
func (o *UpdateVersionDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdateVersionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
