// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// AppendModToTeamReader is a Reader for the AppendModToTeam structure.
type AppendModToTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendModToTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAppendModToTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAppendModToTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewAppendModToTeamPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAppendModToTeamUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAppendModToTeamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppendModToTeamOK creates a AppendModToTeamOK with default headers values
func NewAppendModToTeamOK() *AppendModToTeamOK {
	return &AppendModToTeamOK{}
}

/* AppendModToTeamOK describes a response with status code 200, with default header values.

Plain success message
*/
type AppendModToTeamOK struct {
	Payload *models.GeneralError
}

func (o *AppendModToTeamOK) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/teams][%d] appendModToTeamOK  %+v", 200, o.Payload)
}
func (o *AppendModToTeamOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendModToTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendModToTeamForbidden creates a AppendModToTeamForbidden with default headers values
func NewAppendModToTeamForbidden() *AppendModToTeamForbidden {
	return &AppendModToTeamForbidden{}
}

/* AppendModToTeamForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type AppendModToTeamForbidden struct {
	Payload *models.GeneralError
}

func (o *AppendModToTeamForbidden) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/teams][%d] appendModToTeamForbidden  %+v", 403, o.Payload)
}
func (o *AppendModToTeamForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendModToTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendModToTeamPreconditionFailed creates a AppendModToTeamPreconditionFailed with default headers values
func NewAppendModToTeamPreconditionFailed() *AppendModToTeamPreconditionFailed {
	return &AppendModToTeamPreconditionFailed{}
}

/* AppendModToTeamPreconditionFailed describes a response with status code 412, with default header values.

Failed to parse request body
*/
type AppendModToTeamPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *AppendModToTeamPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/teams][%d] appendModToTeamPreconditionFailed  %+v", 412, o.Payload)
}
func (o *AppendModToTeamPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendModToTeamPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendModToTeamUnprocessableEntity creates a AppendModToTeamUnprocessableEntity with default headers values
func NewAppendModToTeamUnprocessableEntity() *AppendModToTeamUnprocessableEntity {
	return &AppendModToTeamUnprocessableEntity{}
}

/* AppendModToTeamUnprocessableEntity describes a response with status code 422, with default header values.

Team is already assigned
*/
type AppendModToTeamUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *AppendModToTeamUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/teams][%d] appendModToTeamUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *AppendModToTeamUnprocessableEntity) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendModToTeamUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendModToTeamDefault creates a AppendModToTeamDefault with default headers values
func NewAppendModToTeamDefault(code int) *AppendModToTeamDefault {
	return &AppendModToTeamDefault{
		_statusCode: code,
	}
}

/* AppendModToTeamDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type AppendModToTeamDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the append mod to team default response
func (o *AppendModToTeamDefault) Code() int {
	return o._statusCode
}

func (o *AppendModToTeamDefault) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/teams][%d] AppendModToTeam default  %+v", o._statusCode, o.Payload)
}
func (o *AppendModToTeamDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendModToTeamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
