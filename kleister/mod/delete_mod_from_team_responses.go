// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// DeleteModFromTeamReader is a Reader for the DeleteModFromTeam structure.
type DeleteModFromTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteModFromTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteModFromTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteModFromTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteModFromTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteModFromTeamPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteModFromTeamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteModFromTeamOK creates a DeleteModFromTeamOK with default headers values
func NewDeleteModFromTeamOK() *DeleteModFromTeamOK {
	return &DeleteModFromTeamOK{}
}

/*
DeleteModFromTeamOK describes a response with status code 200, with default header values.

Plain success message
*/
type DeleteModFromTeamOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete mod from team o k response has a 2xx status code
func (o *DeleteModFromTeamOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete mod from team o k response has a 3xx status code
func (o *DeleteModFromTeamOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete mod from team o k response has a 4xx status code
func (o *DeleteModFromTeamOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete mod from team o k response has a 5xx status code
func (o *DeleteModFromTeamOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete mod from team o k response a status code equal to that given
func (o *DeleteModFromTeamOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete mod from team o k response
func (o *DeleteModFromTeamOK) Code() int {
	return 200
}

func (o *DeleteModFromTeamOK) Error() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/teams][%d] deleteModFromTeamOK  %+v", 200, o.Payload)
}

func (o *DeleteModFromTeamOK) String() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/teams][%d] deleteModFromTeamOK  %+v", 200, o.Payload)
}

func (o *DeleteModFromTeamOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteModFromTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteModFromTeamForbidden creates a DeleteModFromTeamForbidden with default headers values
func NewDeleteModFromTeamForbidden() *DeleteModFromTeamForbidden {
	return &DeleteModFromTeamForbidden{}
}

/*
DeleteModFromTeamForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type DeleteModFromTeamForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete mod from team forbidden response has a 2xx status code
func (o *DeleteModFromTeamForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete mod from team forbidden response has a 3xx status code
func (o *DeleteModFromTeamForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete mod from team forbidden response has a 4xx status code
func (o *DeleteModFromTeamForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete mod from team forbidden response has a 5xx status code
func (o *DeleteModFromTeamForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete mod from team forbidden response a status code equal to that given
func (o *DeleteModFromTeamForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete mod from team forbidden response
func (o *DeleteModFromTeamForbidden) Code() int {
	return 403
}

func (o *DeleteModFromTeamForbidden) Error() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/teams][%d] deleteModFromTeamForbidden  %+v", 403, o.Payload)
}

func (o *DeleteModFromTeamForbidden) String() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/teams][%d] deleteModFromTeamForbidden  %+v", 403, o.Payload)
}

func (o *DeleteModFromTeamForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteModFromTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteModFromTeamNotFound creates a DeleteModFromTeamNotFound with default headers values
func NewDeleteModFromTeamNotFound() *DeleteModFromTeamNotFound {
	return &DeleteModFromTeamNotFound{}
}

/*
DeleteModFromTeamNotFound describes a response with status code 404, with default header values.

Mod or team not found
*/
type DeleteModFromTeamNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete mod from team not found response has a 2xx status code
func (o *DeleteModFromTeamNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete mod from team not found response has a 3xx status code
func (o *DeleteModFromTeamNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete mod from team not found response has a 4xx status code
func (o *DeleteModFromTeamNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete mod from team not found response has a 5xx status code
func (o *DeleteModFromTeamNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete mod from team not found response a status code equal to that given
func (o *DeleteModFromTeamNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete mod from team not found response
func (o *DeleteModFromTeamNotFound) Code() int {
	return 404
}

func (o *DeleteModFromTeamNotFound) Error() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/teams][%d] deleteModFromTeamNotFound  %+v", 404, o.Payload)
}

func (o *DeleteModFromTeamNotFound) String() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/teams][%d] deleteModFromTeamNotFound  %+v", 404, o.Payload)
}

func (o *DeleteModFromTeamNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteModFromTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteModFromTeamPreconditionFailed creates a DeleteModFromTeamPreconditionFailed with default headers values
func NewDeleteModFromTeamPreconditionFailed() *DeleteModFromTeamPreconditionFailed {
	return &DeleteModFromTeamPreconditionFailed{}
}

/*
DeleteModFromTeamPreconditionFailed describes a response with status code 412, with default header values.

Team is not attached
*/
type DeleteModFromTeamPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete mod from team precondition failed response has a 2xx status code
func (o *DeleteModFromTeamPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete mod from team precondition failed response has a 3xx status code
func (o *DeleteModFromTeamPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete mod from team precondition failed response has a 4xx status code
func (o *DeleteModFromTeamPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete mod from team precondition failed response has a 5xx status code
func (o *DeleteModFromTeamPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete mod from team precondition failed response a status code equal to that given
func (o *DeleteModFromTeamPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete mod from team precondition failed response
func (o *DeleteModFromTeamPreconditionFailed) Code() int {
	return 412
}

func (o *DeleteModFromTeamPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/teams][%d] deleteModFromTeamPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteModFromTeamPreconditionFailed) String() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/teams][%d] deleteModFromTeamPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteModFromTeamPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteModFromTeamPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteModFromTeamDefault creates a DeleteModFromTeamDefault with default headers values
func NewDeleteModFromTeamDefault(code int) *DeleteModFromTeamDefault {
	return &DeleteModFromTeamDefault{
		_statusCode: code,
	}
}

/*
DeleteModFromTeamDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type DeleteModFromTeamDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this delete mod from team default response has a 2xx status code
func (o *DeleteModFromTeamDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete mod from team default response has a 3xx status code
func (o *DeleteModFromTeamDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete mod from team default response has a 4xx status code
func (o *DeleteModFromTeamDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete mod from team default response has a 5xx status code
func (o *DeleteModFromTeamDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete mod from team default response a status code equal to that given
func (o *DeleteModFromTeamDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete mod from team default response
func (o *DeleteModFromTeamDefault) Code() int {
	return o._statusCode
}

func (o *DeleteModFromTeamDefault) Error() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/teams][%d] DeleteModFromTeam default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteModFromTeamDefault) String() string {
	return fmt.Sprintf("[DELETE /mods/{mod_id}/teams][%d] DeleteModFromTeam default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteModFromTeamDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteModFromTeamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
