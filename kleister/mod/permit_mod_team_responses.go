// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// PermitModTeamReader is a Reader for the PermitModTeam structure.
type PermitModTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PermitModTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPermitModTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPermitModTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPermitModTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPermitModTeamPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPermitModTeamUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPermitModTeamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPermitModTeamOK creates a PermitModTeamOK with default headers values
func NewPermitModTeamOK() *PermitModTeamOK {
	return &PermitModTeamOK{}
}

/*
PermitModTeamOK describes a response with status code 200, with default header values.

Plain success message
*/
type PermitModTeamOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit mod team o k response has a 2xx status code
func (o *PermitModTeamOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this permit mod team o k response has a 3xx status code
func (o *PermitModTeamOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit mod team o k response has a 4xx status code
func (o *PermitModTeamOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this permit mod team o k response has a 5xx status code
func (o *PermitModTeamOK) IsServerError() bool {
	return false
}

// IsCode returns true when this permit mod team o k response a status code equal to that given
func (o *PermitModTeamOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the permit mod team o k response
func (o *PermitModTeamOK) Code() int {
	return 200
}

func (o *PermitModTeamOK) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/teams][%d] permitModTeamOK  %+v", 200, o.Payload)
}

func (o *PermitModTeamOK) String() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/teams][%d] permitModTeamOK  %+v", 200, o.Payload)
}

func (o *PermitModTeamOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitModTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitModTeamForbidden creates a PermitModTeamForbidden with default headers values
func NewPermitModTeamForbidden() *PermitModTeamForbidden {
	return &PermitModTeamForbidden{}
}

/*
PermitModTeamForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type PermitModTeamForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit mod team forbidden response has a 2xx status code
func (o *PermitModTeamForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit mod team forbidden response has a 3xx status code
func (o *PermitModTeamForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit mod team forbidden response has a 4xx status code
func (o *PermitModTeamForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit mod team forbidden response has a 5xx status code
func (o *PermitModTeamForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this permit mod team forbidden response a status code equal to that given
func (o *PermitModTeamForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the permit mod team forbidden response
func (o *PermitModTeamForbidden) Code() int {
	return 403
}

func (o *PermitModTeamForbidden) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/teams][%d] permitModTeamForbidden  %+v", 403, o.Payload)
}

func (o *PermitModTeamForbidden) String() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/teams][%d] permitModTeamForbidden  %+v", 403, o.Payload)
}

func (o *PermitModTeamForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitModTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitModTeamNotFound creates a PermitModTeamNotFound with default headers values
func NewPermitModTeamNotFound() *PermitModTeamNotFound {
	return &PermitModTeamNotFound{}
}

/*
PermitModTeamNotFound describes a response with status code 404, with default header values.

Mod or team not found
*/
type PermitModTeamNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit mod team not found response has a 2xx status code
func (o *PermitModTeamNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit mod team not found response has a 3xx status code
func (o *PermitModTeamNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit mod team not found response has a 4xx status code
func (o *PermitModTeamNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit mod team not found response has a 5xx status code
func (o *PermitModTeamNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this permit mod team not found response a status code equal to that given
func (o *PermitModTeamNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the permit mod team not found response
func (o *PermitModTeamNotFound) Code() int {
	return 404
}

func (o *PermitModTeamNotFound) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/teams][%d] permitModTeamNotFound  %+v", 404, o.Payload)
}

func (o *PermitModTeamNotFound) String() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/teams][%d] permitModTeamNotFound  %+v", 404, o.Payload)
}

func (o *PermitModTeamNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitModTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitModTeamPreconditionFailed creates a PermitModTeamPreconditionFailed with default headers values
func NewPermitModTeamPreconditionFailed() *PermitModTeamPreconditionFailed {
	return &PermitModTeamPreconditionFailed{}
}

/*
PermitModTeamPreconditionFailed describes a response with status code 412, with default header values.

Team is not attached
*/
type PermitModTeamPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit mod team precondition failed response has a 2xx status code
func (o *PermitModTeamPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit mod team precondition failed response has a 3xx status code
func (o *PermitModTeamPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit mod team precondition failed response has a 4xx status code
func (o *PermitModTeamPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit mod team precondition failed response has a 5xx status code
func (o *PermitModTeamPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this permit mod team precondition failed response a status code equal to that given
func (o *PermitModTeamPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the permit mod team precondition failed response
func (o *PermitModTeamPreconditionFailed) Code() int {
	return 412
}

func (o *PermitModTeamPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/teams][%d] permitModTeamPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitModTeamPreconditionFailed) String() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/teams][%d] permitModTeamPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitModTeamPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitModTeamPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitModTeamUnprocessableEntity creates a PermitModTeamUnprocessableEntity with default headers values
func NewPermitModTeamUnprocessableEntity() *PermitModTeamUnprocessableEntity {
	return &PermitModTeamUnprocessableEntity{}
}

/*
PermitModTeamUnprocessableEntity describes a response with status code 422, with default header values.

Failed to validate request
*/
type PermitModTeamUnprocessableEntity struct {
	Payload *models.ValidationError
}

// IsSuccess returns true when this permit mod team unprocessable entity response has a 2xx status code
func (o *PermitModTeamUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit mod team unprocessable entity response has a 3xx status code
func (o *PermitModTeamUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit mod team unprocessable entity response has a 4xx status code
func (o *PermitModTeamUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit mod team unprocessable entity response has a 5xx status code
func (o *PermitModTeamUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this permit mod team unprocessable entity response a status code equal to that given
func (o *PermitModTeamUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the permit mod team unprocessable entity response
func (o *PermitModTeamUnprocessableEntity) Code() int {
	return 422
}

func (o *PermitModTeamUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/teams][%d] permitModTeamUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitModTeamUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/teams][%d] permitModTeamUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitModTeamUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *PermitModTeamUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitModTeamDefault creates a PermitModTeamDefault with default headers values
func NewPermitModTeamDefault(code int) *PermitModTeamDefault {
	return &PermitModTeamDefault{
		_statusCode: code,
	}
}

/*
PermitModTeamDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type PermitModTeamDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this permit mod team default response has a 2xx status code
func (o *PermitModTeamDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this permit mod team default response has a 3xx status code
func (o *PermitModTeamDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this permit mod team default response has a 4xx status code
func (o *PermitModTeamDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this permit mod team default response has a 5xx status code
func (o *PermitModTeamDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this permit mod team default response a status code equal to that given
func (o *PermitModTeamDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the permit mod team default response
func (o *PermitModTeamDefault) Code() int {
	return o._statusCode
}

func (o *PermitModTeamDefault) Error() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/teams][%d] PermitModTeam default  %+v", o._statusCode, o.Payload)
}

func (o *PermitModTeamDefault) String() string {
	return fmt.Sprintf("[PUT /mods/{mod_id}/teams][%d] PermitModTeam default  %+v", o._statusCode, o.Payload)
}

func (o *PermitModTeamDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitModTeamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
