// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// ListVersionBuildsReader is a Reader for the ListVersionBuilds structure.
type ListVersionBuildsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListVersionBuildsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListVersionBuildsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewListVersionBuildsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListVersionBuildsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListVersionBuildsOK creates a ListVersionBuildsOK with default headers values
func NewListVersionBuildsOK() *ListVersionBuildsOK {
	return &ListVersionBuildsOK{}
}

/* ListVersionBuildsOK describes a response with status code 200, with default header values.

A collection of version builds
*/
type ListVersionBuildsOK struct {
	Payload []*models.BuildVersion
}

func (o *ListVersionBuildsOK) Error() string {
	return fmt.Sprintf("[GET /mods/{mod_id}/versions/{version_id}/builds][%d] listVersionBuildsOK  %+v", 200, o.Payload)
}
func (o *ListVersionBuildsOK) GetPayload() []*models.BuildVersion {
	return o.Payload
}

func (o *ListVersionBuildsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVersionBuildsForbidden creates a ListVersionBuildsForbidden with default headers values
func NewListVersionBuildsForbidden() *ListVersionBuildsForbidden {
	return &ListVersionBuildsForbidden{}
}

/* ListVersionBuildsForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type ListVersionBuildsForbidden struct {
	Payload *models.GeneralError
}

func (o *ListVersionBuildsForbidden) Error() string {
	return fmt.Sprintf("[GET /mods/{mod_id}/versions/{version_id}/builds][%d] listVersionBuildsForbidden  %+v", 403, o.Payload)
}
func (o *ListVersionBuildsForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ListVersionBuildsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVersionBuildsDefault creates a ListVersionBuildsDefault with default headers values
func NewListVersionBuildsDefault(code int) *ListVersionBuildsDefault {
	return &ListVersionBuildsDefault{
		_statusCode: code,
	}
}

/* ListVersionBuildsDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type ListVersionBuildsDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the list version builds default response
func (o *ListVersionBuildsDefault) Code() int {
	return o._statusCode
}

func (o *ListVersionBuildsDefault) Error() string {
	return fmt.Sprintf("[GET /mods/{mod_id}/versions/{version_id}/builds][%d] ListVersionBuilds default  %+v", o._statusCode, o.Payload)
}
func (o *ListVersionBuildsDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ListVersionBuildsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
