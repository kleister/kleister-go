// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// AttachModToUserReader is a Reader for the AttachModToUser structure.
type AttachModToUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AttachModToUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAttachModToUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAttachModToUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAttachModToUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewAttachModToUserPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAttachModToUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAttachModToUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAttachModToUserOK creates a AttachModToUserOK with default headers values
func NewAttachModToUserOK() *AttachModToUserOK {
	return &AttachModToUserOK{}
}

/*
AttachModToUserOK describes a response with status code 200, with default header values.

Plain success message
*/
type AttachModToUserOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach mod to user o k response has a 2xx status code
func (o *AttachModToUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this attach mod to user o k response has a 3xx status code
func (o *AttachModToUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach mod to user o k response has a 4xx status code
func (o *AttachModToUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this attach mod to user o k response has a 5xx status code
func (o *AttachModToUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this attach mod to user o k response a status code equal to that given
func (o *AttachModToUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the attach mod to user o k response
func (o *AttachModToUserOK) Code() int {
	return 200
}

func (o *AttachModToUserOK) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] attachModToUserOK  %+v", 200, o.Payload)
}

func (o *AttachModToUserOK) String() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] attachModToUserOK  %+v", 200, o.Payload)
}

func (o *AttachModToUserOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachModToUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachModToUserForbidden creates a AttachModToUserForbidden with default headers values
func NewAttachModToUserForbidden() *AttachModToUserForbidden {
	return &AttachModToUserForbidden{}
}

/*
AttachModToUserForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type AttachModToUserForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach mod to user forbidden response has a 2xx status code
func (o *AttachModToUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach mod to user forbidden response has a 3xx status code
func (o *AttachModToUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach mod to user forbidden response has a 4xx status code
func (o *AttachModToUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach mod to user forbidden response has a 5xx status code
func (o *AttachModToUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this attach mod to user forbidden response a status code equal to that given
func (o *AttachModToUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the attach mod to user forbidden response
func (o *AttachModToUserForbidden) Code() int {
	return 403
}

func (o *AttachModToUserForbidden) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] attachModToUserForbidden  %+v", 403, o.Payload)
}

func (o *AttachModToUserForbidden) String() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] attachModToUserForbidden  %+v", 403, o.Payload)
}

func (o *AttachModToUserForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachModToUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachModToUserNotFound creates a AttachModToUserNotFound with default headers values
func NewAttachModToUserNotFound() *AttachModToUserNotFound {
	return &AttachModToUserNotFound{}
}

/*
AttachModToUserNotFound describes a response with status code 404, with default header values.

Mod or user not found
*/
type AttachModToUserNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach mod to user not found response has a 2xx status code
func (o *AttachModToUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach mod to user not found response has a 3xx status code
func (o *AttachModToUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach mod to user not found response has a 4xx status code
func (o *AttachModToUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach mod to user not found response has a 5xx status code
func (o *AttachModToUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this attach mod to user not found response a status code equal to that given
func (o *AttachModToUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the attach mod to user not found response
func (o *AttachModToUserNotFound) Code() int {
	return 404
}

func (o *AttachModToUserNotFound) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] attachModToUserNotFound  %+v", 404, o.Payload)
}

func (o *AttachModToUserNotFound) String() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] attachModToUserNotFound  %+v", 404, o.Payload)
}

func (o *AttachModToUserNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachModToUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachModToUserPreconditionFailed creates a AttachModToUserPreconditionFailed with default headers values
func NewAttachModToUserPreconditionFailed() *AttachModToUserPreconditionFailed {
	return &AttachModToUserPreconditionFailed{}
}

/*
AttachModToUserPreconditionFailed describes a response with status code 412, with default header values.

User is already attached
*/
type AttachModToUserPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach mod to user precondition failed response has a 2xx status code
func (o *AttachModToUserPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach mod to user precondition failed response has a 3xx status code
func (o *AttachModToUserPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach mod to user precondition failed response has a 4xx status code
func (o *AttachModToUserPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach mod to user precondition failed response has a 5xx status code
func (o *AttachModToUserPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this attach mod to user precondition failed response a status code equal to that given
func (o *AttachModToUserPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the attach mod to user precondition failed response
func (o *AttachModToUserPreconditionFailed) Code() int {
	return 412
}

func (o *AttachModToUserPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] attachModToUserPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AttachModToUserPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] attachModToUserPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AttachModToUserPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachModToUserPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachModToUserUnprocessableEntity creates a AttachModToUserUnprocessableEntity with default headers values
func NewAttachModToUserUnprocessableEntity() *AttachModToUserUnprocessableEntity {
	return &AttachModToUserUnprocessableEntity{}
}

/*
AttachModToUserUnprocessableEntity describes a response with status code 422, with default header values.

Failed to validate request
*/
type AttachModToUserUnprocessableEntity struct {
	Payload *models.ValidationError
}

// IsSuccess returns true when this attach mod to user unprocessable entity response has a 2xx status code
func (o *AttachModToUserUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach mod to user unprocessable entity response has a 3xx status code
func (o *AttachModToUserUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach mod to user unprocessable entity response has a 4xx status code
func (o *AttachModToUserUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach mod to user unprocessable entity response has a 5xx status code
func (o *AttachModToUserUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this attach mod to user unprocessable entity response a status code equal to that given
func (o *AttachModToUserUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the attach mod to user unprocessable entity response
func (o *AttachModToUserUnprocessableEntity) Code() int {
	return 422
}

func (o *AttachModToUserUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] attachModToUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AttachModToUserUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] attachModToUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AttachModToUserUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *AttachModToUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachModToUserDefault creates a AttachModToUserDefault with default headers values
func NewAttachModToUserDefault(code int) *AttachModToUserDefault {
	return &AttachModToUserDefault{
		_statusCode: code,
	}
}

/*
AttachModToUserDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type AttachModToUserDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this attach mod to user default response has a 2xx status code
func (o *AttachModToUserDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this attach mod to user default response has a 3xx status code
func (o *AttachModToUserDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this attach mod to user default response has a 4xx status code
func (o *AttachModToUserDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this attach mod to user default response has a 5xx status code
func (o *AttachModToUserDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this attach mod to user default response a status code equal to that given
func (o *AttachModToUserDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the attach mod to user default response
func (o *AttachModToUserDefault) Code() int {
	return o._statusCode
}

func (o *AttachModToUserDefault) Error() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] AttachModToUser default  %+v", o._statusCode, o.Payload)
}

func (o *AttachModToUserDefault) String() string {
	return fmt.Sprintf("[POST /mods/{mod_id}/users][%d] AttachModToUser default  %+v", o._statusCode, o.Payload)
}

func (o *AttachModToUserDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachModToUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
