// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// ExternalCallbackReader is a Reader for the ExternalCallback structure.
type ExternalCallbackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExternalCallbackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 307:
		result := NewExternalCallbackTemporaryRedirect()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExternalCallbackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewExternalCallbackPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewExternalCallbackDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExternalCallbackTemporaryRedirect creates a ExternalCallbackTemporaryRedirect with default headers values
func NewExternalCallbackTemporaryRedirect() *ExternalCallbackTemporaryRedirect {
	return &ExternalCallbackTemporaryRedirect{}
}

/*
ExternalCallbackTemporaryRedirect describes a response with status code 307, with default header values.

Redirect to root of the application
*/
type ExternalCallbackTemporaryRedirect struct {
}

// IsSuccess returns true when this external callback temporary redirect response has a 2xx status code
func (o *ExternalCallbackTemporaryRedirect) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this external callback temporary redirect response has a 3xx status code
func (o *ExternalCallbackTemporaryRedirect) IsRedirect() bool {
	return true
}

// IsClientError returns true when this external callback temporary redirect response has a 4xx status code
func (o *ExternalCallbackTemporaryRedirect) IsClientError() bool {
	return false
}

// IsServerError returns true when this external callback temporary redirect response has a 5xx status code
func (o *ExternalCallbackTemporaryRedirect) IsServerError() bool {
	return false
}

// IsCode returns true when this external callback temporary redirect response a status code equal to that given
func (o *ExternalCallbackTemporaryRedirect) IsCode(code int) bool {
	return code == 307
}

// Code gets the status code for the external callback temporary redirect response
func (o *ExternalCallbackTemporaryRedirect) Code() int {
	return 307
}

func (o *ExternalCallbackTemporaryRedirect) Error() string {
	return fmt.Sprintf("[GET /auth/{provider}/callback][%d] externalCallbackTemporaryRedirect ", 307)
}

func (o *ExternalCallbackTemporaryRedirect) String() string {
	return fmt.Sprintf("[GET /auth/{provider}/callback][%d] externalCallbackTemporaryRedirect ", 307)
}

func (o *ExternalCallbackTemporaryRedirect) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExternalCallbackNotFound creates a ExternalCallbackNotFound with default headers values
func NewExternalCallbackNotFound() *ExternalCallbackNotFound {
	return &ExternalCallbackNotFound{}
}

/*
ExternalCallbackNotFound describes a response with status code 404, with default header values.

Provider identifier is unknown
*/
type ExternalCallbackNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this external callback not found response has a 2xx status code
func (o *ExternalCallbackNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this external callback not found response has a 3xx status code
func (o *ExternalCallbackNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this external callback not found response has a 4xx status code
func (o *ExternalCallbackNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this external callback not found response has a 5xx status code
func (o *ExternalCallbackNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this external callback not found response a status code equal to that given
func (o *ExternalCallbackNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the external callback not found response
func (o *ExternalCallbackNotFound) Code() int {
	return 404
}

func (o *ExternalCallbackNotFound) Error() string {
	return fmt.Sprintf("[GET /auth/{provider}/callback][%d] externalCallbackNotFound  %+v", 404, o.Payload)
}

func (o *ExternalCallbackNotFound) String() string {
	return fmt.Sprintf("[GET /auth/{provider}/callback][%d] externalCallbackNotFound  %+v", 404, o.Payload)
}

func (o *ExternalCallbackNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ExternalCallbackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExternalCallbackPreconditionFailed creates a ExternalCallbackPreconditionFailed with default headers values
func NewExternalCallbackPreconditionFailed() *ExternalCallbackPreconditionFailed {
	return &ExternalCallbackPreconditionFailed{}
}

/*
ExternalCallbackPreconditionFailed describes a response with status code 412, with default header values.

Failed to initialize account
*/
type ExternalCallbackPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this external callback precondition failed response has a 2xx status code
func (o *ExternalCallbackPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this external callback precondition failed response has a 3xx status code
func (o *ExternalCallbackPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this external callback precondition failed response has a 4xx status code
func (o *ExternalCallbackPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this external callback precondition failed response has a 5xx status code
func (o *ExternalCallbackPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this external callback precondition failed response a status code equal to that given
func (o *ExternalCallbackPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the external callback precondition failed response
func (o *ExternalCallbackPreconditionFailed) Code() int {
	return 412
}

func (o *ExternalCallbackPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /auth/{provider}/callback][%d] externalCallbackPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ExternalCallbackPreconditionFailed) String() string {
	return fmt.Sprintf("[GET /auth/{provider}/callback][%d] externalCallbackPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ExternalCallbackPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ExternalCallbackPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExternalCallbackDefault creates a ExternalCallbackDefault with default headers values
func NewExternalCallbackDefault(code int) *ExternalCallbackDefault {
	return &ExternalCallbackDefault{
		_statusCode: code,
	}
}

/*
ExternalCallbackDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type ExternalCallbackDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this external callback default response has a 2xx status code
func (o *ExternalCallbackDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this external callback default response has a 3xx status code
func (o *ExternalCallbackDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this external callback default response has a 4xx status code
func (o *ExternalCallbackDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this external callback default response has a 5xx status code
func (o *ExternalCallbackDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this external callback default response a status code equal to that given
func (o *ExternalCallbackDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the external callback default response
func (o *ExternalCallbackDefault) Code() int {
	return o._statusCode
}

func (o *ExternalCallbackDefault) Error() string {
	return fmt.Sprintf("[GET /auth/{provider}/callback][%d] ExternalCallback default  %+v", o._statusCode, o.Payload)
}

func (o *ExternalCallbackDefault) String() string {
	return fmt.Sprintf("[GET /auth/{provider}/callback][%d] ExternalCallback default  %+v", o._statusCode, o.Payload)
}

func (o *ExternalCallbackDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ExternalCallbackDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
