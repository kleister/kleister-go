// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// LogoutUserReader is a Reader for the LogoutUser structure.
type LogoutUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LogoutUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLogoutUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLogoutUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewLogoutUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLogoutUserOK creates a LogoutUserOK with default headers values
func NewLogoutUserOK() *LogoutUserOK {
	return &LogoutUserOK{}
}

/*
LogoutUserOK describes a response with status code 200, with default header values.

Successfully logout of the user
*/
type LogoutUserOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this logout user o k response has a 2xx status code
func (o *LogoutUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this logout user o k response has a 3xx status code
func (o *LogoutUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this logout user o k response has a 4xx status code
func (o *LogoutUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this logout user o k response has a 5xx status code
func (o *LogoutUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this logout user o k response a status code equal to that given
func (o *LogoutUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the logout user o k response
func (o *LogoutUserOK) Code() int {
	return 200
}

func (o *LogoutUserOK) Error() string {
	return fmt.Sprintf("[GET /auth/logout][%d] logoutUserOK  %+v", 200, o.Payload)
}

func (o *LogoutUserOK) String() string {
	return fmt.Sprintf("[GET /auth/logout][%d] logoutUserOK  %+v", 200, o.Payload)
}

func (o *LogoutUserOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *LogoutUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogoutUserUnauthorized creates a LogoutUserUnauthorized with default headers values
func NewLogoutUserUnauthorized() *LogoutUserUnauthorized {
	return &LogoutUserUnauthorized{}
}

/*
LogoutUserUnauthorized describes a response with status code 401, with default header values.

User is not even authenticated
*/
type LogoutUserUnauthorized struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this logout user unauthorized response has a 2xx status code
func (o *LogoutUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this logout user unauthorized response has a 3xx status code
func (o *LogoutUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this logout user unauthorized response has a 4xx status code
func (o *LogoutUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this logout user unauthorized response has a 5xx status code
func (o *LogoutUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this logout user unauthorized response a status code equal to that given
func (o *LogoutUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the logout user unauthorized response
func (o *LogoutUserUnauthorized) Code() int {
	return 401
}

func (o *LogoutUserUnauthorized) Error() string {
	return fmt.Sprintf("[GET /auth/logout][%d] logoutUserUnauthorized  %+v", 401, o.Payload)
}

func (o *LogoutUserUnauthorized) String() string {
	return fmt.Sprintf("[GET /auth/logout][%d] logoutUserUnauthorized  %+v", 401, o.Payload)
}

func (o *LogoutUserUnauthorized) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *LogoutUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogoutUserDefault creates a LogoutUserDefault with default headers values
func NewLogoutUserDefault(code int) *LogoutUserDefault {
	return &LogoutUserDefault{
		_statusCode: code,
	}
}

/*
LogoutUserDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type LogoutUserDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this logout user default response has a 2xx status code
func (o *LogoutUserDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this logout user default response has a 3xx status code
func (o *LogoutUserDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this logout user default response has a 4xx status code
func (o *LogoutUserDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this logout user default response has a 5xx status code
func (o *LogoutUserDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this logout user default response a status code equal to that given
func (o *LogoutUserDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the logout user default response
func (o *LogoutUserDefault) Code() int {
	return o._statusCode
}

func (o *LogoutUserDefault) Error() string {
	return fmt.Sprintf("[GET /auth/logout][%d] LogoutUser default  %+v", o._statusCode, o.Payload)
}

func (o *LogoutUserDefault) String() string {
	return fmt.Sprintf("[GET /auth/logout][%d] LogoutUser default  %+v", o._statusCode, o.Payload)
}

func (o *LogoutUserDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *LogoutUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
