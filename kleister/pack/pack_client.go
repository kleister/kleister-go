// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pack API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pack API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AppendBuildToVersion(params *AppendBuildToVersionParams, opts ...ClientOption) (*AppendBuildToVersionOK, error)

	AppendPackToTeam(params *AppendPackToTeamParams, opts ...ClientOption) (*AppendPackToTeamOK, error)

	AppendPackToUser(params *AppendPackToUserParams, opts ...ClientOption) (*AppendPackToUserOK, error)

	CreateBuild(params *CreateBuildParams, opts ...ClientOption) (*CreateBuildOK, error)

	CreatePack(params *CreatePackParams, opts ...ClientOption) (*CreatePackOK, error)

	DeleteBuild(params *DeleteBuildParams, opts ...ClientOption) (*DeleteBuildOK, error)

	DeleteBuildFromVersion(params *DeleteBuildFromVersionParams, opts ...ClientOption) (*DeleteBuildFromVersionOK, error)

	DeletePack(params *DeletePackParams, opts ...ClientOption) (*DeletePackOK, error)

	DeletePackFromTeam(params *DeletePackFromTeamParams, opts ...ClientOption) (*DeletePackFromTeamOK, error)

	DeletePackFromUser(params *DeletePackFromUserParams, opts ...ClientOption) (*DeletePackFromUserOK, error)

	ListBuildVersions(params *ListBuildVersionsParams, opts ...ClientOption) (*ListBuildVersionsOK, error)

	ListBuilds(params *ListBuildsParams, opts ...ClientOption) (*ListBuildsOK, error)

	ListPackTeams(params *ListPackTeamsParams, opts ...ClientOption) (*ListPackTeamsOK, error)

	ListPackUsers(params *ListPackUsersParams, opts ...ClientOption) (*ListPackUsersOK, error)

	ListPacks(params *ListPacksParams, opts ...ClientOption) (*ListPacksOK, error)

	PermitPackTeam(params *PermitPackTeamParams, opts ...ClientOption) (*PermitPackTeamOK, error)

	PermitPackUser(params *PermitPackUserParams, opts ...ClientOption) (*PermitPackUserOK, error)

	ShowBuild(params *ShowBuildParams, opts ...ClientOption) (*ShowBuildOK, error)

	ShowPack(params *ShowPackParams, opts ...ClientOption) (*ShowPackOK, error)

	UpdateBuild(params *UpdateBuildParams, opts ...ClientOption) (*UpdateBuildOK, error)

	UpdatePack(params *UpdatePackParams, opts ...ClientOption) (*UpdatePackOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AppendBuildToVersion assigns a version to a build
*/
func (a *Client) AppendBuildToVersion(params *AppendBuildToVersionParams, opts ...ClientOption) (*AppendBuildToVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendBuildToVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppendBuildToVersion",
		Method:             "POST",
		PathPattern:        "/packs/{pack_id}/builds/{build_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppendBuildToVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppendBuildToVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppendBuildToVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AppendPackToTeam assigns a team to pack
*/
func (a *Client) AppendPackToTeam(params *AppendPackToTeamParams, opts ...ClientOption) (*AppendPackToTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendPackToTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppendPackToTeam",
		Method:             "POST",
		PathPattern:        "/packs/{pack_id}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppendPackToTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppendPackToTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppendPackToTeamDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AppendPackToUser assigns a user to pack
*/
func (a *Client) AppendPackToUser(params *AppendPackToUserParams, opts ...ClientOption) (*AppendPackToUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendPackToUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppendPackToUser",
		Method:             "POST",
		PathPattern:        "/packs/{pack_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppendPackToUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppendPackToUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppendPackToUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateBuild creates a new build for a pack
*/
func (a *Client) CreateBuild(params *CreateBuildParams, opts ...ClientOption) (*CreateBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateBuild",
		Method:             "POST",
		PathPattern:        "/packs/{pack_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateBuildDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreatePack creates a new pack
*/
func (a *Client) CreatePack(params *CreatePackParams, opts ...ClientOption) (*CreatePackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePack",
		Method:             "POST",
		PathPattern:        "/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreatePackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreatePackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteBuild deletes a specific build for a pack
*/
func (a *Client) DeleteBuild(params *DeleteBuildParams, opts ...ClientOption) (*DeleteBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBuild",
		Method:             "DELETE",
		PathPattern:        "/packs/{pack_id}/builds/{build_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteBuildDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteBuildFromVersion unlinks a version from a build
*/
func (a *Client) DeleteBuildFromVersion(params *DeleteBuildFromVersionParams, opts ...ClientOption) (*DeleteBuildFromVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildFromVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBuildFromVersion",
		Method:             "DELETE",
		PathPattern:        "/packs/{pack_id}/builds/{build_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteBuildFromVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBuildFromVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteBuildFromVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeletePack deletes a specific pack
*/
func (a *Client) DeletePack(params *DeletePackParams, opts ...ClientOption) (*DeletePackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePack",
		Method:             "DELETE",
		PathPattern:        "/packs/{pack_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeletePackFromTeam removes a team from pack
*/
func (a *Client) DeletePackFromTeam(params *DeletePackFromTeamParams, opts ...ClientOption) (*DeletePackFromTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackFromTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePackFromTeam",
		Method:             "DELETE",
		PathPattern:        "/packs/{pack_id}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePackFromTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePackFromTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePackFromTeamDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeletePackFromUser removes a user from pack
*/
func (a *Client) DeletePackFromUser(params *DeletePackFromUserParams, opts ...ClientOption) (*DeletePackFromUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackFromUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePackFromUser",
		Method:             "DELETE",
		PathPattern:        "/packs/{pack_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePackFromUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePackFromUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePackFromUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListBuildVersions fetches all versions assigned to build
*/
func (a *Client) ListBuildVersions(params *ListBuildVersionsParams, opts ...ClientOption) (*ListBuildVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBuildVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListBuildVersions",
		Method:             "GET",
		PathPattern:        "/packs/{pack_id}/builds/{build_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListBuildVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBuildVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListBuildVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListBuilds fetches all available builds for a pack
*/
func (a *Client) ListBuilds(params *ListBuildsParams, opts ...ClientOption) (*ListBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListBuilds",
		Method:             "GET",
		PathPattern:        "/packs/{pack_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListBuildsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListPackTeams fetches all teams assigned to pack
*/
func (a *Client) ListPackTeams(params *ListPackTeamsParams, opts ...ClientOption) (*ListPackTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPackTeamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPackTeams",
		Method:             "GET",
		PathPattern:        "/packs/{pack_id}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListPackTeamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPackTeamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListPackTeamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListPackUsers fetches all users assigned to pack
*/
func (a *Client) ListPackUsers(params *ListPackUsersParams, opts ...ClientOption) (*ListPackUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPackUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPackUsers",
		Method:             "GET",
		PathPattern:        "/packs/{pack_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListPackUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPackUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListPackUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListPacks fetches all available packs
*/
func (a *Client) ListPacks(params *ListPacksParams, opts ...ClientOption) (*ListPacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPacksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPacks",
		Method:             "GET",
		PathPattern:        "/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListPacksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListPacksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PermitPackTeam updates team perms for pack
*/
func (a *Client) PermitPackTeam(params *PermitPackTeamParams, opts ...ClientOption) (*PermitPackTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPermitPackTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PermitPackTeam",
		Method:             "PUT",
		PathPattern:        "/packs/{pack_id}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PermitPackTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PermitPackTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PermitPackTeamDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PermitPackUser updates user perms for pack
*/
func (a *Client) PermitPackUser(params *PermitPackUserParams, opts ...ClientOption) (*PermitPackUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPermitPackUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PermitPackUser",
		Method:             "PUT",
		PathPattern:        "/packs/{pack_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PermitPackUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PermitPackUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PermitPackUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ShowBuild fetches a specific build for a pack
*/
func (a *Client) ShowBuild(params *ShowBuildParams, opts ...ClientOption) (*ShowBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowBuild",
		Method:             "GET",
		PathPattern:        "/packs/{pack_id}/builds/{build_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ShowBuildDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ShowPack fetches a specific pack
*/
func (a *Client) ShowPack(params *ShowPackParams, opts ...ClientOption) (*ShowPackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowPackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowPack",
		Method:             "GET",
		PathPattern:        "/packs/{pack_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowPackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowPackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ShowPackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateBuild updates a specific build for a pack
*/
func (a *Client) UpdateBuild(params *UpdateBuildParams, opts ...ClientOption) (*UpdateBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateBuild",
		Method:             "PUT",
		PathPattern:        "/packs/{pack_id}/builds/{build_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateBuildDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdatePack updates a specific pack
*/
func (a *Client) UpdatePack(params *UpdatePackParams, opts ...ClientOption) (*UpdatePackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdatePack",
		Method:             "PUT",
		PathPattern:        "/packs/{pack_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdatePackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdatePackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
