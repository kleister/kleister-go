// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new pack API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pack API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AppendBuildToVersion assigns a version to a build
*/
func (a *Client) AppendBuildToVersion(params *AppendBuildToVersionParams) (*AppendBuildToVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendBuildToVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AppendBuildToVersion",
		Method:             "POST",
		PathPattern:        "/packs/{pack_id}/builds/{build_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppendBuildToVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AppendBuildToVersionOK), nil

}

/*
AppendPackToTeam assigns a team to pack
*/
func (a *Client) AppendPackToTeam(params *AppendPackToTeamParams) (*AppendPackToTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendPackToTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AppendPackToTeam",
		Method:             "POST",
		PathPattern:        "/packs/{pack_id}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppendPackToTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AppendPackToTeamOK), nil

}

/*
AppendPackToUser assigns a user to pack
*/
func (a *Client) AppendPackToUser(params *AppendPackToUserParams) (*AppendPackToUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendPackToUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AppendPackToUser",
		Method:             "POST",
		PathPattern:        "/packs/{pack_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppendPackToUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AppendPackToUserOK), nil

}

/*
CreateBuild creates a new build for a pack
*/
func (a *Client) CreateBuild(params *CreateBuildParams) (*CreateBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateBuild",
		Method:             "POST",
		PathPattern:        "/packs/{pack_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateBuildOK), nil

}

/*
CreatePack creates a new pack
*/
func (a *Client) CreatePack(params *CreatePackParams) (*CreatePackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePack",
		Method:             "POST",
		PathPattern:        "/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreatePackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePackOK), nil

}

/*
DeleteBuild deletes a specific build for a pack
*/
func (a *Client) DeleteBuild(params *DeleteBuildParams) (*DeleteBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBuild",
		Method:             "DELETE",
		PathPattern:        "/packs/{pack_id}/builds/{build_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBuildOK), nil

}

/*
DeleteBuildFromVersion unlinks a version from a build
*/
func (a *Client) DeleteBuildFromVersion(params *DeleteBuildFromVersionParams) (*DeleteBuildFromVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildFromVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBuildFromVersion",
		Method:             "DELETE",
		PathPattern:        "/packs/{pack_id}/builds/{build_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteBuildFromVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBuildFromVersionOK), nil

}

/*
DeletePack deletes a specific pack
*/
func (a *Client) DeletePack(params *DeletePackParams) (*DeletePackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePack",
		Method:             "DELETE",
		PathPattern:        "/packs/{pack_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePackOK), nil

}

/*
DeletePackFromTeam removes a team from pack
*/
func (a *Client) DeletePackFromTeam(params *DeletePackFromTeamParams) (*DeletePackFromTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackFromTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePackFromTeam",
		Method:             "DELETE",
		PathPattern:        "/packs/{pack_id}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePackFromTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePackFromTeamOK), nil

}

/*
DeletePackFromUser removes a user from pack
*/
func (a *Client) DeletePackFromUser(params *DeletePackFromUserParams) (*DeletePackFromUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackFromUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePackFromUser",
		Method:             "DELETE",
		PathPattern:        "/packs/{pack_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePackFromUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePackFromUserOK), nil

}

/*
ListBuildVersions fetches all versions assigned to build
*/
func (a *Client) ListBuildVersions(params *ListBuildVersionsParams) (*ListBuildVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBuildVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListBuildVersions",
		Method:             "GET",
		PathPattern:        "/packs/{pack_id}/builds/{build_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListBuildVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListBuildVersionsOK), nil

}

/*
ListBuilds fetches all available builds for a pack
*/
func (a *Client) ListBuilds(params *ListBuildsParams) (*ListBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBuildsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListBuilds",
		Method:             "GET",
		PathPattern:        "/packs/{pack_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListBuildsOK), nil

}

/*
ListPackTeams fetches all teams assigned to pack
*/
func (a *Client) ListPackTeams(params *ListPackTeamsParams) (*ListPackTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPackTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListPackTeams",
		Method:             "GET",
		PathPattern:        "/packs/{pack_id}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListPackTeamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListPackTeamsOK), nil

}

/*
ListPackUsers fetches all users assigned to pack
*/
func (a *Client) ListPackUsers(params *ListPackUsersParams) (*ListPackUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPackUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListPackUsers",
		Method:             "GET",
		PathPattern:        "/packs/{pack_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListPackUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListPackUsersOK), nil

}

/*
ListPacks fetches all available packs
*/
func (a *Client) ListPacks(params *ListPacksParams) (*ListPacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListPacks",
		Method:             "GET",
		PathPattern:        "/packs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListPacksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListPacksOK), nil

}

/*
PermitPackTeam updates team perms for pack
*/
func (a *Client) PermitPackTeam(params *PermitPackTeamParams) (*PermitPackTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPermitPackTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PermitPackTeam",
		Method:             "PUT",
		PathPattern:        "/packs/{pack_id}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PermitPackTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PermitPackTeamOK), nil

}

/*
PermitPackUser updates user perms for pack
*/
func (a *Client) PermitPackUser(params *PermitPackUserParams) (*PermitPackUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPermitPackUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PermitPackUser",
		Method:             "PUT",
		PathPattern:        "/packs/{pack_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PermitPackUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PermitPackUserOK), nil

}

/*
ShowBuild fetches a specific build for a pack
*/
func (a *Client) ShowBuild(params *ShowBuildParams) (*ShowBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShowBuild",
		Method:             "GET",
		PathPattern:        "/packs/{pack_id}/builds/{build_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowBuildOK), nil

}

/*
ShowPack fetches a specific pack
*/
func (a *Client) ShowPack(params *ShowPackParams) (*ShowPackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowPackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShowPack",
		Method:             "GET",
		PathPattern:        "/packs/{pack_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowPackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowPackOK), nil

}

/*
UpdateBuild updates a specific build for a pack
*/
func (a *Client) UpdateBuild(params *UpdateBuildParams) (*UpdateBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateBuild",
		Method:             "PUT",
		PathPattern:        "/packs/{pack_id}/builds/{build_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateBuildOK), nil

}

/*
UpdatePack updates a specific pack
*/
func (a *Client) UpdatePack(params *UpdatePackParams) (*UpdatePackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdatePack",
		Method:             "PUT",
		PathPattern:        "/packs/{pack_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdatePackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePackOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
