// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// DeleteBuildFromVersionReader is a Reader for the DeleteBuildFromVersion structure.
type DeleteBuildFromVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteBuildFromVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteBuildFromVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteBuildFromVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteBuildFromVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteBuildFromVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteBuildFromVersionPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteBuildFromVersionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteBuildFromVersionOK creates a DeleteBuildFromVersionOK with default headers values
func NewDeleteBuildFromVersionOK() *DeleteBuildFromVersionOK {
	return &DeleteBuildFromVersionOK{}
}

/*
DeleteBuildFromVersionOK describes a response with status code 200, with default header values.

Plain success message
*/
type DeleteBuildFromVersionOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete build from version o k response has a 2xx status code
func (o *DeleteBuildFromVersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete build from version o k response has a 3xx status code
func (o *DeleteBuildFromVersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete build from version o k response has a 4xx status code
func (o *DeleteBuildFromVersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete build from version o k response has a 5xx status code
func (o *DeleteBuildFromVersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete build from version o k response a status code equal to that given
func (o *DeleteBuildFromVersionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete build from version o k response
func (o *DeleteBuildFromVersionOK) Code() int {
	return 200
}

func (o *DeleteBuildFromVersionOK) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/builds/{build_id}/versions][%d] deleteBuildFromVersionOK  %+v", 200, o.Payload)
}

func (o *DeleteBuildFromVersionOK) String() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/builds/{build_id}/versions][%d] deleteBuildFromVersionOK  %+v", 200, o.Payload)
}

func (o *DeleteBuildFromVersionOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteBuildFromVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBuildFromVersionBadRequest creates a DeleteBuildFromVersionBadRequest with default headers values
func NewDeleteBuildFromVersionBadRequest() *DeleteBuildFromVersionBadRequest {
	return &DeleteBuildFromVersionBadRequest{}
}

/*
DeleteBuildFromVersionBadRequest describes a response with status code 400, with default header values.

Failed to unlink build
*/
type DeleteBuildFromVersionBadRequest struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete build from version bad request response has a 2xx status code
func (o *DeleteBuildFromVersionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete build from version bad request response has a 3xx status code
func (o *DeleteBuildFromVersionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete build from version bad request response has a 4xx status code
func (o *DeleteBuildFromVersionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete build from version bad request response has a 5xx status code
func (o *DeleteBuildFromVersionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete build from version bad request response a status code equal to that given
func (o *DeleteBuildFromVersionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete build from version bad request response
func (o *DeleteBuildFromVersionBadRequest) Code() int {
	return 400
}

func (o *DeleteBuildFromVersionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/builds/{build_id}/versions][%d] deleteBuildFromVersionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteBuildFromVersionBadRequest) String() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/builds/{build_id}/versions][%d] deleteBuildFromVersionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteBuildFromVersionBadRequest) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteBuildFromVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBuildFromVersionForbidden creates a DeleteBuildFromVersionForbidden with default headers values
func NewDeleteBuildFromVersionForbidden() *DeleteBuildFromVersionForbidden {
	return &DeleteBuildFromVersionForbidden{}
}

/*
DeleteBuildFromVersionForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type DeleteBuildFromVersionForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete build from version forbidden response has a 2xx status code
func (o *DeleteBuildFromVersionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete build from version forbidden response has a 3xx status code
func (o *DeleteBuildFromVersionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete build from version forbidden response has a 4xx status code
func (o *DeleteBuildFromVersionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete build from version forbidden response has a 5xx status code
func (o *DeleteBuildFromVersionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete build from version forbidden response a status code equal to that given
func (o *DeleteBuildFromVersionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete build from version forbidden response
func (o *DeleteBuildFromVersionForbidden) Code() int {
	return 403
}

func (o *DeleteBuildFromVersionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/builds/{build_id}/versions][%d] deleteBuildFromVersionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteBuildFromVersionForbidden) String() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/builds/{build_id}/versions][%d] deleteBuildFromVersionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteBuildFromVersionForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteBuildFromVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBuildFromVersionNotFound creates a DeleteBuildFromVersionNotFound with default headers values
func NewDeleteBuildFromVersionNotFound() *DeleteBuildFromVersionNotFound {
	return &DeleteBuildFromVersionNotFound{}
}

/*
DeleteBuildFromVersionNotFound describes a response with status code 404, with default header values.

Build or pack not found
*/
type DeleteBuildFromVersionNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete build from version not found response has a 2xx status code
func (o *DeleteBuildFromVersionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete build from version not found response has a 3xx status code
func (o *DeleteBuildFromVersionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete build from version not found response has a 4xx status code
func (o *DeleteBuildFromVersionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete build from version not found response has a 5xx status code
func (o *DeleteBuildFromVersionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete build from version not found response a status code equal to that given
func (o *DeleteBuildFromVersionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete build from version not found response
func (o *DeleteBuildFromVersionNotFound) Code() int {
	return 404
}

func (o *DeleteBuildFromVersionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/builds/{build_id}/versions][%d] deleteBuildFromVersionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteBuildFromVersionNotFound) String() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/builds/{build_id}/versions][%d] deleteBuildFromVersionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteBuildFromVersionNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteBuildFromVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBuildFromVersionPreconditionFailed creates a DeleteBuildFromVersionPreconditionFailed with default headers values
func NewDeleteBuildFromVersionPreconditionFailed() *DeleteBuildFromVersionPreconditionFailed {
	return &DeleteBuildFromVersionPreconditionFailed{}
}

/*
DeleteBuildFromVersionPreconditionFailed describes a response with status code 412, with default header values.

Version is not assigned
*/
type DeleteBuildFromVersionPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete build from version precondition failed response has a 2xx status code
func (o *DeleteBuildFromVersionPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete build from version precondition failed response has a 3xx status code
func (o *DeleteBuildFromVersionPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete build from version precondition failed response has a 4xx status code
func (o *DeleteBuildFromVersionPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete build from version precondition failed response has a 5xx status code
func (o *DeleteBuildFromVersionPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete build from version precondition failed response a status code equal to that given
func (o *DeleteBuildFromVersionPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete build from version precondition failed response
func (o *DeleteBuildFromVersionPreconditionFailed) Code() int {
	return 412
}

func (o *DeleteBuildFromVersionPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/builds/{build_id}/versions][%d] deleteBuildFromVersionPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteBuildFromVersionPreconditionFailed) String() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/builds/{build_id}/versions][%d] deleteBuildFromVersionPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteBuildFromVersionPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteBuildFromVersionPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBuildFromVersionDefault creates a DeleteBuildFromVersionDefault with default headers values
func NewDeleteBuildFromVersionDefault(code int) *DeleteBuildFromVersionDefault {
	return &DeleteBuildFromVersionDefault{
		_statusCode: code,
	}
}

/*
DeleteBuildFromVersionDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type DeleteBuildFromVersionDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this delete build from version default response has a 2xx status code
func (o *DeleteBuildFromVersionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete build from version default response has a 3xx status code
func (o *DeleteBuildFromVersionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete build from version default response has a 4xx status code
func (o *DeleteBuildFromVersionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete build from version default response has a 5xx status code
func (o *DeleteBuildFromVersionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete build from version default response a status code equal to that given
func (o *DeleteBuildFromVersionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete build from version default response
func (o *DeleteBuildFromVersionDefault) Code() int {
	return o._statusCode
}

func (o *DeleteBuildFromVersionDefault) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/builds/{build_id}/versions][%d] DeleteBuildFromVersion default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteBuildFromVersionDefault) String() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/builds/{build_id}/versions][%d] DeleteBuildFromVersion default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteBuildFromVersionDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteBuildFromVersionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
