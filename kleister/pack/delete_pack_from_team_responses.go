// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// DeletePackFromTeamReader is a Reader for the DeletePackFromTeam structure.
type DeletePackFromTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePackFromTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeletePackFromTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeletePackFromTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeletePackFromTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeletePackFromTeamPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeletePackFromTeamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeletePackFromTeamOK creates a DeletePackFromTeamOK with default headers values
func NewDeletePackFromTeamOK() *DeletePackFromTeamOK {
	return &DeletePackFromTeamOK{}
}

/*
DeletePackFromTeamOK describes a response with status code 200, with default header values.

Plain success message
*/
type DeletePackFromTeamOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete pack from team o k response has a 2xx status code
func (o *DeletePackFromTeamOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete pack from team o k response has a 3xx status code
func (o *DeletePackFromTeamOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pack from team o k response has a 4xx status code
func (o *DeletePackFromTeamOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete pack from team o k response has a 5xx status code
func (o *DeletePackFromTeamOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pack from team o k response a status code equal to that given
func (o *DeletePackFromTeamOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete pack from team o k response
func (o *DeletePackFromTeamOK) Code() int {
	return 200
}

func (o *DeletePackFromTeamOK) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/teams][%d] deletePackFromTeamOK  %+v", 200, o.Payload)
}

func (o *DeletePackFromTeamOK) String() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/teams][%d] deletePackFromTeamOK  %+v", 200, o.Payload)
}

func (o *DeletePackFromTeamOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeletePackFromTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePackFromTeamForbidden creates a DeletePackFromTeamForbidden with default headers values
func NewDeletePackFromTeamForbidden() *DeletePackFromTeamForbidden {
	return &DeletePackFromTeamForbidden{}
}

/*
DeletePackFromTeamForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type DeletePackFromTeamForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete pack from team forbidden response has a 2xx status code
func (o *DeletePackFromTeamForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete pack from team forbidden response has a 3xx status code
func (o *DeletePackFromTeamForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pack from team forbidden response has a 4xx status code
func (o *DeletePackFromTeamForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete pack from team forbidden response has a 5xx status code
func (o *DeletePackFromTeamForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pack from team forbidden response a status code equal to that given
func (o *DeletePackFromTeamForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete pack from team forbidden response
func (o *DeletePackFromTeamForbidden) Code() int {
	return 403
}

func (o *DeletePackFromTeamForbidden) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/teams][%d] deletePackFromTeamForbidden  %+v", 403, o.Payload)
}

func (o *DeletePackFromTeamForbidden) String() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/teams][%d] deletePackFromTeamForbidden  %+v", 403, o.Payload)
}

func (o *DeletePackFromTeamForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeletePackFromTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePackFromTeamNotFound creates a DeletePackFromTeamNotFound with default headers values
func NewDeletePackFromTeamNotFound() *DeletePackFromTeamNotFound {
	return &DeletePackFromTeamNotFound{}
}

/*
DeletePackFromTeamNotFound describes a response with status code 404, with default header values.

Pack or team not found
*/
type DeletePackFromTeamNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete pack from team not found response has a 2xx status code
func (o *DeletePackFromTeamNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete pack from team not found response has a 3xx status code
func (o *DeletePackFromTeamNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pack from team not found response has a 4xx status code
func (o *DeletePackFromTeamNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete pack from team not found response has a 5xx status code
func (o *DeletePackFromTeamNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pack from team not found response a status code equal to that given
func (o *DeletePackFromTeamNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete pack from team not found response
func (o *DeletePackFromTeamNotFound) Code() int {
	return 404
}

func (o *DeletePackFromTeamNotFound) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/teams][%d] deletePackFromTeamNotFound  %+v", 404, o.Payload)
}

func (o *DeletePackFromTeamNotFound) String() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/teams][%d] deletePackFromTeamNotFound  %+v", 404, o.Payload)
}

func (o *DeletePackFromTeamNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeletePackFromTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePackFromTeamPreconditionFailed creates a DeletePackFromTeamPreconditionFailed with default headers values
func NewDeletePackFromTeamPreconditionFailed() *DeletePackFromTeamPreconditionFailed {
	return &DeletePackFromTeamPreconditionFailed{}
}

/*
DeletePackFromTeamPreconditionFailed describes a response with status code 412, with default header values.

Team is not attached
*/
type DeletePackFromTeamPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete pack from team precondition failed response has a 2xx status code
func (o *DeletePackFromTeamPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete pack from team precondition failed response has a 3xx status code
func (o *DeletePackFromTeamPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pack from team precondition failed response has a 4xx status code
func (o *DeletePackFromTeamPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete pack from team precondition failed response has a 5xx status code
func (o *DeletePackFromTeamPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pack from team precondition failed response a status code equal to that given
func (o *DeletePackFromTeamPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete pack from team precondition failed response
func (o *DeletePackFromTeamPreconditionFailed) Code() int {
	return 412
}

func (o *DeletePackFromTeamPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/teams][%d] deletePackFromTeamPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeletePackFromTeamPreconditionFailed) String() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/teams][%d] deletePackFromTeamPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeletePackFromTeamPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeletePackFromTeamPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePackFromTeamDefault creates a DeletePackFromTeamDefault with default headers values
func NewDeletePackFromTeamDefault(code int) *DeletePackFromTeamDefault {
	return &DeletePackFromTeamDefault{
		_statusCode: code,
	}
}

/*
DeletePackFromTeamDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type DeletePackFromTeamDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this delete pack from team default response has a 2xx status code
func (o *DeletePackFromTeamDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete pack from team default response has a 3xx status code
func (o *DeletePackFromTeamDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete pack from team default response has a 4xx status code
func (o *DeletePackFromTeamDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete pack from team default response has a 5xx status code
func (o *DeletePackFromTeamDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete pack from team default response a status code equal to that given
func (o *DeletePackFromTeamDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete pack from team default response
func (o *DeletePackFromTeamDefault) Code() int {
	return o._statusCode
}

func (o *DeletePackFromTeamDefault) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/teams][%d] DeletePackFromTeam default  %+v", o._statusCode, o.Payload)
}

func (o *DeletePackFromTeamDefault) String() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/teams][%d] DeletePackFromTeam default  %+v", o._statusCode, o.Payload)
}

func (o *DeletePackFromTeamDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeletePackFromTeamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
