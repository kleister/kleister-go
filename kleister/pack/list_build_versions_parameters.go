// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListBuildVersionsParams creates a new ListBuildVersionsParams object
// with the default values initialized.
func NewListBuildVersionsParams() *ListBuildVersionsParams {
	var ()
	return &ListBuildVersionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListBuildVersionsParamsWithTimeout creates a new ListBuildVersionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListBuildVersionsParamsWithTimeout(timeout time.Duration) *ListBuildVersionsParams {
	var ()
	return &ListBuildVersionsParams{

		timeout: timeout,
	}
}

// NewListBuildVersionsParamsWithContext creates a new ListBuildVersionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListBuildVersionsParamsWithContext(ctx context.Context) *ListBuildVersionsParams {
	var ()
	return &ListBuildVersionsParams{

		Context: ctx,
	}
}

// NewListBuildVersionsParamsWithHTTPClient creates a new ListBuildVersionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListBuildVersionsParamsWithHTTPClient(client *http.Client) *ListBuildVersionsParams {
	var ()
	return &ListBuildVersionsParams{
		HTTPClient: client,
	}
}

/*ListBuildVersionsParams contains all the parameters to send to the API endpoint
for the list build versions operation typically these are written to a http.Request
*/
type ListBuildVersionsParams struct {

	/*BuildID
	  A build UUID or slug

	*/
	BuildID string
	/*PackID
	  A pack UUID or slug

	*/
	PackID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list build versions params
func (o *ListBuildVersionsParams) WithTimeout(timeout time.Duration) *ListBuildVersionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list build versions params
func (o *ListBuildVersionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list build versions params
func (o *ListBuildVersionsParams) WithContext(ctx context.Context) *ListBuildVersionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list build versions params
func (o *ListBuildVersionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list build versions params
func (o *ListBuildVersionsParams) WithHTTPClient(client *http.Client) *ListBuildVersionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list build versions params
func (o *ListBuildVersionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBuildID adds the buildID to the list build versions params
func (o *ListBuildVersionsParams) WithBuildID(buildID string) *ListBuildVersionsParams {
	o.SetBuildID(buildID)
	return o
}

// SetBuildID adds the buildId to the list build versions params
func (o *ListBuildVersionsParams) SetBuildID(buildID string) {
	o.BuildID = buildID
}

// WithPackID adds the packID to the list build versions params
func (o *ListBuildVersionsParams) WithPackID(packID string) *ListBuildVersionsParams {
	o.SetPackID(packID)
	return o
}

// SetPackID adds the packId to the list build versions params
func (o *ListBuildVersionsParams) SetPackID(packID string) {
	o.PackID = packID
}

// WriteToRequest writes these params to a swagger request
func (o *ListBuildVersionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param build_id
	if err := r.SetPathParam("build_id", o.BuildID); err != nil {
		return err
	}

	// path param pack_id
	if err := r.SetPathParam("pack_id", o.PackID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
