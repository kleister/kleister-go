// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// PermitPackUserReader is a Reader for the PermitPackUser structure.
type PermitPackUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PermitPackUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPermitPackUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPermitPackUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPermitPackUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPermitPackUserPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPermitPackUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPermitPackUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPermitPackUserOK creates a PermitPackUserOK with default headers values
func NewPermitPackUserOK() *PermitPackUserOK {
	return &PermitPackUserOK{}
}

/*
PermitPackUserOK describes a response with status code 200, with default header values.

Plain success message
*/
type PermitPackUserOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit pack user o k response has a 2xx status code
func (o *PermitPackUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this permit pack user o k response has a 3xx status code
func (o *PermitPackUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit pack user o k response has a 4xx status code
func (o *PermitPackUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this permit pack user o k response has a 5xx status code
func (o *PermitPackUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this permit pack user o k response a status code equal to that given
func (o *PermitPackUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the permit pack user o k response
func (o *PermitPackUserOK) Code() int {
	return 200
}

func (o *PermitPackUserOK) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/users][%d] permitPackUserOK  %+v", 200, o.Payload)
}

func (o *PermitPackUserOK) String() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/users][%d] permitPackUserOK  %+v", 200, o.Payload)
}

func (o *PermitPackUserOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitPackUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitPackUserForbidden creates a PermitPackUserForbidden with default headers values
func NewPermitPackUserForbidden() *PermitPackUserForbidden {
	return &PermitPackUserForbidden{}
}

/*
PermitPackUserForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type PermitPackUserForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit pack user forbidden response has a 2xx status code
func (o *PermitPackUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit pack user forbidden response has a 3xx status code
func (o *PermitPackUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit pack user forbidden response has a 4xx status code
func (o *PermitPackUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit pack user forbidden response has a 5xx status code
func (o *PermitPackUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this permit pack user forbidden response a status code equal to that given
func (o *PermitPackUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the permit pack user forbidden response
func (o *PermitPackUserForbidden) Code() int {
	return 403
}

func (o *PermitPackUserForbidden) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/users][%d] permitPackUserForbidden  %+v", 403, o.Payload)
}

func (o *PermitPackUserForbidden) String() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/users][%d] permitPackUserForbidden  %+v", 403, o.Payload)
}

func (o *PermitPackUserForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitPackUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitPackUserNotFound creates a PermitPackUserNotFound with default headers values
func NewPermitPackUserNotFound() *PermitPackUserNotFound {
	return &PermitPackUserNotFound{}
}

/*
PermitPackUserNotFound describes a response with status code 404, with default header values.

Pack or user not found
*/
type PermitPackUserNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit pack user not found response has a 2xx status code
func (o *PermitPackUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit pack user not found response has a 3xx status code
func (o *PermitPackUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit pack user not found response has a 4xx status code
func (o *PermitPackUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit pack user not found response has a 5xx status code
func (o *PermitPackUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this permit pack user not found response a status code equal to that given
func (o *PermitPackUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the permit pack user not found response
func (o *PermitPackUserNotFound) Code() int {
	return 404
}

func (o *PermitPackUserNotFound) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/users][%d] permitPackUserNotFound  %+v", 404, o.Payload)
}

func (o *PermitPackUserNotFound) String() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/users][%d] permitPackUserNotFound  %+v", 404, o.Payload)
}

func (o *PermitPackUserNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitPackUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitPackUserPreconditionFailed creates a PermitPackUserPreconditionFailed with default headers values
func NewPermitPackUserPreconditionFailed() *PermitPackUserPreconditionFailed {
	return &PermitPackUserPreconditionFailed{}
}

/*
PermitPackUserPreconditionFailed describes a response with status code 412, with default header values.

User is not attached
*/
type PermitPackUserPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit pack user precondition failed response has a 2xx status code
func (o *PermitPackUserPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit pack user precondition failed response has a 3xx status code
func (o *PermitPackUserPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit pack user precondition failed response has a 4xx status code
func (o *PermitPackUserPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit pack user precondition failed response has a 5xx status code
func (o *PermitPackUserPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this permit pack user precondition failed response a status code equal to that given
func (o *PermitPackUserPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the permit pack user precondition failed response
func (o *PermitPackUserPreconditionFailed) Code() int {
	return 412
}

func (o *PermitPackUserPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/users][%d] permitPackUserPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitPackUserPreconditionFailed) String() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/users][%d] permitPackUserPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitPackUserPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitPackUserPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitPackUserUnprocessableEntity creates a PermitPackUserUnprocessableEntity with default headers values
func NewPermitPackUserUnprocessableEntity() *PermitPackUserUnprocessableEntity {
	return &PermitPackUserUnprocessableEntity{}
}

/*
PermitPackUserUnprocessableEntity describes a response with status code 422, with default header values.

Failed to validate request
*/
type PermitPackUserUnprocessableEntity struct {
	Payload *models.ValidationError
}

// IsSuccess returns true when this permit pack user unprocessable entity response has a 2xx status code
func (o *PermitPackUserUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit pack user unprocessable entity response has a 3xx status code
func (o *PermitPackUserUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit pack user unprocessable entity response has a 4xx status code
func (o *PermitPackUserUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit pack user unprocessable entity response has a 5xx status code
func (o *PermitPackUserUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this permit pack user unprocessable entity response a status code equal to that given
func (o *PermitPackUserUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the permit pack user unprocessable entity response
func (o *PermitPackUserUnprocessableEntity) Code() int {
	return 422
}

func (o *PermitPackUserUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/users][%d] permitPackUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitPackUserUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/users][%d] permitPackUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitPackUserUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *PermitPackUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitPackUserDefault creates a PermitPackUserDefault with default headers values
func NewPermitPackUserDefault(code int) *PermitPackUserDefault {
	return &PermitPackUserDefault{
		_statusCode: code,
	}
}

/*
PermitPackUserDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type PermitPackUserDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this permit pack user default response has a 2xx status code
func (o *PermitPackUserDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this permit pack user default response has a 3xx status code
func (o *PermitPackUserDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this permit pack user default response has a 4xx status code
func (o *PermitPackUserDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this permit pack user default response has a 5xx status code
func (o *PermitPackUserDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this permit pack user default response a status code equal to that given
func (o *PermitPackUserDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the permit pack user default response
func (o *PermitPackUserDefault) Code() int {
	return o._statusCode
}

func (o *PermitPackUserDefault) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/users][%d] PermitPackUser default  %+v", o._statusCode, o.Payload)
}

func (o *PermitPackUserDefault) String() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/users][%d] PermitPackUser default  %+v", o._statusCode, o.Payload)
}

func (o *PermitPackUserDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitPackUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
