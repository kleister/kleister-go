// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// ShowPackReader is a Reader for the ShowPack structure.
type ShowPackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ShowPackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewShowPackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewShowPackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewShowPackDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewShowPackOK creates a ShowPackOK with default headers values
func NewShowPackOK() *ShowPackOK {
	return &ShowPackOK{}
}

/* ShowPackOK describes a response with status code 200, with default header values.

The fetched pack details
*/
type ShowPackOK struct {
	Payload *models.Pack
}

func (o *ShowPackOK) Error() string {
	return fmt.Sprintf("[GET /packs/{pack_id}][%d] showPackOK  %+v", 200, o.Payload)
}
func (o *ShowPackOK) GetPayload() *models.Pack {
	return o.Payload
}

func (o *ShowPackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Pack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewShowPackForbidden creates a ShowPackForbidden with default headers values
func NewShowPackForbidden() *ShowPackForbidden {
	return &ShowPackForbidden{}
}

/* ShowPackForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type ShowPackForbidden struct {
	Payload *models.GeneralError
}

func (o *ShowPackForbidden) Error() string {
	return fmt.Sprintf("[GET /packs/{pack_id}][%d] showPackForbidden  %+v", 403, o.Payload)
}
func (o *ShowPackForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ShowPackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewShowPackDefault creates a ShowPackDefault with default headers values
func NewShowPackDefault(code int) *ShowPackDefault {
	return &ShowPackDefault{
		_statusCode: code,
	}
}

/* ShowPackDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type ShowPackDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the show pack default response
func (o *ShowPackDefault) Code() int {
	return o._statusCode
}

func (o *ShowPackDefault) Error() string {
	return fmt.Sprintf("[GET /packs/{pack_id}][%d] ShowPack default  %+v", o._statusCode, o.Payload)
}
func (o *ShowPackDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ShowPackDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
