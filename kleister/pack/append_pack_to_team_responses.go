// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// AppendPackToTeamReader is a Reader for the AppendPackToTeam structure.
type AppendPackToTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendPackToTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAppendPackToTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAppendPackToTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewAppendPackToTeamPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAppendPackToTeamUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAppendPackToTeamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppendPackToTeamOK creates a AppendPackToTeamOK with default headers values
func NewAppendPackToTeamOK() *AppendPackToTeamOK {
	return &AppendPackToTeamOK{}
}

/* AppendPackToTeamOK describes a response with status code 200, with default header values.

Plain success message
*/
type AppendPackToTeamOK struct {
	Payload *models.GeneralError
}

func (o *AppendPackToTeamOK) Error() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/teams][%d] appendPackToTeamOK  %+v", 200, o.Payload)
}
func (o *AppendPackToTeamOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendPackToTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendPackToTeamForbidden creates a AppendPackToTeamForbidden with default headers values
func NewAppendPackToTeamForbidden() *AppendPackToTeamForbidden {
	return &AppendPackToTeamForbidden{}
}

/* AppendPackToTeamForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type AppendPackToTeamForbidden struct {
	Payload *models.GeneralError
}

func (o *AppendPackToTeamForbidden) Error() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/teams][%d] appendPackToTeamForbidden  %+v", 403, o.Payload)
}
func (o *AppendPackToTeamForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendPackToTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendPackToTeamPreconditionFailed creates a AppendPackToTeamPreconditionFailed with default headers values
func NewAppendPackToTeamPreconditionFailed() *AppendPackToTeamPreconditionFailed {
	return &AppendPackToTeamPreconditionFailed{}
}

/* AppendPackToTeamPreconditionFailed describes a response with status code 412, with default header values.

Failed to parse request body
*/
type AppendPackToTeamPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *AppendPackToTeamPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/teams][%d] appendPackToTeamPreconditionFailed  %+v", 412, o.Payload)
}
func (o *AppendPackToTeamPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendPackToTeamPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendPackToTeamUnprocessableEntity creates a AppendPackToTeamUnprocessableEntity with default headers values
func NewAppendPackToTeamUnprocessableEntity() *AppendPackToTeamUnprocessableEntity {
	return &AppendPackToTeamUnprocessableEntity{}
}

/* AppendPackToTeamUnprocessableEntity describes a response with status code 422, with default header values.

Team is already assigned
*/
type AppendPackToTeamUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *AppendPackToTeamUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/teams][%d] appendPackToTeamUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *AppendPackToTeamUnprocessableEntity) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendPackToTeamUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendPackToTeamDefault creates a AppendPackToTeamDefault with default headers values
func NewAppendPackToTeamDefault(code int) *AppendPackToTeamDefault {
	return &AppendPackToTeamDefault{
		_statusCode: code,
	}
}

/* AppendPackToTeamDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type AppendPackToTeamDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the append pack to team default response
func (o *AppendPackToTeamDefault) Code() int {
	return o._statusCode
}

func (o *AppendPackToTeamDefault) Error() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/teams][%d] AppendPackToTeam default  %+v", o._statusCode, o.Payload)
}
func (o *AppendPackToTeamDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendPackToTeamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
