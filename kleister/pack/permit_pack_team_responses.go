// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kleister/kleister-go/models"
)

// PermitPackTeamReader is a Reader for the PermitPackTeam structure.
type PermitPackTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PermitPackTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPermitPackTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewPermitPackTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewPermitPackTeamPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPermitPackTeamUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPermitPackTeamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPermitPackTeamOK creates a PermitPackTeamOK with default headers values
func NewPermitPackTeamOK() *PermitPackTeamOK {
	return &PermitPackTeamOK{}
}

/*PermitPackTeamOK handles this case with default header values.

Plain success message
*/
type PermitPackTeamOK struct {
	Payload *models.GeneralError
}

func (o *PermitPackTeamOK) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/teams][%d] permitPackTeamOK  %+v", 200, o.Payload)
}

func (o *PermitPackTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitPackTeamForbidden creates a PermitPackTeamForbidden with default headers values
func NewPermitPackTeamForbidden() *PermitPackTeamForbidden {
	return &PermitPackTeamForbidden{}
}

/*PermitPackTeamForbidden handles this case with default header values.

User is not authorized
*/
type PermitPackTeamForbidden struct {
	Payload *models.GeneralError
}

func (o *PermitPackTeamForbidden) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/teams][%d] permitPackTeamForbidden  %+v", 403, o.Payload)
}

func (o *PermitPackTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitPackTeamPreconditionFailed creates a PermitPackTeamPreconditionFailed with default headers values
func NewPermitPackTeamPreconditionFailed() *PermitPackTeamPreconditionFailed {
	return &PermitPackTeamPreconditionFailed{}
}

/*PermitPackTeamPreconditionFailed handles this case with default header values.

Failed to parse request body
*/
type PermitPackTeamPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *PermitPackTeamPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/teams][%d] permitPackTeamPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitPackTeamPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitPackTeamUnprocessableEntity creates a PermitPackTeamUnprocessableEntity with default headers values
func NewPermitPackTeamUnprocessableEntity() *PermitPackTeamUnprocessableEntity {
	return &PermitPackTeamUnprocessableEntity{}
}

/*PermitPackTeamUnprocessableEntity handles this case with default header values.

Team is not assigned
*/
type PermitPackTeamUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *PermitPackTeamUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/teams][%d] permitPackTeamUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitPackTeamUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitPackTeamDefault creates a PermitPackTeamDefault with default headers values
func NewPermitPackTeamDefault(code int) *PermitPackTeamDefault {
	return &PermitPackTeamDefault{
		_statusCode: code,
	}
}

/*PermitPackTeamDefault handles this case with default header values.

Some error unrelated to the handler
*/
type PermitPackTeamDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the permit pack team default response
func (o *PermitPackTeamDefault) Code() int {
	return o._statusCode
}

func (o *PermitPackTeamDefault) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}/teams][%d] PermitPackTeam default  %+v", o._statusCode, o.Payload)
}

func (o *PermitPackTeamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
