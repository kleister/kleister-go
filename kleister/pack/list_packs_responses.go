// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kleister/kleister-go/models"
)

// ListPacksReader is a Reader for the ListPacks structure.
type ListPacksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPacksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListPacksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewListPacksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListPacksDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListPacksOK creates a ListPacksOK with default headers values
func NewListPacksOK() *ListPacksOK {
	return &ListPacksOK{}
}

/*ListPacksOK handles this case with default header values.

A collection of packs
*/
type ListPacksOK struct {
	Payload []*models.Pack
}

func (o *ListPacksOK) Error() string {
	return fmt.Sprintf("[GET /packs][%d] listPacksOK  %+v", 200, o.Payload)
}

func (o *ListPacksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPacksForbidden creates a ListPacksForbidden with default headers values
func NewListPacksForbidden() *ListPacksForbidden {
	return &ListPacksForbidden{}
}

/*ListPacksForbidden handles this case with default header values.

User is not authorized
*/
type ListPacksForbidden struct {
	Payload *models.GeneralError
}

func (o *ListPacksForbidden) Error() string {
	return fmt.Sprintf("[GET /packs][%d] listPacksForbidden  %+v", 403, o.Payload)
}

func (o *ListPacksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPacksDefault creates a ListPacksDefault with default headers values
func NewListPacksDefault(code int) *ListPacksDefault {
	return &ListPacksDefault{
		_statusCode: code,
	}
}

/*ListPacksDefault handles this case with default header values.

Some error unrelated to the handler
*/
type ListPacksDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the list packs default response
func (o *ListPacksDefault) Code() int {
	return o._statusCode
}

func (o *ListPacksDefault) Error() string {
	return fmt.Sprintf("[GET /packs][%d] ListPacks default  %+v", o._statusCode, o.Payload)
}

func (o *ListPacksDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
