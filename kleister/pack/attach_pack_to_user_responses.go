// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// AttachPackToUserReader is a Reader for the AttachPackToUser structure.
type AttachPackToUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AttachPackToUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAttachPackToUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAttachPackToUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAttachPackToUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewAttachPackToUserPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAttachPackToUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAttachPackToUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAttachPackToUserOK creates a AttachPackToUserOK with default headers values
func NewAttachPackToUserOK() *AttachPackToUserOK {
	return &AttachPackToUserOK{}
}

/*
AttachPackToUserOK describes a response with status code 200, with default header values.

Plain success message
*/
type AttachPackToUserOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach pack to user o k response has a 2xx status code
func (o *AttachPackToUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this attach pack to user o k response has a 3xx status code
func (o *AttachPackToUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach pack to user o k response has a 4xx status code
func (o *AttachPackToUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this attach pack to user o k response has a 5xx status code
func (o *AttachPackToUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this attach pack to user o k response a status code equal to that given
func (o *AttachPackToUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the attach pack to user o k response
func (o *AttachPackToUserOK) Code() int {
	return 200
}

func (o *AttachPackToUserOK) Error() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/users][%d] attachPackToUserOK  %+v", 200, o.Payload)
}

func (o *AttachPackToUserOK) String() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/users][%d] attachPackToUserOK  %+v", 200, o.Payload)
}

func (o *AttachPackToUserOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachPackToUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachPackToUserForbidden creates a AttachPackToUserForbidden with default headers values
func NewAttachPackToUserForbidden() *AttachPackToUserForbidden {
	return &AttachPackToUserForbidden{}
}

/*
AttachPackToUserForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type AttachPackToUserForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach pack to user forbidden response has a 2xx status code
func (o *AttachPackToUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach pack to user forbidden response has a 3xx status code
func (o *AttachPackToUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach pack to user forbidden response has a 4xx status code
func (o *AttachPackToUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach pack to user forbidden response has a 5xx status code
func (o *AttachPackToUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this attach pack to user forbidden response a status code equal to that given
func (o *AttachPackToUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the attach pack to user forbidden response
func (o *AttachPackToUserForbidden) Code() int {
	return 403
}

func (o *AttachPackToUserForbidden) Error() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/users][%d] attachPackToUserForbidden  %+v", 403, o.Payload)
}

func (o *AttachPackToUserForbidden) String() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/users][%d] attachPackToUserForbidden  %+v", 403, o.Payload)
}

func (o *AttachPackToUserForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachPackToUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachPackToUserNotFound creates a AttachPackToUserNotFound with default headers values
func NewAttachPackToUserNotFound() *AttachPackToUserNotFound {
	return &AttachPackToUserNotFound{}
}

/*
AttachPackToUserNotFound describes a response with status code 404, with default header values.

Pack or user not found
*/
type AttachPackToUserNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach pack to user not found response has a 2xx status code
func (o *AttachPackToUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach pack to user not found response has a 3xx status code
func (o *AttachPackToUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach pack to user not found response has a 4xx status code
func (o *AttachPackToUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach pack to user not found response has a 5xx status code
func (o *AttachPackToUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this attach pack to user not found response a status code equal to that given
func (o *AttachPackToUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the attach pack to user not found response
func (o *AttachPackToUserNotFound) Code() int {
	return 404
}

func (o *AttachPackToUserNotFound) Error() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/users][%d] attachPackToUserNotFound  %+v", 404, o.Payload)
}

func (o *AttachPackToUserNotFound) String() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/users][%d] attachPackToUserNotFound  %+v", 404, o.Payload)
}

func (o *AttachPackToUserNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachPackToUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachPackToUserPreconditionFailed creates a AttachPackToUserPreconditionFailed with default headers values
func NewAttachPackToUserPreconditionFailed() *AttachPackToUserPreconditionFailed {
	return &AttachPackToUserPreconditionFailed{}
}

/*
AttachPackToUserPreconditionFailed describes a response with status code 412, with default header values.

User is already attached
*/
type AttachPackToUserPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this attach pack to user precondition failed response has a 2xx status code
func (o *AttachPackToUserPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach pack to user precondition failed response has a 3xx status code
func (o *AttachPackToUserPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach pack to user precondition failed response has a 4xx status code
func (o *AttachPackToUserPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach pack to user precondition failed response has a 5xx status code
func (o *AttachPackToUserPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this attach pack to user precondition failed response a status code equal to that given
func (o *AttachPackToUserPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the attach pack to user precondition failed response
func (o *AttachPackToUserPreconditionFailed) Code() int {
	return 412
}

func (o *AttachPackToUserPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/users][%d] attachPackToUserPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AttachPackToUserPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/users][%d] attachPackToUserPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AttachPackToUserPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachPackToUserPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachPackToUserUnprocessableEntity creates a AttachPackToUserUnprocessableEntity with default headers values
func NewAttachPackToUserUnprocessableEntity() *AttachPackToUserUnprocessableEntity {
	return &AttachPackToUserUnprocessableEntity{}
}

/*
AttachPackToUserUnprocessableEntity describes a response with status code 422, with default header values.

Failed to validate request
*/
type AttachPackToUserUnprocessableEntity struct {
	Payload *models.ValidationError
}

// IsSuccess returns true when this attach pack to user unprocessable entity response has a 2xx status code
func (o *AttachPackToUserUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach pack to user unprocessable entity response has a 3xx status code
func (o *AttachPackToUserUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach pack to user unprocessable entity response has a 4xx status code
func (o *AttachPackToUserUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach pack to user unprocessable entity response has a 5xx status code
func (o *AttachPackToUserUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this attach pack to user unprocessable entity response a status code equal to that given
func (o *AttachPackToUserUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the attach pack to user unprocessable entity response
func (o *AttachPackToUserUnprocessableEntity) Code() int {
	return 422
}

func (o *AttachPackToUserUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/users][%d] attachPackToUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AttachPackToUserUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/users][%d] attachPackToUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AttachPackToUserUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *AttachPackToUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachPackToUserDefault creates a AttachPackToUserDefault with default headers values
func NewAttachPackToUserDefault(code int) *AttachPackToUserDefault {
	return &AttachPackToUserDefault{
		_statusCode: code,
	}
}

/*
AttachPackToUserDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type AttachPackToUserDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this attach pack to user default response has a 2xx status code
func (o *AttachPackToUserDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this attach pack to user default response has a 3xx status code
func (o *AttachPackToUserDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this attach pack to user default response has a 4xx status code
func (o *AttachPackToUserDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this attach pack to user default response has a 5xx status code
func (o *AttachPackToUserDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this attach pack to user default response a status code equal to that given
func (o *AttachPackToUserDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the attach pack to user default response
func (o *AttachPackToUserDefault) Code() int {
	return o._statusCode
}

func (o *AttachPackToUserDefault) Error() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/users][%d] AttachPackToUser default  %+v", o._statusCode, o.Payload)
}

func (o *AttachPackToUserDefault) String() string {
	return fmt.Sprintf("[POST /packs/{pack_id}/users][%d] AttachPackToUser default  %+v", o._statusCode, o.Payload)
}

func (o *AttachPackToUserDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AttachPackToUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
