// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// ListBuildVersionsReader is a Reader for the ListBuildVersions structure.
type ListBuildVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListBuildVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListBuildVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewListBuildVersionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListBuildVersionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListBuildVersionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListBuildVersionsOK creates a ListBuildVersionsOK with default headers values
func NewListBuildVersionsOK() *ListBuildVersionsOK {
	return &ListBuildVersionsOK{}
}

/*
ListBuildVersionsOK describes a response with status code 200, with default header values.

A collection of build versions
*/
type ListBuildVersionsOK struct {
	Payload *models.BuildVersions
}

// IsSuccess returns true when this list build versions o k response has a 2xx status code
func (o *ListBuildVersionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list build versions o k response has a 3xx status code
func (o *ListBuildVersionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list build versions o k response has a 4xx status code
func (o *ListBuildVersionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list build versions o k response has a 5xx status code
func (o *ListBuildVersionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list build versions o k response a status code equal to that given
func (o *ListBuildVersionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list build versions o k response
func (o *ListBuildVersionsOK) Code() int {
	return 200
}

func (o *ListBuildVersionsOK) Error() string {
	return fmt.Sprintf("[GET /packs/{pack_id}/builds/{build_id}/versions][%d] listBuildVersionsOK  %+v", 200, o.Payload)
}

func (o *ListBuildVersionsOK) String() string {
	return fmt.Sprintf("[GET /packs/{pack_id}/builds/{build_id}/versions][%d] listBuildVersionsOK  %+v", 200, o.Payload)
}

func (o *ListBuildVersionsOK) GetPayload() *models.BuildVersions {
	return o.Payload
}

func (o *ListBuildVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BuildVersions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBuildVersionsForbidden creates a ListBuildVersionsForbidden with default headers values
func NewListBuildVersionsForbidden() *ListBuildVersionsForbidden {
	return &ListBuildVersionsForbidden{}
}

/*
ListBuildVersionsForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type ListBuildVersionsForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this list build versions forbidden response has a 2xx status code
func (o *ListBuildVersionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list build versions forbidden response has a 3xx status code
func (o *ListBuildVersionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list build versions forbidden response has a 4xx status code
func (o *ListBuildVersionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list build versions forbidden response has a 5xx status code
func (o *ListBuildVersionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list build versions forbidden response a status code equal to that given
func (o *ListBuildVersionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list build versions forbidden response
func (o *ListBuildVersionsForbidden) Code() int {
	return 403
}

func (o *ListBuildVersionsForbidden) Error() string {
	return fmt.Sprintf("[GET /packs/{pack_id}/builds/{build_id}/versions][%d] listBuildVersionsForbidden  %+v", 403, o.Payload)
}

func (o *ListBuildVersionsForbidden) String() string {
	return fmt.Sprintf("[GET /packs/{pack_id}/builds/{build_id}/versions][%d] listBuildVersionsForbidden  %+v", 403, o.Payload)
}

func (o *ListBuildVersionsForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ListBuildVersionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBuildVersionsNotFound creates a ListBuildVersionsNotFound with default headers values
func NewListBuildVersionsNotFound() *ListBuildVersionsNotFound {
	return &ListBuildVersionsNotFound{}
}

/*
ListBuildVersionsNotFound describes a response with status code 404, with default header values.

Build or pack not found
*/
type ListBuildVersionsNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this list build versions not found response has a 2xx status code
func (o *ListBuildVersionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list build versions not found response has a 3xx status code
func (o *ListBuildVersionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list build versions not found response has a 4xx status code
func (o *ListBuildVersionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list build versions not found response has a 5xx status code
func (o *ListBuildVersionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list build versions not found response a status code equal to that given
func (o *ListBuildVersionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list build versions not found response
func (o *ListBuildVersionsNotFound) Code() int {
	return 404
}

func (o *ListBuildVersionsNotFound) Error() string {
	return fmt.Sprintf("[GET /packs/{pack_id}/builds/{build_id}/versions][%d] listBuildVersionsNotFound  %+v", 404, o.Payload)
}

func (o *ListBuildVersionsNotFound) String() string {
	return fmt.Sprintf("[GET /packs/{pack_id}/builds/{build_id}/versions][%d] listBuildVersionsNotFound  %+v", 404, o.Payload)
}

func (o *ListBuildVersionsNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ListBuildVersionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBuildVersionsDefault creates a ListBuildVersionsDefault with default headers values
func NewListBuildVersionsDefault(code int) *ListBuildVersionsDefault {
	return &ListBuildVersionsDefault{
		_statusCode: code,
	}
}

/*
ListBuildVersionsDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type ListBuildVersionsDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this list build versions default response has a 2xx status code
func (o *ListBuildVersionsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list build versions default response has a 3xx status code
func (o *ListBuildVersionsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list build versions default response has a 4xx status code
func (o *ListBuildVersionsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list build versions default response has a 5xx status code
func (o *ListBuildVersionsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list build versions default response a status code equal to that given
func (o *ListBuildVersionsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list build versions default response
func (o *ListBuildVersionsDefault) Code() int {
	return o._statusCode
}

func (o *ListBuildVersionsDefault) Error() string {
	return fmt.Sprintf("[GET /packs/{pack_id}/builds/{build_id}/versions][%d] ListBuildVersions default  %+v", o._statusCode, o.Payload)
}

func (o *ListBuildVersionsDefault) String() string {
	return fmt.Sprintf("[GET /packs/{pack_id}/builds/{build_id}/versions][%d] ListBuildVersions default  %+v", o._statusCode, o.Payload)
}

func (o *ListBuildVersionsDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *ListBuildVersionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
