// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// UpdatePackReader is a Reader for the UpdatePack structure.
type UpdatePackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdatePackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdatePackUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdatePackDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdatePackOK creates a UpdatePackOK with default headers values
func NewUpdatePackOK() *UpdatePackOK {
	return &UpdatePackOK{}
}

/*
UpdatePackOK describes a response with status code 200, with default header values.

The updated pack details
*/
type UpdatePackOK struct {
	Payload *models.Pack
}

// IsSuccess returns true when this update pack o k response has a 2xx status code
func (o *UpdatePackOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update pack o k response has a 3xx status code
func (o *UpdatePackOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update pack o k response has a 4xx status code
func (o *UpdatePackOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update pack o k response has a 5xx status code
func (o *UpdatePackOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update pack o k response a status code equal to that given
func (o *UpdatePackOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update pack o k response
func (o *UpdatePackOK) Code() int {
	return 200
}

func (o *UpdatePackOK) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}][%d] updatePackOK  %+v", 200, o.Payload)
}

func (o *UpdatePackOK) String() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}][%d] updatePackOK  %+v", 200, o.Payload)
}

func (o *UpdatePackOK) GetPayload() *models.Pack {
	return o.Payload
}

func (o *UpdatePackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Pack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePackForbidden creates a UpdatePackForbidden with default headers values
func NewUpdatePackForbidden() *UpdatePackForbidden {
	return &UpdatePackForbidden{}
}

/*
UpdatePackForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type UpdatePackForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this update pack forbidden response has a 2xx status code
func (o *UpdatePackForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update pack forbidden response has a 3xx status code
func (o *UpdatePackForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update pack forbidden response has a 4xx status code
func (o *UpdatePackForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update pack forbidden response has a 5xx status code
func (o *UpdatePackForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update pack forbidden response a status code equal to that given
func (o *UpdatePackForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update pack forbidden response
func (o *UpdatePackForbidden) Code() int {
	return 403
}

func (o *UpdatePackForbidden) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}][%d] updatePackForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePackForbidden) String() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}][%d] updatePackForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePackForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdatePackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePackNotFound creates a UpdatePackNotFound with default headers values
func NewUpdatePackNotFound() *UpdatePackNotFound {
	return &UpdatePackNotFound{}
}

/*
UpdatePackNotFound describes a response with status code 404, with default header values.

Pack not found
*/
type UpdatePackNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this update pack not found response has a 2xx status code
func (o *UpdatePackNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update pack not found response has a 3xx status code
func (o *UpdatePackNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update pack not found response has a 4xx status code
func (o *UpdatePackNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update pack not found response has a 5xx status code
func (o *UpdatePackNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update pack not found response a status code equal to that given
func (o *UpdatePackNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update pack not found response
func (o *UpdatePackNotFound) Code() int {
	return 404
}

func (o *UpdatePackNotFound) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}][%d] updatePackNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePackNotFound) String() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}][%d] updatePackNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePackNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdatePackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePackUnprocessableEntity creates a UpdatePackUnprocessableEntity with default headers values
func NewUpdatePackUnprocessableEntity() *UpdatePackUnprocessableEntity {
	return &UpdatePackUnprocessableEntity{}
}

/*
UpdatePackUnprocessableEntity describes a response with status code 422, with default header values.

Failed to validate request
*/
type UpdatePackUnprocessableEntity struct {
	Payload *models.ValidationError
}

// IsSuccess returns true when this update pack unprocessable entity response has a 2xx status code
func (o *UpdatePackUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update pack unprocessable entity response has a 3xx status code
func (o *UpdatePackUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update pack unprocessable entity response has a 4xx status code
func (o *UpdatePackUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update pack unprocessable entity response has a 5xx status code
func (o *UpdatePackUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update pack unprocessable entity response a status code equal to that given
func (o *UpdatePackUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update pack unprocessable entity response
func (o *UpdatePackUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdatePackUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}][%d] updatePackUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdatePackUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}][%d] updatePackUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdatePackUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *UpdatePackUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePackDefault creates a UpdatePackDefault with default headers values
func NewUpdatePackDefault(code int) *UpdatePackDefault {
	return &UpdatePackDefault{
		_statusCode: code,
	}
}

/*
UpdatePackDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type UpdatePackDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this update pack default response has a 2xx status code
func (o *UpdatePackDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update pack default response has a 3xx status code
func (o *UpdatePackDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update pack default response has a 4xx status code
func (o *UpdatePackDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update pack default response has a 5xx status code
func (o *UpdatePackDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update pack default response a status code equal to that given
func (o *UpdatePackDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update pack default response
func (o *UpdatePackDefault) Code() int {
	return o._statusCode
}

func (o *UpdatePackDefault) Error() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}][%d] UpdatePack default  %+v", o._statusCode, o.Payload)
}

func (o *UpdatePackDefault) String() string {
	return fmt.Sprintf("[PUT /packs/{pack_id}][%d] UpdatePack default  %+v", o._statusCode, o.Payload)
}

func (o *UpdatePackDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *UpdatePackDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
