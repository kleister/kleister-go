// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kleister/kleister-go/models"
)

// DeletePackFromUserReader is a Reader for the DeletePackFromUser structure.
type DeletePackFromUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePackFromUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeletePackFromUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewDeletePackFromUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeletePackFromUserPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewDeletePackFromUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeletePackFromUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeletePackFromUserOK creates a DeletePackFromUserOK with default headers values
func NewDeletePackFromUserOK() *DeletePackFromUserOK {
	return &DeletePackFromUserOK{}
}

/*DeletePackFromUserOK handles this case with default header values.

Plain success message
*/
type DeletePackFromUserOK struct {
	Payload *models.GeneralError
}

func (o *DeletePackFromUserOK) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/users][%d] deletePackFromUserOK  %+v", 200, o.Payload)
}

func (o *DeletePackFromUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePackFromUserForbidden creates a DeletePackFromUserForbidden with default headers values
func NewDeletePackFromUserForbidden() *DeletePackFromUserForbidden {
	return &DeletePackFromUserForbidden{}
}

/*DeletePackFromUserForbidden handles this case with default header values.

User is not authorized
*/
type DeletePackFromUserForbidden struct {
	Payload *models.GeneralError
}

func (o *DeletePackFromUserForbidden) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/users][%d] deletePackFromUserForbidden  %+v", 403, o.Payload)
}

func (o *DeletePackFromUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePackFromUserPreconditionFailed creates a DeletePackFromUserPreconditionFailed with default headers values
func NewDeletePackFromUserPreconditionFailed() *DeletePackFromUserPreconditionFailed {
	return &DeletePackFromUserPreconditionFailed{}
}

/*DeletePackFromUserPreconditionFailed handles this case with default header values.

Failed to parse request body
*/
type DeletePackFromUserPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *DeletePackFromUserPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/users][%d] deletePackFromUserPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeletePackFromUserPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePackFromUserUnprocessableEntity creates a DeletePackFromUserUnprocessableEntity with default headers values
func NewDeletePackFromUserUnprocessableEntity() *DeletePackFromUserUnprocessableEntity {
	return &DeletePackFromUserUnprocessableEntity{}
}

/*DeletePackFromUserUnprocessableEntity handles this case with default header values.

User is not assigned
*/
type DeletePackFromUserUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *DeletePackFromUserUnprocessableEntity) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/users][%d] deletePackFromUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *DeletePackFromUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePackFromUserDefault creates a DeletePackFromUserDefault with default headers values
func NewDeletePackFromUserDefault(code int) *DeletePackFromUserDefault {
	return &DeletePackFromUserDefault{
		_statusCode: code,
	}
}

/*DeletePackFromUserDefault handles this case with default header values.

Some error unrelated to the handler
*/
type DeletePackFromUserDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the delete pack from user default response
func (o *DeletePackFromUserDefault) Code() int {
	return o._statusCode
}

func (o *DeletePackFromUserDefault) Error() string {
	return fmt.Sprintf("[DELETE /packs/{pack_id}/users][%d] DeletePackFromUser default  %+v", o._statusCode, o.Payload)
}

func (o *DeletePackFromUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
