// Code generated by go-swagger; DO NOT EDIT.

package quilt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// AppendQuiltToBuildReader is a Reader for the AppendQuiltToBuild structure.
type AppendQuiltToBuildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendQuiltToBuildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAppendQuiltToBuildOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAppendQuiltToBuildForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAppendQuiltToBuildNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewAppendQuiltToBuildNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewAppendQuiltToBuildPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAppendQuiltToBuildDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppendQuiltToBuildOK creates a AppendQuiltToBuildOK with default headers values
func NewAppendQuiltToBuildOK() *AppendQuiltToBuildOK {
	return &AppendQuiltToBuildOK{}
}

/*
AppendQuiltToBuildOK describes a response with status code 200, with default header values.

Plain success message
*/
type AppendQuiltToBuildOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append quilt to build o k response has a 2xx status code
func (o *AppendQuiltToBuildOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this append quilt to build o k response has a 3xx status code
func (o *AppendQuiltToBuildOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append quilt to build o k response has a 4xx status code
func (o *AppendQuiltToBuildOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this append quilt to build o k response has a 5xx status code
func (o *AppendQuiltToBuildOK) IsServerError() bool {
	return false
}

// IsCode returns true when this append quilt to build o k response a status code equal to that given
func (o *AppendQuiltToBuildOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the append quilt to build o k response
func (o *AppendQuiltToBuildOK) Code() int {
	return 200
}

func (o *AppendQuiltToBuildOK) Error() string {
	return fmt.Sprintf("[POST /quilt/{quilt_id}/builds][%d] appendQuiltToBuildOK  %+v", 200, o.Payload)
}

func (o *AppendQuiltToBuildOK) String() string {
	return fmt.Sprintf("[POST /quilt/{quilt_id}/builds][%d] appendQuiltToBuildOK  %+v", 200, o.Payload)
}

func (o *AppendQuiltToBuildOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendQuiltToBuildOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendQuiltToBuildForbidden creates a AppendQuiltToBuildForbidden with default headers values
func NewAppendQuiltToBuildForbidden() *AppendQuiltToBuildForbidden {
	return &AppendQuiltToBuildForbidden{}
}

/*
AppendQuiltToBuildForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type AppendQuiltToBuildForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append quilt to build forbidden response has a 2xx status code
func (o *AppendQuiltToBuildForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append quilt to build forbidden response has a 3xx status code
func (o *AppendQuiltToBuildForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append quilt to build forbidden response has a 4xx status code
func (o *AppendQuiltToBuildForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this append quilt to build forbidden response has a 5xx status code
func (o *AppendQuiltToBuildForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this append quilt to build forbidden response a status code equal to that given
func (o *AppendQuiltToBuildForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the append quilt to build forbidden response
func (o *AppendQuiltToBuildForbidden) Code() int {
	return 403
}

func (o *AppendQuiltToBuildForbidden) Error() string {
	return fmt.Sprintf("[POST /quilt/{quilt_id}/builds][%d] appendQuiltToBuildForbidden  %+v", 403, o.Payload)
}

func (o *AppendQuiltToBuildForbidden) String() string {
	return fmt.Sprintf("[POST /quilt/{quilt_id}/builds][%d] appendQuiltToBuildForbidden  %+v", 403, o.Payload)
}

func (o *AppendQuiltToBuildForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendQuiltToBuildForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendQuiltToBuildNotFound creates a AppendQuiltToBuildNotFound with default headers values
func NewAppendQuiltToBuildNotFound() *AppendQuiltToBuildNotFound {
	return &AppendQuiltToBuildNotFound{}
}

/*
AppendQuiltToBuildNotFound describes a response with status code 404, with default header values.

Quilt or build not found
*/
type AppendQuiltToBuildNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append quilt to build not found response has a 2xx status code
func (o *AppendQuiltToBuildNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append quilt to build not found response has a 3xx status code
func (o *AppendQuiltToBuildNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append quilt to build not found response has a 4xx status code
func (o *AppendQuiltToBuildNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this append quilt to build not found response has a 5xx status code
func (o *AppendQuiltToBuildNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this append quilt to build not found response a status code equal to that given
func (o *AppendQuiltToBuildNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the append quilt to build not found response
func (o *AppendQuiltToBuildNotFound) Code() int {
	return 404
}

func (o *AppendQuiltToBuildNotFound) Error() string {
	return fmt.Sprintf("[POST /quilt/{quilt_id}/builds][%d] appendQuiltToBuildNotFound  %+v", 404, o.Payload)
}

func (o *AppendQuiltToBuildNotFound) String() string {
	return fmt.Sprintf("[POST /quilt/{quilt_id}/builds][%d] appendQuiltToBuildNotFound  %+v", 404, o.Payload)
}

func (o *AppendQuiltToBuildNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendQuiltToBuildNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendQuiltToBuildNotAcceptable creates a AppendQuiltToBuildNotAcceptable with default headers values
func NewAppendQuiltToBuildNotAcceptable() *AppendQuiltToBuildNotAcceptable {
	return &AppendQuiltToBuildNotAcceptable{}
}

/*
AppendQuiltToBuildNotAcceptable describes a response with status code 406, with default header values.

Failed to update build
*/
type AppendQuiltToBuildNotAcceptable struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append quilt to build not acceptable response has a 2xx status code
func (o *AppendQuiltToBuildNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append quilt to build not acceptable response has a 3xx status code
func (o *AppendQuiltToBuildNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append quilt to build not acceptable response has a 4xx status code
func (o *AppendQuiltToBuildNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this append quilt to build not acceptable response has a 5xx status code
func (o *AppendQuiltToBuildNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this append quilt to build not acceptable response a status code equal to that given
func (o *AppendQuiltToBuildNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the append quilt to build not acceptable response
func (o *AppendQuiltToBuildNotAcceptable) Code() int {
	return 406
}

func (o *AppendQuiltToBuildNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /quilt/{quilt_id}/builds][%d] appendQuiltToBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *AppendQuiltToBuildNotAcceptable) String() string {
	return fmt.Sprintf("[POST /quilt/{quilt_id}/builds][%d] appendQuiltToBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *AppendQuiltToBuildNotAcceptable) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendQuiltToBuildNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendQuiltToBuildPreconditionFailed creates a AppendQuiltToBuildPreconditionFailed with default headers values
func NewAppendQuiltToBuildPreconditionFailed() *AppendQuiltToBuildPreconditionFailed {
	return &AppendQuiltToBuildPreconditionFailed{}
}

/*
AppendQuiltToBuildPreconditionFailed describes a response with status code 412, with default header values.

Build is already assigned
*/
type AppendQuiltToBuildPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this append quilt to build precondition failed response has a 2xx status code
func (o *AppendQuiltToBuildPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append quilt to build precondition failed response has a 3xx status code
func (o *AppendQuiltToBuildPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append quilt to build precondition failed response has a 4xx status code
func (o *AppendQuiltToBuildPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this append quilt to build precondition failed response has a 5xx status code
func (o *AppendQuiltToBuildPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this append quilt to build precondition failed response a status code equal to that given
func (o *AppendQuiltToBuildPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the append quilt to build precondition failed response
func (o *AppendQuiltToBuildPreconditionFailed) Code() int {
	return 412
}

func (o *AppendQuiltToBuildPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /quilt/{quilt_id}/builds][%d] appendQuiltToBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AppendQuiltToBuildPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /quilt/{quilt_id}/builds][%d] appendQuiltToBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AppendQuiltToBuildPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendQuiltToBuildPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendQuiltToBuildDefault creates a AppendQuiltToBuildDefault with default headers values
func NewAppendQuiltToBuildDefault(code int) *AppendQuiltToBuildDefault {
	return &AppendQuiltToBuildDefault{
		_statusCode: code,
	}
}

/*
AppendQuiltToBuildDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type AppendQuiltToBuildDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this append quilt to build default response has a 2xx status code
func (o *AppendQuiltToBuildDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this append quilt to build default response has a 3xx status code
func (o *AppendQuiltToBuildDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this append quilt to build default response has a 4xx status code
func (o *AppendQuiltToBuildDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this append quilt to build default response has a 5xx status code
func (o *AppendQuiltToBuildDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this append quilt to build default response a status code equal to that given
func (o *AppendQuiltToBuildDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the append quilt to build default response
func (o *AppendQuiltToBuildDefault) Code() int {
	return o._statusCode
}

func (o *AppendQuiltToBuildDefault) Error() string {
	return fmt.Sprintf("[POST /quilt/{quilt_id}/builds][%d] AppendQuiltToBuild default  %+v", o._statusCode, o.Payload)
}

func (o *AppendQuiltToBuildDefault) String() string {
	return fmt.Sprintf("[POST /quilt/{quilt_id}/builds][%d] AppendQuiltToBuild default  %+v", o._statusCode, o.Payload)
}

func (o *AppendQuiltToBuildDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *AppendQuiltToBuildDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
