// Code generated by go-swagger; DO NOT EDIT.

package quilt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// DeleteQuiltFromBuildReader is a Reader for the DeleteQuiltFromBuild structure.
type DeleteQuiltFromBuildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteQuiltFromBuildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteQuiltFromBuildOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteQuiltFromBuildForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteQuiltFromBuildNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewDeleteQuiltFromBuildNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteQuiltFromBuildPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteQuiltFromBuildDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteQuiltFromBuildOK creates a DeleteQuiltFromBuildOK with default headers values
func NewDeleteQuiltFromBuildOK() *DeleteQuiltFromBuildOK {
	return &DeleteQuiltFromBuildOK{}
}

/*
DeleteQuiltFromBuildOK describes a response with status code 200, with default header values.

Plain success message
*/
type DeleteQuiltFromBuildOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete quilt from build o k response has a 2xx status code
func (o *DeleteQuiltFromBuildOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete quilt from build o k response has a 3xx status code
func (o *DeleteQuiltFromBuildOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quilt from build o k response has a 4xx status code
func (o *DeleteQuiltFromBuildOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete quilt from build o k response has a 5xx status code
func (o *DeleteQuiltFromBuildOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quilt from build o k response a status code equal to that given
func (o *DeleteQuiltFromBuildOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete quilt from build o k response
func (o *DeleteQuiltFromBuildOK) Code() int {
	return 200
}

func (o *DeleteQuiltFromBuildOK) Error() string {
	return fmt.Sprintf("[DELETE /quilt/{quilt_id}/builds][%d] deleteQuiltFromBuildOK  %+v", 200, o.Payload)
}

func (o *DeleteQuiltFromBuildOK) String() string {
	return fmt.Sprintf("[DELETE /quilt/{quilt_id}/builds][%d] deleteQuiltFromBuildOK  %+v", 200, o.Payload)
}

func (o *DeleteQuiltFromBuildOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteQuiltFromBuildOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQuiltFromBuildForbidden creates a DeleteQuiltFromBuildForbidden with default headers values
func NewDeleteQuiltFromBuildForbidden() *DeleteQuiltFromBuildForbidden {
	return &DeleteQuiltFromBuildForbidden{}
}

/*
DeleteQuiltFromBuildForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type DeleteQuiltFromBuildForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete quilt from build forbidden response has a 2xx status code
func (o *DeleteQuiltFromBuildForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quilt from build forbidden response has a 3xx status code
func (o *DeleteQuiltFromBuildForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quilt from build forbidden response has a 4xx status code
func (o *DeleteQuiltFromBuildForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete quilt from build forbidden response has a 5xx status code
func (o *DeleteQuiltFromBuildForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quilt from build forbidden response a status code equal to that given
func (o *DeleteQuiltFromBuildForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete quilt from build forbidden response
func (o *DeleteQuiltFromBuildForbidden) Code() int {
	return 403
}

func (o *DeleteQuiltFromBuildForbidden) Error() string {
	return fmt.Sprintf("[DELETE /quilt/{quilt_id}/builds][%d] deleteQuiltFromBuildForbidden  %+v", 403, o.Payload)
}

func (o *DeleteQuiltFromBuildForbidden) String() string {
	return fmt.Sprintf("[DELETE /quilt/{quilt_id}/builds][%d] deleteQuiltFromBuildForbidden  %+v", 403, o.Payload)
}

func (o *DeleteQuiltFromBuildForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteQuiltFromBuildForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQuiltFromBuildNotFound creates a DeleteQuiltFromBuildNotFound with default headers values
func NewDeleteQuiltFromBuildNotFound() *DeleteQuiltFromBuildNotFound {
	return &DeleteQuiltFromBuildNotFound{}
}

/*
DeleteQuiltFromBuildNotFound describes a response with status code 404, with default header values.

Quilt or build not found
*/
type DeleteQuiltFromBuildNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete quilt from build not found response has a 2xx status code
func (o *DeleteQuiltFromBuildNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quilt from build not found response has a 3xx status code
func (o *DeleteQuiltFromBuildNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quilt from build not found response has a 4xx status code
func (o *DeleteQuiltFromBuildNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete quilt from build not found response has a 5xx status code
func (o *DeleteQuiltFromBuildNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quilt from build not found response a status code equal to that given
func (o *DeleteQuiltFromBuildNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete quilt from build not found response
func (o *DeleteQuiltFromBuildNotFound) Code() int {
	return 404
}

func (o *DeleteQuiltFromBuildNotFound) Error() string {
	return fmt.Sprintf("[DELETE /quilt/{quilt_id}/builds][%d] deleteQuiltFromBuildNotFound  %+v", 404, o.Payload)
}

func (o *DeleteQuiltFromBuildNotFound) String() string {
	return fmt.Sprintf("[DELETE /quilt/{quilt_id}/builds][%d] deleteQuiltFromBuildNotFound  %+v", 404, o.Payload)
}

func (o *DeleteQuiltFromBuildNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteQuiltFromBuildNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQuiltFromBuildNotAcceptable creates a DeleteQuiltFromBuildNotAcceptable with default headers values
func NewDeleteQuiltFromBuildNotAcceptable() *DeleteQuiltFromBuildNotAcceptable {
	return &DeleteQuiltFromBuildNotAcceptable{}
}

/*
DeleteQuiltFromBuildNotAcceptable describes a response with status code 406, with default header values.

Failed to update build
*/
type DeleteQuiltFromBuildNotAcceptable struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete quilt from build not acceptable response has a 2xx status code
func (o *DeleteQuiltFromBuildNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quilt from build not acceptable response has a 3xx status code
func (o *DeleteQuiltFromBuildNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quilt from build not acceptable response has a 4xx status code
func (o *DeleteQuiltFromBuildNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete quilt from build not acceptable response has a 5xx status code
func (o *DeleteQuiltFromBuildNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quilt from build not acceptable response a status code equal to that given
func (o *DeleteQuiltFromBuildNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the delete quilt from build not acceptable response
func (o *DeleteQuiltFromBuildNotAcceptable) Code() int {
	return 406
}

func (o *DeleteQuiltFromBuildNotAcceptable) Error() string {
	return fmt.Sprintf("[DELETE /quilt/{quilt_id}/builds][%d] deleteQuiltFromBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *DeleteQuiltFromBuildNotAcceptable) String() string {
	return fmt.Sprintf("[DELETE /quilt/{quilt_id}/builds][%d] deleteQuiltFromBuildNotAcceptable  %+v", 406, o.Payload)
}

func (o *DeleteQuiltFromBuildNotAcceptable) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteQuiltFromBuildNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQuiltFromBuildPreconditionFailed creates a DeleteQuiltFromBuildPreconditionFailed with default headers values
func NewDeleteQuiltFromBuildPreconditionFailed() *DeleteQuiltFromBuildPreconditionFailed {
	return &DeleteQuiltFromBuildPreconditionFailed{}
}

/*
DeleteQuiltFromBuildPreconditionFailed describes a response with status code 412, with default header values.

Build is not assigned
*/
type DeleteQuiltFromBuildPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete quilt from build precondition failed response has a 2xx status code
func (o *DeleteQuiltFromBuildPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete quilt from build precondition failed response has a 3xx status code
func (o *DeleteQuiltFromBuildPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete quilt from build precondition failed response has a 4xx status code
func (o *DeleteQuiltFromBuildPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete quilt from build precondition failed response has a 5xx status code
func (o *DeleteQuiltFromBuildPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete quilt from build precondition failed response a status code equal to that given
func (o *DeleteQuiltFromBuildPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete quilt from build precondition failed response
func (o *DeleteQuiltFromBuildPreconditionFailed) Code() int {
	return 412
}

func (o *DeleteQuiltFromBuildPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /quilt/{quilt_id}/builds][%d] deleteQuiltFromBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteQuiltFromBuildPreconditionFailed) String() string {
	return fmt.Sprintf("[DELETE /quilt/{quilt_id}/builds][%d] deleteQuiltFromBuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteQuiltFromBuildPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteQuiltFromBuildPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQuiltFromBuildDefault creates a DeleteQuiltFromBuildDefault with default headers values
func NewDeleteQuiltFromBuildDefault(code int) *DeleteQuiltFromBuildDefault {
	return &DeleteQuiltFromBuildDefault{
		_statusCode: code,
	}
}

/*
DeleteQuiltFromBuildDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type DeleteQuiltFromBuildDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this delete quilt from build default response has a 2xx status code
func (o *DeleteQuiltFromBuildDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete quilt from build default response has a 3xx status code
func (o *DeleteQuiltFromBuildDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete quilt from build default response has a 4xx status code
func (o *DeleteQuiltFromBuildDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete quilt from build default response has a 5xx status code
func (o *DeleteQuiltFromBuildDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete quilt from build default response a status code equal to that given
func (o *DeleteQuiltFromBuildDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete quilt from build default response
func (o *DeleteQuiltFromBuildDefault) Code() int {
	return o._statusCode
}

func (o *DeleteQuiltFromBuildDefault) Error() string {
	return fmt.Sprintf("[DELETE /quilt/{quilt_id}/builds][%d] DeleteQuiltFromBuild default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteQuiltFromBuildDefault) String() string {
	return fmt.Sprintf("[DELETE /quilt/{quilt_id}/builds][%d] DeleteQuiltFromBuild default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteQuiltFromBuildDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteQuiltFromBuildDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
