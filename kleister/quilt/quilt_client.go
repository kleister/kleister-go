// Code generated by go-swagger; DO NOT EDIT.

package quilt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new quilt API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for quilt API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AppendQuiltToBuild(params *AppendQuiltToBuildParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppendQuiltToBuildOK, error)

	DeleteQuiltFromBuild(params *DeleteQuiltFromBuildParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQuiltFromBuildOK, error)

	ListQuiltBuilds(params *ListQuiltBuildsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListQuiltBuildsOK, error)

	ListQuilts(params *ListQuiltsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListQuiltsOK, error)

	SearchQuilts(params *SearchQuiltsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchQuiltsOK, error)

	UpdateQuilt(params *UpdateQuiltParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateQuiltOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AppendQuiltToBuild assigns a build to a quilt version
*/
func (a *Client) AppendQuiltToBuild(params *AppendQuiltToBuildParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppendQuiltToBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendQuiltToBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppendQuiltToBuild",
		Method:             "POST",
		PathPattern:        "/quilt/{quilt_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppendQuiltToBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppendQuiltToBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppendQuiltToBuildDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteQuiltFromBuild unlinks a build from a quilt version
*/
func (a *Client) DeleteQuiltFromBuild(params *DeleteQuiltFromBuildParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQuiltFromBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQuiltFromBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteQuiltFromBuild",
		Method:             "DELETE",
		PathPattern:        "/quilt/{quilt_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteQuiltFromBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteQuiltFromBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteQuiltFromBuildDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListQuiltBuilds fetches the builds assigned to a quilt version
*/
func (a *Client) ListQuiltBuilds(params *ListQuiltBuildsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListQuiltBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListQuiltBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListQuiltBuilds",
		Method:             "GET",
		PathPattern:        "/quilt/{quilt_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListQuiltBuildsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListQuiltBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListQuiltBuildsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListQuilts fetches the available quilt versions
*/
func (a *Client) ListQuilts(params *ListQuiltsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListQuiltsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListQuiltsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListQuilts",
		Method:             "GET",
		PathPattern:        "/quilt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListQuiltsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListQuiltsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListQuiltsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchQuilts searches for available quilt versions
*/
func (a *Client) SearchQuilts(params *SearchQuiltsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchQuiltsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchQuiltsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchQuilts",
		Method:             "GET",
		PathPattern:        "/quilt/{quilt_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchQuiltsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchQuiltsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchQuiltsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateQuilt updates the available quilt versions
*/
func (a *Client) UpdateQuilt(params *UpdateQuiltParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateQuiltOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateQuiltParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateQuilt",
		Method:             "PUT",
		PathPattern:        "/quilt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateQuiltReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateQuiltOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateQuiltDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
