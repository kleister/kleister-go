// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// PermitUserPackReader is a Reader for the PermitUserPack structure.
type PermitUserPackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PermitUserPackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPermitUserPackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPermitUserPackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPermitUserPackPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPermitUserPackUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPermitUserPackDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPermitUserPackOK creates a PermitUserPackOK with default headers values
func NewPermitUserPackOK() *PermitUserPackOK {
	return &PermitUserPackOK{}
}

/* PermitUserPackOK describes a response with status code 200, with default header values.

Plain success message
*/
type PermitUserPackOK struct {
	Payload *models.GeneralError
}

func (o *PermitUserPackOK) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/packs][%d] permitUserPackOK  %+v", 200, o.Payload)
}
func (o *PermitUserPackOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserPackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserPackForbidden creates a PermitUserPackForbidden with default headers values
func NewPermitUserPackForbidden() *PermitUserPackForbidden {
	return &PermitUserPackForbidden{}
}

/* PermitUserPackForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type PermitUserPackForbidden struct {
	Payload *models.GeneralError
}

func (o *PermitUserPackForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/packs][%d] permitUserPackForbidden  %+v", 403, o.Payload)
}
func (o *PermitUserPackForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserPackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserPackPreconditionFailed creates a PermitUserPackPreconditionFailed with default headers values
func NewPermitUserPackPreconditionFailed() *PermitUserPackPreconditionFailed {
	return &PermitUserPackPreconditionFailed{}
}

/* PermitUserPackPreconditionFailed describes a response with status code 412, with default header values.

Failed to parse request body
*/
type PermitUserPackPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *PermitUserPackPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/packs][%d] permitUserPackPreconditionFailed  %+v", 412, o.Payload)
}
func (o *PermitUserPackPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserPackPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserPackUnprocessableEntity creates a PermitUserPackUnprocessableEntity with default headers values
func NewPermitUserPackUnprocessableEntity() *PermitUserPackUnprocessableEntity {
	return &PermitUserPackUnprocessableEntity{}
}

/* PermitUserPackUnprocessableEntity describes a response with status code 422, with default header values.

Pack is not assigned
*/
type PermitUserPackUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *PermitUserPackUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/packs][%d] permitUserPackUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *PermitUserPackUnprocessableEntity) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserPackUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserPackDefault creates a PermitUserPackDefault with default headers values
func NewPermitUserPackDefault(code int) *PermitUserPackDefault {
	return &PermitUserPackDefault{
		_statusCode: code,
	}
}

/* PermitUserPackDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type PermitUserPackDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the permit user pack default response
func (o *PermitUserPackDefault) Code() int {
	return o._statusCode
}

func (o *PermitUserPackDefault) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/packs][%d] PermitUserPack default  %+v", o._statusCode, o.Payload)
}
func (o *PermitUserPackDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserPackDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
