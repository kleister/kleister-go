// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kleister/kleister-go/models"
)

// AppendUserToPackReader is a Reader for the AppendUserToPack structure.
type AppendUserToPackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendUserToPackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAppendUserToPackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewAppendUserToPackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewAppendUserToPackPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewAppendUserToPackUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAppendUserToPackDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppendUserToPackOK creates a AppendUserToPackOK with default headers values
func NewAppendUserToPackOK() *AppendUserToPackOK {
	return &AppendUserToPackOK{}
}

/*AppendUserToPackOK handles this case with default header values.

Plain success message
*/
type AppendUserToPackOK struct {
	Payload *models.GeneralError
}

func (o *AppendUserToPackOK) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/packs][%d] appendUserToPackOK  %+v", 200, o.Payload)
}

func (o *AppendUserToPackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendUserToPackForbidden creates a AppendUserToPackForbidden with default headers values
func NewAppendUserToPackForbidden() *AppendUserToPackForbidden {
	return &AppendUserToPackForbidden{}
}

/*AppendUserToPackForbidden handles this case with default header values.

User is not authorized
*/
type AppendUserToPackForbidden struct {
	Payload *models.GeneralError
}

func (o *AppendUserToPackForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/packs][%d] appendUserToPackForbidden  %+v", 403, o.Payload)
}

func (o *AppendUserToPackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendUserToPackPreconditionFailed creates a AppendUserToPackPreconditionFailed with default headers values
func NewAppendUserToPackPreconditionFailed() *AppendUserToPackPreconditionFailed {
	return &AppendUserToPackPreconditionFailed{}
}

/*AppendUserToPackPreconditionFailed handles this case with default header values.

Failed to parse request body
*/
type AppendUserToPackPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *AppendUserToPackPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/packs][%d] appendUserToPackPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AppendUserToPackPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendUserToPackUnprocessableEntity creates a AppendUserToPackUnprocessableEntity with default headers values
func NewAppendUserToPackUnprocessableEntity() *AppendUserToPackUnprocessableEntity {
	return &AppendUserToPackUnprocessableEntity{}
}

/*AppendUserToPackUnprocessableEntity handles this case with default header values.

Pack is already assigned
*/
type AppendUserToPackUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *AppendUserToPackUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/packs][%d] appendUserToPackUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AppendUserToPackUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendUserToPackDefault creates a AppendUserToPackDefault with default headers values
func NewAppendUserToPackDefault(code int) *AppendUserToPackDefault {
	return &AppendUserToPackDefault{
		_statusCode: code,
	}
}

/*AppendUserToPackDefault handles this case with default header values.

Some error unrelated to the handler
*/
type AppendUserToPackDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the append user to pack default response
func (o *AppendUserToPackDefault) Code() int {
	return o._statusCode
}

func (o *AppendUserToPackDefault) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/packs][%d] AppendUserToPack default  %+v", o._statusCode, o.Payload)
}

func (o *AppendUserToPackDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
