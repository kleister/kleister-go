// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kleister/kleister-go/models"
)

// AppendUserToModReader is a Reader for the AppendUserToMod structure.
type AppendUserToModReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendUserToModReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAppendUserToModOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewAppendUserToModForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewAppendUserToModPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewAppendUserToModUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAppendUserToModDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppendUserToModOK creates a AppendUserToModOK with default headers values
func NewAppendUserToModOK() *AppendUserToModOK {
	return &AppendUserToModOK{}
}

/*AppendUserToModOK handles this case with default header values.

Plain success message
*/
type AppendUserToModOK struct {
	Payload *models.GeneralError
}

func (o *AppendUserToModOK) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/mods][%d] appendUserToModOK  %+v", 200, o.Payload)
}

func (o *AppendUserToModOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendUserToModForbidden creates a AppendUserToModForbidden with default headers values
func NewAppendUserToModForbidden() *AppendUserToModForbidden {
	return &AppendUserToModForbidden{}
}

/*AppendUserToModForbidden handles this case with default header values.

User is not authorized
*/
type AppendUserToModForbidden struct {
	Payload *models.GeneralError
}

func (o *AppendUserToModForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/mods][%d] appendUserToModForbidden  %+v", 403, o.Payload)
}

func (o *AppendUserToModForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendUserToModPreconditionFailed creates a AppendUserToModPreconditionFailed with default headers values
func NewAppendUserToModPreconditionFailed() *AppendUserToModPreconditionFailed {
	return &AppendUserToModPreconditionFailed{}
}

/*AppendUserToModPreconditionFailed handles this case with default header values.

Failed to parse request body
*/
type AppendUserToModPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *AppendUserToModPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/mods][%d] appendUserToModPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AppendUserToModPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendUserToModUnprocessableEntity creates a AppendUserToModUnprocessableEntity with default headers values
func NewAppendUserToModUnprocessableEntity() *AppendUserToModUnprocessableEntity {
	return &AppendUserToModUnprocessableEntity{}
}

/*AppendUserToModUnprocessableEntity handles this case with default header values.

Mod is already assigned
*/
type AppendUserToModUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *AppendUserToModUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/mods][%d] appendUserToModUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AppendUserToModUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendUserToModDefault creates a AppendUserToModDefault with default headers values
func NewAppendUserToModDefault(code int) *AppendUserToModDefault {
	return &AppendUserToModDefault{
		_statusCode: code,
	}
}

/*AppendUserToModDefault handles this case with default header values.

Some error unrelated to the handler
*/
type AppendUserToModDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the append user to mod default response
func (o *AppendUserToModDefault) Code() int {
	return o._statusCode
}

func (o *AppendUserToModDefault) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/mods][%d] AppendUserToMod default  %+v", o._statusCode, o.Payload)
}

func (o *AppendUserToModDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
