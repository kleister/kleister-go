// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/v1/models"
)

// PermitUserModReader is a Reader for the PermitUserMod structure.
type PermitUserModReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PermitUserModReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPermitUserModOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPermitUserModForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPermitUserModNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPermitUserModPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPermitUserModUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPermitUserModDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPermitUserModOK creates a PermitUserModOK with default headers values
func NewPermitUserModOK() *PermitUserModOK {
	return &PermitUserModOK{}
}

/*
PermitUserModOK describes a response with status code 200, with default header values.

Plain success message
*/
type PermitUserModOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit user mod o k response has a 2xx status code
func (o *PermitUserModOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this permit user mod o k response has a 3xx status code
func (o *PermitUserModOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit user mod o k response has a 4xx status code
func (o *PermitUserModOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this permit user mod o k response has a 5xx status code
func (o *PermitUserModOK) IsServerError() bool {
	return false
}

// IsCode returns true when this permit user mod o k response a status code equal to that given
func (o *PermitUserModOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the permit user mod o k response
func (o *PermitUserModOK) Code() int {
	return 200
}

func (o *PermitUserModOK) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModOK  %+v", 200, o.Payload)
}

func (o *PermitUserModOK) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModOK  %+v", 200, o.Payload)
}

func (o *PermitUserModOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserModOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserModForbidden creates a PermitUserModForbidden with default headers values
func NewPermitUserModForbidden() *PermitUserModForbidden {
	return &PermitUserModForbidden{}
}

/*
PermitUserModForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type PermitUserModForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit user mod forbidden response has a 2xx status code
func (o *PermitUserModForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit user mod forbidden response has a 3xx status code
func (o *PermitUserModForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit user mod forbidden response has a 4xx status code
func (o *PermitUserModForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit user mod forbidden response has a 5xx status code
func (o *PermitUserModForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this permit user mod forbidden response a status code equal to that given
func (o *PermitUserModForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the permit user mod forbidden response
func (o *PermitUserModForbidden) Code() int {
	return 403
}

func (o *PermitUserModForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModForbidden  %+v", 403, o.Payload)
}

func (o *PermitUserModForbidden) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModForbidden  %+v", 403, o.Payload)
}

func (o *PermitUserModForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserModForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserModNotFound creates a PermitUserModNotFound with default headers values
func NewPermitUserModNotFound() *PermitUserModNotFound {
	return &PermitUserModNotFound{}
}

/*
PermitUserModNotFound describes a response with status code 404, with default header values.

User or mod not found
*/
type PermitUserModNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit user mod not found response has a 2xx status code
func (o *PermitUserModNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit user mod not found response has a 3xx status code
func (o *PermitUserModNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit user mod not found response has a 4xx status code
func (o *PermitUserModNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit user mod not found response has a 5xx status code
func (o *PermitUserModNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this permit user mod not found response a status code equal to that given
func (o *PermitUserModNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the permit user mod not found response
func (o *PermitUserModNotFound) Code() int {
	return 404
}

func (o *PermitUserModNotFound) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModNotFound  %+v", 404, o.Payload)
}

func (o *PermitUserModNotFound) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModNotFound  %+v", 404, o.Payload)
}

func (o *PermitUserModNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserModNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserModPreconditionFailed creates a PermitUserModPreconditionFailed with default headers values
func NewPermitUserModPreconditionFailed() *PermitUserModPreconditionFailed {
	return &PermitUserModPreconditionFailed{}
}

/*
PermitUserModPreconditionFailed describes a response with status code 412, with default header values.

Mod is not assigned
*/
type PermitUserModPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit user mod precondition failed response has a 2xx status code
func (o *PermitUserModPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit user mod precondition failed response has a 3xx status code
func (o *PermitUserModPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit user mod precondition failed response has a 4xx status code
func (o *PermitUserModPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit user mod precondition failed response has a 5xx status code
func (o *PermitUserModPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this permit user mod precondition failed response a status code equal to that given
func (o *PermitUserModPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the permit user mod precondition failed response
func (o *PermitUserModPreconditionFailed) Code() int {
	return 412
}

func (o *PermitUserModPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitUserModPreconditionFailed) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitUserModPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserModPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserModUnprocessableEntity creates a PermitUserModUnprocessableEntity with default headers values
func NewPermitUserModUnprocessableEntity() *PermitUserModUnprocessableEntity {
	return &PermitUserModUnprocessableEntity{}
}

/*
PermitUserModUnprocessableEntity describes a response with status code 422, with default header values.

Failed to validate request
*/
type PermitUserModUnprocessableEntity struct {
	Payload *models.ValidationError
}

// IsSuccess returns true when this permit user mod unprocessable entity response has a 2xx status code
func (o *PermitUserModUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit user mod unprocessable entity response has a 3xx status code
func (o *PermitUserModUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit user mod unprocessable entity response has a 4xx status code
func (o *PermitUserModUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit user mod unprocessable entity response has a 5xx status code
func (o *PermitUserModUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this permit user mod unprocessable entity response a status code equal to that given
func (o *PermitUserModUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the permit user mod unprocessable entity response
func (o *PermitUserModUnprocessableEntity) Code() int {
	return 422
}

func (o *PermitUserModUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitUserModUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitUserModUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *PermitUserModUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserModDefault creates a PermitUserModDefault with default headers values
func NewPermitUserModDefault(code int) *PermitUserModDefault {
	return &PermitUserModDefault{
		_statusCode: code,
	}
}

/*
PermitUserModDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type PermitUserModDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this permit user mod default response has a 2xx status code
func (o *PermitUserModDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this permit user mod default response has a 3xx status code
func (o *PermitUserModDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this permit user mod default response has a 4xx status code
func (o *PermitUserModDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this permit user mod default response has a 5xx status code
func (o *PermitUserModDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this permit user mod default response a status code equal to that given
func (o *PermitUserModDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the permit user mod default response
func (o *PermitUserModDefault) Code() int {
	return o._statusCode
}

func (o *PermitUserModDefault) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] PermitUserMod default  %+v", o._statusCode, o.Payload)
}

func (o *PermitUserModDefault) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] PermitUserMod default  %+v", o._statusCode, o.Payload)
}

func (o *PermitUserModDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserModDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
