// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kleister/kleister-go/models"
)

// PermitUserModReader is a Reader for the PermitUserMod structure.
type PermitUserModReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PermitUserModReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPermitUserModOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewPermitUserModForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewPermitUserModPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPermitUserModUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPermitUserModDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPermitUserModOK creates a PermitUserModOK with default headers values
func NewPermitUserModOK() *PermitUserModOK {
	return &PermitUserModOK{}
}

/*PermitUserModOK handles this case with default header values.

Plain success message
*/
type PermitUserModOK struct {
	Payload *models.GeneralError
}

func (o *PermitUserModOK) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModOK  %+v", 200, o.Payload)
}

func (o *PermitUserModOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserModForbidden creates a PermitUserModForbidden with default headers values
func NewPermitUserModForbidden() *PermitUserModForbidden {
	return &PermitUserModForbidden{}
}

/*PermitUserModForbidden handles this case with default header values.

User is not authorized
*/
type PermitUserModForbidden struct {
	Payload *models.GeneralError
}

func (o *PermitUserModForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModForbidden  %+v", 403, o.Payload)
}

func (o *PermitUserModForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserModPreconditionFailed creates a PermitUserModPreconditionFailed with default headers values
func NewPermitUserModPreconditionFailed() *PermitUserModPreconditionFailed {
	return &PermitUserModPreconditionFailed{}
}

/*PermitUserModPreconditionFailed handles this case with default header values.

Failed to parse request body
*/
type PermitUserModPreconditionFailed struct {
	Payload *models.GeneralError
}

func (o *PermitUserModPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitUserModPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserModUnprocessableEntity creates a PermitUserModUnprocessableEntity with default headers values
func NewPermitUserModUnprocessableEntity() *PermitUserModUnprocessableEntity {
	return &PermitUserModUnprocessableEntity{}
}

/*PermitUserModUnprocessableEntity handles this case with default header values.

Mod is not assigned
*/
type PermitUserModUnprocessableEntity struct {
	Payload *models.GeneralError
}

func (o *PermitUserModUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] permitUserModUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitUserModUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserModDefault creates a PermitUserModDefault with default headers values
func NewPermitUserModDefault(code int) *PermitUserModDefault {
	return &PermitUserModDefault{
		_statusCode: code,
	}
}

/*PermitUserModDefault handles this case with default header values.

Some error unrelated to the handler
*/
type PermitUserModDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// Code gets the status code for the permit user mod default response
func (o *PermitUserModDefault) Code() int {
	return o._statusCode
}

func (o *PermitUserModDefault) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/mods][%d] PermitUserMod default  %+v", o._statusCode, o.Payload)
}

func (o *PermitUserModDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
