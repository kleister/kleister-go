// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// DeleteUserFromTeamReader is a Reader for the DeleteUserFromTeam structure.
type DeleteUserFromTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteUserFromTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteUserFromTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteUserFromTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteUserFromTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteUserFromTeamPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteUserFromTeamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteUserFromTeamOK creates a DeleteUserFromTeamOK with default headers values
func NewDeleteUserFromTeamOK() *DeleteUserFromTeamOK {
	return &DeleteUserFromTeamOK{}
}

/*
DeleteUserFromTeamOK describes a response with status code 200, with default header values.

Plain success message
*/
type DeleteUserFromTeamOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete user from team o k response has a 2xx status code
func (o *DeleteUserFromTeamOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete user from team o k response has a 3xx status code
func (o *DeleteUserFromTeamOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user from team o k response has a 4xx status code
func (o *DeleteUserFromTeamOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete user from team o k response has a 5xx status code
func (o *DeleteUserFromTeamOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user from team o k response a status code equal to that given
func (o *DeleteUserFromTeamOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete user from team o k response
func (o *DeleteUserFromTeamOK) Code() int {
	return 200
}

func (o *DeleteUserFromTeamOK) Error() string {
	return fmt.Sprintf("[DELETE /users/{user_id}/teams][%d] deleteUserFromTeamOK  %+v", 200, o.Payload)
}

func (o *DeleteUserFromTeamOK) String() string {
	return fmt.Sprintf("[DELETE /users/{user_id}/teams][%d] deleteUserFromTeamOK  %+v", 200, o.Payload)
}

func (o *DeleteUserFromTeamOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteUserFromTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserFromTeamForbidden creates a DeleteUserFromTeamForbidden with default headers values
func NewDeleteUserFromTeamForbidden() *DeleteUserFromTeamForbidden {
	return &DeleteUserFromTeamForbidden{}
}

/*
DeleteUserFromTeamForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type DeleteUserFromTeamForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete user from team forbidden response has a 2xx status code
func (o *DeleteUserFromTeamForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user from team forbidden response has a 3xx status code
func (o *DeleteUserFromTeamForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user from team forbidden response has a 4xx status code
func (o *DeleteUserFromTeamForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user from team forbidden response has a 5xx status code
func (o *DeleteUserFromTeamForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user from team forbidden response a status code equal to that given
func (o *DeleteUserFromTeamForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete user from team forbidden response
func (o *DeleteUserFromTeamForbidden) Code() int {
	return 403
}

func (o *DeleteUserFromTeamForbidden) Error() string {
	return fmt.Sprintf("[DELETE /users/{user_id}/teams][%d] deleteUserFromTeamForbidden  %+v", 403, o.Payload)
}

func (o *DeleteUserFromTeamForbidden) String() string {
	return fmt.Sprintf("[DELETE /users/{user_id}/teams][%d] deleteUserFromTeamForbidden  %+v", 403, o.Payload)
}

func (o *DeleteUserFromTeamForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteUserFromTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserFromTeamNotFound creates a DeleteUserFromTeamNotFound with default headers values
func NewDeleteUserFromTeamNotFound() *DeleteUserFromTeamNotFound {
	return &DeleteUserFromTeamNotFound{}
}

/*
DeleteUserFromTeamNotFound describes a response with status code 404, with default header values.

User or team not found
*/
type DeleteUserFromTeamNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete user from team not found response has a 2xx status code
func (o *DeleteUserFromTeamNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user from team not found response has a 3xx status code
func (o *DeleteUserFromTeamNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user from team not found response has a 4xx status code
func (o *DeleteUserFromTeamNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user from team not found response has a 5xx status code
func (o *DeleteUserFromTeamNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user from team not found response a status code equal to that given
func (o *DeleteUserFromTeamNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete user from team not found response
func (o *DeleteUserFromTeamNotFound) Code() int {
	return 404
}

func (o *DeleteUserFromTeamNotFound) Error() string {
	return fmt.Sprintf("[DELETE /users/{user_id}/teams][%d] deleteUserFromTeamNotFound  %+v", 404, o.Payload)
}

func (o *DeleteUserFromTeamNotFound) String() string {
	return fmt.Sprintf("[DELETE /users/{user_id}/teams][%d] deleteUserFromTeamNotFound  %+v", 404, o.Payload)
}

func (o *DeleteUserFromTeamNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteUserFromTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserFromTeamPreconditionFailed creates a DeleteUserFromTeamPreconditionFailed with default headers values
func NewDeleteUserFromTeamPreconditionFailed() *DeleteUserFromTeamPreconditionFailed {
	return &DeleteUserFromTeamPreconditionFailed{}
}

/*
DeleteUserFromTeamPreconditionFailed describes a response with status code 412, with default header values.

Team is not attached
*/
type DeleteUserFromTeamPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this delete user from team precondition failed response has a 2xx status code
func (o *DeleteUserFromTeamPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user from team precondition failed response has a 3xx status code
func (o *DeleteUserFromTeamPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user from team precondition failed response has a 4xx status code
func (o *DeleteUserFromTeamPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user from team precondition failed response has a 5xx status code
func (o *DeleteUserFromTeamPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user from team precondition failed response a status code equal to that given
func (o *DeleteUserFromTeamPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete user from team precondition failed response
func (o *DeleteUserFromTeamPreconditionFailed) Code() int {
	return 412
}

func (o *DeleteUserFromTeamPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /users/{user_id}/teams][%d] deleteUserFromTeamPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteUserFromTeamPreconditionFailed) String() string {
	return fmt.Sprintf("[DELETE /users/{user_id}/teams][%d] deleteUserFromTeamPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteUserFromTeamPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteUserFromTeamPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserFromTeamDefault creates a DeleteUserFromTeamDefault with default headers values
func NewDeleteUserFromTeamDefault(code int) *DeleteUserFromTeamDefault {
	return &DeleteUserFromTeamDefault{
		_statusCode: code,
	}
}

/*
DeleteUserFromTeamDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type DeleteUserFromTeamDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this delete user from team default response has a 2xx status code
func (o *DeleteUserFromTeamDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete user from team default response has a 3xx status code
func (o *DeleteUserFromTeamDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete user from team default response has a 4xx status code
func (o *DeleteUserFromTeamDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete user from team default response has a 5xx status code
func (o *DeleteUserFromTeamDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete user from team default response a status code equal to that given
func (o *DeleteUserFromTeamDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete user from team default response
func (o *DeleteUserFromTeamDefault) Code() int {
	return o._statusCode
}

func (o *DeleteUserFromTeamDefault) Error() string {
	return fmt.Sprintf("[DELETE /users/{user_id}/teams][%d] DeleteUserFromTeam default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteUserFromTeamDefault) String() string {
	return fmt.Sprintf("[DELETE /users/{user_id}/teams][%d] DeleteUserFromTeam default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteUserFromTeamDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *DeleteUserFromTeamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
