// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kleister/kleister-go/models"
)

// PermitUserTeamReader is a Reader for the PermitUserTeam structure.
type PermitUserTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PermitUserTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPermitUserTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPermitUserTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPermitUserTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPermitUserTeamPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPermitUserTeamUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPermitUserTeamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPermitUserTeamOK creates a PermitUserTeamOK with default headers values
func NewPermitUserTeamOK() *PermitUserTeamOK {
	return &PermitUserTeamOK{}
}

/*
PermitUserTeamOK describes a response with status code 200, with default header values.

Plain success message
*/
type PermitUserTeamOK struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit user team o k response has a 2xx status code
func (o *PermitUserTeamOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this permit user team o k response has a 3xx status code
func (o *PermitUserTeamOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit user team o k response has a 4xx status code
func (o *PermitUserTeamOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this permit user team o k response has a 5xx status code
func (o *PermitUserTeamOK) IsServerError() bool {
	return false
}

// IsCode returns true when this permit user team o k response a status code equal to that given
func (o *PermitUserTeamOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the permit user team o k response
func (o *PermitUserTeamOK) Code() int {
	return 200
}

func (o *PermitUserTeamOK) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/teams][%d] permitUserTeamOK  %+v", 200, o.Payload)
}

func (o *PermitUserTeamOK) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/teams][%d] permitUserTeamOK  %+v", 200, o.Payload)
}

func (o *PermitUserTeamOK) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserTeamForbidden creates a PermitUserTeamForbidden with default headers values
func NewPermitUserTeamForbidden() *PermitUserTeamForbidden {
	return &PermitUserTeamForbidden{}
}

/*
PermitUserTeamForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type PermitUserTeamForbidden struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit user team forbidden response has a 2xx status code
func (o *PermitUserTeamForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit user team forbidden response has a 3xx status code
func (o *PermitUserTeamForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit user team forbidden response has a 4xx status code
func (o *PermitUserTeamForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit user team forbidden response has a 5xx status code
func (o *PermitUserTeamForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this permit user team forbidden response a status code equal to that given
func (o *PermitUserTeamForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the permit user team forbidden response
func (o *PermitUserTeamForbidden) Code() int {
	return 403
}

func (o *PermitUserTeamForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/teams][%d] permitUserTeamForbidden  %+v", 403, o.Payload)
}

func (o *PermitUserTeamForbidden) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/teams][%d] permitUserTeamForbidden  %+v", 403, o.Payload)
}

func (o *PermitUserTeamForbidden) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserTeamNotFound creates a PermitUserTeamNotFound with default headers values
func NewPermitUserTeamNotFound() *PermitUserTeamNotFound {
	return &PermitUserTeamNotFound{}
}

/*
PermitUserTeamNotFound describes a response with status code 404, with default header values.

User or team not found
*/
type PermitUserTeamNotFound struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit user team not found response has a 2xx status code
func (o *PermitUserTeamNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit user team not found response has a 3xx status code
func (o *PermitUserTeamNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit user team not found response has a 4xx status code
func (o *PermitUserTeamNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit user team not found response has a 5xx status code
func (o *PermitUserTeamNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this permit user team not found response a status code equal to that given
func (o *PermitUserTeamNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the permit user team not found response
func (o *PermitUserTeamNotFound) Code() int {
	return 404
}

func (o *PermitUserTeamNotFound) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/teams][%d] permitUserTeamNotFound  %+v", 404, o.Payload)
}

func (o *PermitUserTeamNotFound) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/teams][%d] permitUserTeamNotFound  %+v", 404, o.Payload)
}

func (o *PermitUserTeamNotFound) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserTeamPreconditionFailed creates a PermitUserTeamPreconditionFailed with default headers values
func NewPermitUserTeamPreconditionFailed() *PermitUserTeamPreconditionFailed {
	return &PermitUserTeamPreconditionFailed{}
}

/*
PermitUserTeamPreconditionFailed describes a response with status code 412, with default header values.

Team is not attached
*/
type PermitUserTeamPreconditionFailed struct {
	Payload *models.GeneralError
}

// IsSuccess returns true when this permit user team precondition failed response has a 2xx status code
func (o *PermitUserTeamPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit user team precondition failed response has a 3xx status code
func (o *PermitUserTeamPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit user team precondition failed response has a 4xx status code
func (o *PermitUserTeamPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit user team precondition failed response has a 5xx status code
func (o *PermitUserTeamPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this permit user team precondition failed response a status code equal to that given
func (o *PermitUserTeamPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the permit user team precondition failed response
func (o *PermitUserTeamPreconditionFailed) Code() int {
	return 412
}

func (o *PermitUserTeamPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/teams][%d] permitUserTeamPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitUserTeamPreconditionFailed) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/teams][%d] permitUserTeamPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PermitUserTeamPreconditionFailed) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserTeamPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserTeamUnprocessableEntity creates a PermitUserTeamUnprocessableEntity with default headers values
func NewPermitUserTeamUnprocessableEntity() *PermitUserTeamUnprocessableEntity {
	return &PermitUserTeamUnprocessableEntity{}
}

/*
PermitUserTeamUnprocessableEntity describes a response with status code 422, with default header values.

Failed to validate request
*/
type PermitUserTeamUnprocessableEntity struct {
	Payload *models.ValidationError
}

// IsSuccess returns true when this permit user team unprocessable entity response has a 2xx status code
func (o *PermitUserTeamUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this permit user team unprocessable entity response has a 3xx status code
func (o *PermitUserTeamUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this permit user team unprocessable entity response has a 4xx status code
func (o *PermitUserTeamUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this permit user team unprocessable entity response has a 5xx status code
func (o *PermitUserTeamUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this permit user team unprocessable entity response a status code equal to that given
func (o *PermitUserTeamUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the permit user team unprocessable entity response
func (o *PermitUserTeamUnprocessableEntity) Code() int {
	return 422
}

func (o *PermitUserTeamUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/teams][%d] permitUserTeamUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitUserTeamUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/teams][%d] permitUserTeamUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PermitUserTeamUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *PermitUserTeamUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPermitUserTeamDefault creates a PermitUserTeamDefault with default headers values
func NewPermitUserTeamDefault(code int) *PermitUserTeamDefault {
	return &PermitUserTeamDefault{
		_statusCode: code,
	}
}

/*
PermitUserTeamDefault describes a response with status code -1, with default header values.

Some error unrelated to the handler
*/
type PermitUserTeamDefault struct {
	_statusCode int

	Payload *models.GeneralError
}

// IsSuccess returns true when this permit user team default response has a 2xx status code
func (o *PermitUserTeamDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this permit user team default response has a 3xx status code
func (o *PermitUserTeamDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this permit user team default response has a 4xx status code
func (o *PermitUserTeamDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this permit user team default response has a 5xx status code
func (o *PermitUserTeamDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this permit user team default response a status code equal to that given
func (o *PermitUserTeamDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the permit user team default response
func (o *PermitUserTeamDefault) Code() int {
	return o._statusCode
}

func (o *PermitUserTeamDefault) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/teams][%d] PermitUserTeam default  %+v", o._statusCode, o.Payload)
}

func (o *PermitUserTeamDefault) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/teams][%d] PermitUserTeam default  %+v", o._statusCode, o.Payload)
}

func (o *PermitUserTeamDefault) GetPayload() *models.GeneralError {
	return o.Payload
}

func (o *PermitUserTeamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
