// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserModParams user mod params
//
// swagger:model user_mod_params
type UserModParams struct {

	// mod
	// Required: true
	Mod *string `json:"mod"`

	// perm
	// Required: true
	// Enum: [user admin owner]
	Perm *string `json:"perm"`
}

// Validate validates this user mod params
func (m *UserModParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserModParams) validateMod(formats strfmt.Registry) error {

	if err := validate.Required("mod", "body", m.Mod); err != nil {
		return err
	}

	return nil
}

var userModParamsTypePermPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","admin","owner"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userModParamsTypePermPropEnum = append(userModParamsTypePermPropEnum, v)
	}
}

const (

	// UserModParamsPermUser captures enum value "user"
	UserModParamsPermUser string = "user"

	// UserModParamsPermAdmin captures enum value "admin"
	UserModParamsPermAdmin string = "admin"

	// UserModParamsPermOwner captures enum value "owner"
	UserModParamsPermOwner string = "owner"
)

// prop value enum
func (m *UserModParams) validatePermEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userModParamsTypePermPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserModParams) validatePerm(formats strfmt.Registry) error {

	if err := validate.Required("perm", "body", m.Perm); err != nil {
		return err
	}

	// value enum
	if err := m.validatePermEnum("perm", "body", *m.Perm); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user mod params based on context it is used
func (m *UserModParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserModParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserModParams) UnmarshalBinary(b []byte) error {
	var res UserModParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
