// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TeamMod team mod
//
// swagger:model team_mod
type TeamMod struct {

	// mod id
	// Required: true
	// Format: uuid
	ModID *strfmt.UUID `json:"mod_id"`

	// perm
	// Required: true
	// Enum: [user admin owner]
	Perm *string `json:"perm"`

	// team id
	// Required: true
	// Format: uuid
	TeamID *strfmt.UUID `json:"team_id"`
}

// Validate validates this team mod
func (m *TeamMod) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamMod) validateModID(formats strfmt.Registry) error {

	if err := validate.Required("mod_id", "body", m.ModID); err != nil {
		return err
	}

	if err := validate.FormatOf("mod_id", "body", "uuid", m.ModID.String(), formats); err != nil {
		return err
	}

	return nil
}

var teamModTypePermPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","admin","owner"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		teamModTypePermPropEnum = append(teamModTypePermPropEnum, v)
	}
}

const (

	// TeamModPermUser captures enum value "user"
	TeamModPermUser string = "user"

	// TeamModPermAdmin captures enum value "admin"
	TeamModPermAdmin string = "admin"

	// TeamModPermOwner captures enum value "owner"
	TeamModPermOwner string = "owner"
)

// prop value enum
func (m *TeamMod) validatePermEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, teamModTypePermPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TeamMod) validatePerm(formats strfmt.Registry) error {

	if err := validate.Required("perm", "body", m.Perm); err != nil {
		return err
	}

	// value enum
	if err := m.validatePermEnum("perm", "body", *m.Perm); err != nil {
		return err
	}

	return nil
}

func (m *TeamMod) validateTeamID(formats strfmt.Registry) error {

	if err := validate.Required("team_id", "body", m.TeamID); err != nil {
		return err
	}

	if err := validate.FormatOf("team_id", "body", "uuid", m.TeamID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this team mod based on context it is used
func (m *TeamMod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TeamMod) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamMod) UnmarshalBinary(b []byte) error {
	var res TeamMod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
