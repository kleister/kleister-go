// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildVersion build version
// swagger:model build_version
type BuildVersion struct {

	// build id
	// Required: true
	// Format: uuid
	BuildID *strfmt.UUID `json:"build_id"`

	// version id
	// Required: true
	// Format: uuid
	VersionID *strfmt.UUID `json:"version_id"`
}

// Validate validates this build version
func (m *BuildVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildVersion) validateBuildID(formats strfmt.Registry) error {

	if err := validate.Required("build_id", "body", m.BuildID); err != nil {
		return err
	}

	if err := validate.FormatOf("build_id", "body", "uuid", m.BuildID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuildVersion) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("version_id", "body", m.VersionID); err != nil {
		return err
	}

	if err := validate.FormatOf("version_id", "body", "uuid", m.VersionID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildVersion) UnmarshalBinary(b []byte) error {
	var res BuildVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
