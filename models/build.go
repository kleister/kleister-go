// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Build build
//
// swagger:model build
type Build struct {

	// created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// fabric
	// Read Only: true
	Fabric *Fabric `json:"fabric,omitempty"`

	// fabric id
	// Format: uuid
	FabricID *strfmt.UUID `json:"fabric_id,omitempty"`

	// forge
	// Read Only: true
	Forge *Forge `json:"forge,omitempty"`

	// forge id
	// Format: uuid
	ForgeID *strfmt.UUID `json:"forge_id,omitempty"`

	// id
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// java
	Java *string `json:"java,omitempty"`

	// memory
	Memory *string `json:"memory,omitempty"`

	// minecraft
	// Read Only: true
	Minecraft *Minecraft `json:"minecraft,omitempty"`

	// minecraft id
	// Format: uuid
	MinecraftID *strfmt.UUID `json:"minecraft_id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// neoforge
	// Read Only: true
	Neoforge *Neoforge `json:"neoforge,omitempty"`

	// neoforge id
	// Format: uuid
	NeoforgeID *strfmt.UUID `json:"neoforge_id,omitempty"`

	// pack
	// Read Only: true
	Pack *Pack `json:"pack,omitempty"`

	// pack id
	// Format: uuid
	PackID strfmt.UUID `json:"pack_id,omitempty"`

	// public
	Public *bool `json:"public,omitempty"`

	// quilt
	// Read Only: true
	Quilt *Quilt `json:"quilt,omitempty"`

	// quilt id
	// Format: uuid
	QuiltID *strfmt.UUID `json:"quilt_id,omitempty"`

	// slug
	Slug *string `json:"slug,omitempty"`

	// updated at
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// versions
	// Read Only: true
	Versions []*BuildVersion `json:"versions,omitempty"`
}

// Validate validates this build
func (m *Build) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFabric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFabricID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForgeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinecraft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinecraftID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNeoforge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNeoforgeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuilt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuiltID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Build) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateFabric(formats strfmt.Registry) error {
	if swag.IsZero(m.Fabric) { // not required
		return nil
	}

	if m.Fabric != nil {
		if err := m.Fabric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fabric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fabric")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateFabricID(formats strfmt.Registry) error {
	if swag.IsZero(m.FabricID) { // not required
		return nil
	}

	if err := validate.FormatOf("fabric_id", "body", "uuid", m.FabricID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateForge(formats strfmt.Registry) error {
	if swag.IsZero(m.Forge) { // not required
		return nil
	}

	if m.Forge != nil {
		if err := m.Forge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forge")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateForgeID(formats strfmt.Registry) error {
	if swag.IsZero(m.ForgeID) { // not required
		return nil
	}

	if err := validate.FormatOf("forge_id", "body", "uuid", m.ForgeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateMinecraft(formats strfmt.Registry) error {
	if swag.IsZero(m.Minecraft) { // not required
		return nil
	}

	if m.Minecraft != nil {
		if err := m.Minecraft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minecraft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minecraft")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateMinecraftID(formats strfmt.Registry) error {
	if swag.IsZero(m.MinecraftID) { // not required
		return nil
	}

	if err := validate.FormatOf("minecraft_id", "body", "uuid", m.MinecraftID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateNeoforge(formats strfmt.Registry) error {
	if swag.IsZero(m.Neoforge) { // not required
		return nil
	}

	if m.Neoforge != nil {
		if err := m.Neoforge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neoforge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("neoforge")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateNeoforgeID(formats strfmt.Registry) error {
	if swag.IsZero(m.NeoforgeID) { // not required
		return nil
	}

	if err := validate.FormatOf("neoforge_id", "body", "uuid", m.NeoforgeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validatePack(formats strfmt.Registry) error {
	if swag.IsZero(m.Pack) { // not required
		return nil
	}

	if m.Pack != nil {
		if err := m.Pack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pack")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validatePackID(formats strfmt.Registry) error {
	if swag.IsZero(m.PackID) { // not required
		return nil
	}

	if err := validate.FormatOf("pack_id", "body", "uuid", m.PackID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateQuilt(formats strfmt.Registry) error {
	if swag.IsZero(m.Quilt) { // not required
		return nil
	}

	if m.Quilt != nil {
		if err := m.Quilt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quilt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quilt")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateQuiltID(formats strfmt.Registry) error {
	if swag.IsZero(m.QuiltID) { // not required
		return nil
	}

	if err := validate.FormatOf("quilt_id", "body", "uuid", m.QuiltID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	for i := 0; i < len(m.Versions); i++ {
		if swag.IsZero(m.Versions[i]) { // not required
			continue
		}

		if m.Versions[i] != nil {
			if err := m.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this build based on the context it is used
func (m *Build) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFabric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateForge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinecraft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNeoforge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuilt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Build) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Build) contextValidateFabric(ctx context.Context, formats strfmt.Registry) error {

	if m.Fabric != nil {

		if swag.IsZero(m.Fabric) { // not required
			return nil
		}

		if err := m.Fabric.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fabric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fabric")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateForge(ctx context.Context, formats strfmt.Registry) error {

	if m.Forge != nil {

		if swag.IsZero(m.Forge) { // not required
			return nil
		}

		if err := m.Forge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forge")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Build) contextValidateMinecraft(ctx context.Context, formats strfmt.Registry) error {

	if m.Minecraft != nil {

		if swag.IsZero(m.Minecraft) { // not required
			return nil
		}

		if err := m.Minecraft.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minecraft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minecraft")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateNeoforge(ctx context.Context, formats strfmt.Registry) error {

	if m.Neoforge != nil {

		if swag.IsZero(m.Neoforge) { // not required
			return nil
		}

		if err := m.Neoforge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neoforge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("neoforge")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidatePack(ctx context.Context, formats strfmt.Registry) error {

	if m.Pack != nil {

		if swag.IsZero(m.Pack) { // not required
			return nil
		}

		if err := m.Pack.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pack")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateQuilt(ctx context.Context, formats strfmt.Registry) error {

	if m.Quilt != nil {

		if swag.IsZero(m.Quilt) { // not required
			return nil
		}

		if err := m.Quilt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quilt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quilt")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Build) contextValidateVersions(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "versions", "body", []*BuildVersion(m.Versions)); err != nil {
		return err
	}

	for i := 0; i < len(m.Versions); i++ {

		if m.Versions[i] != nil {

			if swag.IsZero(m.Versions[i]) { // not required
				return nil
			}

			if err := m.Versions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Build) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Build) UnmarshalBinary(b []byte) error {
	var res Build
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
